// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* zapisy.h
   Generated by wsdl2h 2.8.30 from zapisy.wsdl and typemap.dat
   2016-04-09 15:47:34 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on zapisy.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stl.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   localhost/zapisy.wsdl                                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER                                                                 *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/

#import "stl.h"	// enable STL containers when used (option -s removes STL dependency)

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

z1 = "localhost/zapisy.wsdl"

*/

#define SOAP_NAMESPACE_OF_z1	"localhost/zapisy.wsdl"
//gsoap z1    schema namespace:	localhost/zapisy.wsdl
//gsoap z1    schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Primitive built-in type "xs:integer".
typedef std::string xsd__integer;

/// Primitive built-in type "xs:nonNegativeInteger".
typedef std::string xsd__nonNegativeInteger;


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class z1__student.
class z1__student;

//  Forward declaration of class z1__temat.
class z1__temat;

//  Forward declaration of class z1__termin.
class z1__termin;

//  Forward declaration of class z1__sala.
class z1__sala;

//  Forward declaration of class z1__przedmiot.
class z1__przedmiot;

//  Forward declaration of class z1__typ.
class z1__typ;

//  Forward declaration of class z1__prowadzacy.
class z1__prowadzacy;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   localhost/zapisy.wsdl                                                    *
 *                                                                            *
\******************************************************************************/

/// @brief "localhost/zapisy.wsdl":godzina is a simpleType restriction of XSD type xs:string.
///
/// Content pattern is "[0-2][0-9]:[0-5][0-9]".
typedef std::string z1__godzina "[0-2][0-9]:[0-5][0-9]";

/// @brief "localhost/zapisy.wsdl":id is a simpleType restriction of XSD type xs:integer.
///
typedef xsd__integer z1__id;

/// @brief "localhost/zapisy.wsdl":csv is a simpleType restriction of XSD type xs:integer.
///
typedef xsd__integer z1__csv;

/// @brief "localhost/zapisy.wsdl":filename is a simpleType restriction of XSD type xs:integer.
///
typedef xsd__integer z1__filename;

/// @brief "localhost/zapisy.wsdl":nrIndex is a simpleType restriction of XSD type xs:string.
///
/// Content pattern is "[0-9]{6}".
typedef std::string z1__nrIndex "[0-9]{6}";

/// @brief "localhost/zapisy.wsdl":wynik is a simpleType restriction of XSD type xs:string.
///
/// Content pattern is "ok|blad".
typedef std::string z1__wynik "ok|blad";


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   localhost/zapisy.wsdl                                                    *
 *                                                                            *
\******************************************************************************/

/// @brief "localhost/zapisy.wsdl":student is a complexType.
///
/// class z1__student operations:
/// - z1__student* soap_new_z1__student(soap*) allocate
/// - z1__student* soap_new_z1__student(soap*, int num) allocate array
/// - z1__student* soap_new_req_z1__student(soap*, ...) allocate, set required members
/// - z1__student* soap_new_set_z1__student(soap*, ...) allocate, set all public members
/// - z1__student::soap_default(soap*) reset members to default
/// - int soap_read_z1__student(soap*, z1__student*) deserialize from a stream
/// - int soap_write_z1__student(soap*, z1__student*) serialize to a stream
/// - z1__student* z1__student::soap_dup(soap*) returns deep copy of z1__student, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - z1__student::soap_del() deep deletes z1__student data members, use only after z1__student::soap_dup(NULL) (use soapcpp2 -Ed)
class z1__student
{ public:
/// Element "imie" of XSD type xs:string.
    std::string                          imie                           1;	///< Required element.
/// Element "nazwisko" of XSD type xs:string.
    std::string                          nazwisko                       1;	///< Required element.
/// Element "index" of XSD type "":nrIndex.
    z1__nrIndex                          index                          1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "localhost/zapisy.wsdl":temat is a complexType.
///
/// class z1__temat operations:
/// - z1__temat* soap_new_z1__temat(soap*) allocate
/// - z1__temat* soap_new_z1__temat(soap*, int num) allocate array
/// - z1__temat* soap_new_req_z1__temat(soap*, ...) allocate, set required members
/// - z1__temat* soap_new_set_z1__temat(soap*, ...) allocate, set all public members
/// - z1__temat::soap_default(soap*) reset members to default
/// - int soap_read_z1__temat(soap*, z1__temat*) deserialize from a stream
/// - int soap_write_z1__temat(soap*, z1__temat*) serialize to a stream
/// - z1__temat* z1__temat::soap_dup(soap*) returns deep copy of z1__temat, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - z1__temat::soap_del() deep deletes z1__temat data members, use only after z1__temat::soap_dup(NULL) (use soapcpp2 -Ed)
class z1__temat
{ public:
/// Element "temat" of XSD type xs:string.
    std::string                          temat                          1;	///< Required element.
/// Element "opis" of XSD type xs:string.
    std::string                          opis                           1;	///< Required element.
/// Element "miejsca" of XSD type xs:nonNegativeInteger.
    xsd__nonNegativeInteger              miejsca                        1;	///< Required element.
/// Element "wolneMiejsca" of XSD type xs:nonNegativeInteger.
    xsd__nonNegativeInteger              wolneMiejsca                   1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "localhost/zapisy.wsdl":termin is a complexType.
///
/// class z1__termin operations:
/// - z1__termin* soap_new_z1__termin(soap*) allocate
/// - z1__termin* soap_new_z1__termin(soap*, int num) allocate array
/// - z1__termin* soap_new_req_z1__termin(soap*, ...) allocate, set required members
/// - z1__termin* soap_new_set_z1__termin(soap*, ...) allocate, set all public members
/// - z1__termin::soap_default(soap*) reset members to default
/// - int soap_read_z1__termin(soap*, z1__termin*) deserialize from a stream
/// - int soap_write_z1__termin(soap*, z1__termin*) serialize to a stream
/// - z1__termin* z1__termin::soap_dup(soap*) returns deep copy of z1__termin, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - z1__termin::soap_del() deep deletes z1__termin data members, use only after z1__termin::soap_dup(NULL) (use soapcpp2 -Ed)
class z1__termin
{ public:
/// Element "dzien" of XSD type xs:string.
    std::string                          dzien                          1;	///< Required element.
/// Element "godzinaOd" of XSD type "":godzina.
    z1__godzina                          godzinaOd                      1;	///< Required element.
/// Element "godzinaDo" of XSD type "":godzina.
    z1__godzina                          godzinaDo                      1;	///< Required element.
/// Element "miejsca" of XSD type xs:int.
    int                                  miejsca                        1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "localhost/zapisy.wsdl":sala is a complexType.
///
/// class z1__sala operations:
/// - z1__sala* soap_new_z1__sala(soap*) allocate
/// - z1__sala* soap_new_z1__sala(soap*, int num) allocate array
/// - z1__sala* soap_new_req_z1__sala(soap*, ...) allocate, set required members
/// - z1__sala* soap_new_set_z1__sala(soap*, ...) allocate, set all public members
/// - z1__sala::soap_default(soap*) reset members to default
/// - int soap_read_z1__sala(soap*, z1__sala*) deserialize from a stream
/// - int soap_write_z1__sala(soap*, z1__sala*) serialize to a stream
/// - z1__sala* z1__sala::soap_dup(soap*) returns deep copy of z1__sala, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - z1__sala::soap_del() deep deletes z1__sala data members, use only after z1__sala::soap_dup(NULL) (use soapcpp2 -Ed)
class z1__sala
{ public:
/// Element "numer" of XSD type xs:string.
    std::string                          numer                          1;	///< Required element.
/// Element "maxMiejsc" of XSD type xs:nonNegativeInteger.
    xsd__nonNegativeInteger              maxMiejsc                      1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "localhost/zapisy.wsdl":przedmiot is a complexType.
///
/// class z1__przedmiot operations:
/// - z1__przedmiot* soap_new_z1__przedmiot(soap*) allocate
/// - z1__przedmiot* soap_new_z1__przedmiot(soap*, int num) allocate array
/// - z1__przedmiot* soap_new_req_z1__przedmiot(soap*, ...) allocate, set required members
/// - z1__przedmiot* soap_new_set_z1__przedmiot(soap*, ...) allocate, set all public members
/// - z1__przedmiot::soap_default(soap*) reset members to default
/// - int soap_read_z1__przedmiot(soap*, z1__przedmiot*) deserialize from a stream
/// - int soap_write_z1__przedmiot(soap*, z1__przedmiot*) serialize to a stream
/// - z1__przedmiot* z1__przedmiot::soap_dup(soap*) returns deep copy of z1__przedmiot, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - z1__przedmiot::soap_del() deep deletes z1__przedmiot data members, use only after z1__przedmiot::soap_dup(NULL) (use soapcpp2 -Ed)
class z1__przedmiot
{ public:
/// Element "nazwa" of XSD type xs:string.
    std::string                          nazwa                          1;	///< Required element.
/// Element "typ" of XSD type xs:integer.
    xsd__integer                         typ                            1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "localhost/zapisy.wsdl":typ is a complexType.
///
/// class z1__typ operations:
/// - z1__typ* soap_new_z1__typ(soap*) allocate
/// - z1__typ* soap_new_z1__typ(soap*, int num) allocate array
/// - z1__typ* soap_new_req_z1__typ(soap*, ...) allocate, set required members
/// - z1__typ* soap_new_set_z1__typ(soap*, ...) allocate, set all public members
/// - z1__typ::soap_default(soap*) reset members to default
/// - int soap_read_z1__typ(soap*, z1__typ*) deserialize from a stream
/// - int soap_write_z1__typ(soap*, z1__typ*) serialize to a stream
/// - z1__typ* z1__typ::soap_dup(soap*) returns deep copy of z1__typ, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - z1__typ::soap_del() deep deletes z1__typ data members, use only after z1__typ::soap_dup(NULL) (use soapcpp2 -Ed)
class z1__typ
{ public:
/// Element "id" of XSD type xs:integer.
    xsd__integer                         id                             1;	///< Required element.
/// Element "opis" of XSD type xs:string.
    std::string                          opis                           1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "localhost/zapisy.wsdl":prowadzacy is a complexType.
///
/// class z1__prowadzacy operations:
/// - z1__prowadzacy* soap_new_z1__prowadzacy(soap*) allocate
/// - z1__prowadzacy* soap_new_z1__prowadzacy(soap*, int num) allocate array
/// - z1__prowadzacy* soap_new_req_z1__prowadzacy(soap*, ...) allocate, set required members
/// - z1__prowadzacy* soap_new_set_z1__prowadzacy(soap*, ...) allocate, set all public members
/// - z1__prowadzacy::soap_default(soap*) reset members to default
/// - int soap_read_z1__prowadzacy(soap*, z1__prowadzacy*) deserialize from a stream
/// - int soap_write_z1__prowadzacy(soap*, z1__prowadzacy*) serialize to a stream
/// - z1__prowadzacy* z1__prowadzacy::soap_dup(soap*) returns deep copy of z1__prowadzacy, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - z1__prowadzacy::soap_del() deep deletes z1__prowadzacy data members, use only after z1__prowadzacy::soap_dup(NULL) (use soapcpp2 -Ed)
class z1__prowadzacy
{ public:
/// Element "email" of XSD type xs:string.
    std::string                          email                          1;	///< Required element.
/// Element "haslo" of XSD type xs:string.
    std::string                          haslo                          1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   localhost/zapisy.wsdl                                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   localhost/zapisy.wsdl                                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/

// This service supports SOAP 1.2 namespaces:
#import "soap12.h"

//gsoap z1   service name:	zapisy 
//gsoap z1   service type:	zapisy 
//gsoap z1   service port:	http://127.0.0.1/ 
//gsoap z1   service namespace:	localhost/zapisy.wsdl 
//gsoap z1   service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage zapisy Definitions

@section zapisy_bindings Service Bindings

  - @ref zapisy

@section zapisy_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page zapisy Binding "zapisy"

@section zapisy_service Service Documentation "zapisy"
gSOAP 2.7.9k generated service definition

@section zapisy_operations Operations of Binding "zapisy"

  - @ref z1__zapiszProjekt

  - @ref z1__dodajProjekt

  - @ref z1__zapiszTermin

  - @ref z1__dodajTermin

  - @ref z1__eksportujProjekt

  - @ref z1__eksportujTermin

  - @ref z1__eksportujPrzedmiot

@section zapisy_ports Endpoints of Binding "zapisy"

  - http://127.0.0.1/

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   zapisy                                                                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   z1__zapiszProjekt                                                        *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "z1__zapiszProjektResponse" of operation "z1__zapiszProjekt".
struct z1__zapiszProjektResponse
{
    z1__wynik                           rezultat;
};

/** Operation "z1__zapiszProjekt" of service binding "zapisy".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_z1__zapiszProjekt(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    z1__id                              ID,
    z1__student*                        zapisywany,
    // output parameters:
    struct z1__zapiszProjektResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int z1__zapiszProjekt(
    struct soap *soap,
    // input parameters:
    z1__id                              ID,
    z1__student*                        zapisywany,
    // output parameters:
    struct z1__zapiszProjektResponse&
  );
@endcode

C++ proxy class (defined in soapzapisyProxy.h):
@code
  class zapisyProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapzapisyService.h):
@code
  class zapisyService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap z1   service method-protocol:	zapiszProjekt SOAP
//gsoap z1   service method-style:	zapiszProjekt rpc
//gsoap z1   service method-encoding:	zapiszProjekt http://schemas.xmlsoap.org/soap/encoding/
//gsoap z1   service method-action:	zapiszProjekt ""
//gsoap z1   service method-output-action:	zapiszProjekt Response
int z1__zapiszProjekt(
    z1__id                              ID,	///< Input parameter
    z1__student*                        zapisywany,	///< Input parameter
    struct z1__zapiszProjektResponse   &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   z1__dodajProjekt                                                         *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "z1__dodajProjektResponse" of operation "z1__dodajProjekt".
struct z1__dodajProjektResponse
{
    z1__wynik                           rezultat;
};

/** Operation "z1__dodajProjekt" of service binding "zapisy".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_z1__dodajProjekt(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    z1__temat*                          projekt,
    // output parameters:
    struct z1__dodajProjektResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int z1__dodajProjekt(
    struct soap *soap,
    // input parameters:
    z1__temat*                          projekt,
    // output parameters:
    struct z1__dodajProjektResponse&
  );
@endcode

C++ proxy class (defined in soapzapisyProxy.h):
@code
  class zapisyProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapzapisyService.h):
@code
  class zapisyService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap z1   service method-protocol:	dodajProjekt SOAP
//gsoap z1   service method-style:	dodajProjekt rpc
//gsoap z1   service method-encoding:	dodajProjekt http://schemas.xmlsoap.org/soap/encoding/
//gsoap z1   service method-action:	dodajProjekt ""
//gsoap z1   service method-output-action:	dodajProjekt Response
int z1__dodajProjekt(
    z1__temat*                          projekt,	///< Input parameter
    struct z1__dodajProjektResponse    &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   z1__zapiszTermin                                                         *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "z1__zapiszTerminResponse" of operation "z1__zapiszTermin".
struct z1__zapiszTerminResponse
{
    z1__wynik                           rezultat;
};

/** Operation "z1__zapiszTermin" of service binding "zapisy".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_z1__zapiszTermin(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    z1__id                              ID,
    z1__student*                        zapisywany,
    // output parameters:
    struct z1__zapiszTerminResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int z1__zapiszTermin(
    struct soap *soap,
    // input parameters:
    z1__id                              ID,
    z1__student*                        zapisywany,
    // output parameters:
    struct z1__zapiszTerminResponse&
  );
@endcode

C++ proxy class (defined in soapzapisyProxy.h):
@code
  class zapisyProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapzapisyService.h):
@code
  class zapisyService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap z1   service method-protocol:	zapiszTermin SOAP
//gsoap z1   service method-style:	zapiszTermin rpc
//gsoap z1   service method-encoding:	zapiszTermin http://schemas.xmlsoap.org/soap/encoding/
//gsoap z1   service method-action:	zapiszTermin ""
//gsoap z1   service method-output-action:	zapiszTermin Response
int z1__zapiszTermin(
    z1__id                              ID,	///< Input parameter
    z1__student*                        zapisywany,	///< Input parameter
    struct z1__zapiszTerminResponse    &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   z1__dodajTermin                                                          *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "z1__dodajTerminResponse" of operation "z1__dodajTermin".
struct z1__dodajTerminResponse
{
    z1__wynik                           rezultat;
};

/** Operation "z1__dodajTermin" of service binding "zapisy".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_z1__dodajTermin(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    z1__termin*                         termin,
    // output parameters:
    struct z1__dodajTerminResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int z1__dodajTermin(
    struct soap *soap,
    // input parameters:
    z1__termin*                         termin,
    // output parameters:
    struct z1__dodajTerminResponse&
  );
@endcode

C++ proxy class (defined in soapzapisyProxy.h):
@code
  class zapisyProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapzapisyService.h):
@code
  class zapisyService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap z1   service method-protocol:	dodajTermin SOAP
//gsoap z1   service method-style:	dodajTermin rpc
//gsoap z1   service method-encoding:	dodajTermin http://schemas.xmlsoap.org/soap/encoding/
//gsoap z1   service method-action:	dodajTermin ""
//gsoap z1   service method-output-action:	dodajTermin Response
int z1__dodajTermin(
    z1__termin*                         termin,	///< Input parameter
    struct z1__dodajTerminResponse     &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   z1__eksportujProjekt                                                     *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "z1__eksportujProjektResponse" of operation "z1__eksportujProjekt".
struct z1__eksportujProjektResponse
{
    z1__filename                        nazwa;
    z1__csv                             plik;
};

/** Operation "z1__eksportujProjekt" of service binding "zapisy".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_z1__eksportujProjekt(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    z1__id                              ID,
    // output parameters:
    struct z1__eksportujProjektResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int z1__eksportujProjekt(
    struct soap *soap,
    // input parameters:
    z1__id                              ID,
    // output parameters:
    struct z1__eksportujProjektResponse&
  );
@endcode

C++ proxy class (defined in soapzapisyProxy.h):
@code
  class zapisyProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapzapisyService.h):
@code
  class zapisyService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap z1   service method-protocol:	eksportujProjekt SOAP
//gsoap z1   service method-style:	eksportujProjekt rpc
//gsoap z1   service method-encoding:	eksportujProjekt http://schemas.xmlsoap.org/soap/encoding/
//gsoap z1   service method-action:	eksportujProjekt ""
//gsoap z1   service method-output-action:	eksportujProjekt Response
int z1__eksportujProjekt(
    z1__id                              ID,	///< Input parameter
    struct z1__eksportujProjektResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   z1__eksportujTermin                                                      *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "z1__eksportujTerminResponse" of operation "z1__eksportujTermin".
struct z1__eksportujTerminResponse
{
    z1__filename                        nazwa;
    z1__csv                             plik;
};

/** Operation "z1__eksportujTermin" of service binding "zapisy".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_z1__eksportujTermin(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    z1__id                              ID,
    // output parameters:
    struct z1__eksportujTerminResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int z1__eksportujTermin(
    struct soap *soap,
    // input parameters:
    z1__id                              ID,
    // output parameters:
    struct z1__eksportujTerminResponse&
  );
@endcode

C++ proxy class (defined in soapzapisyProxy.h):
@code
  class zapisyProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapzapisyService.h):
@code
  class zapisyService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap z1   service method-protocol:	eksportujTermin SOAP
//gsoap z1   service method-style:	eksportujTermin rpc
//gsoap z1   service method-encoding:	eksportujTermin http://schemas.xmlsoap.org/soap/encoding/
//gsoap z1   service method-action:	eksportujTermin ""
//gsoap z1   service method-output-action:	eksportujTermin Response
int z1__eksportujTermin(
    z1__id                              ID,	///< Input parameter
    struct z1__eksportujTerminResponse &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   z1__eksportujPrzedmiot                                                   *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "z1__eksportujPrzedmiotResponse" of operation "z1__eksportujPrzedmiot".
struct z1__eksportujPrzedmiotResponse
{
    z1__filename                        nazwa;
    z1__csv                             plik;
};

/** Operation "z1__eksportujPrzedmiot" of service binding "zapisy".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_z1__eksportujPrzedmiot(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    z1__id                              ID,
    // output parameters:
    struct z1__eksportujPrzedmiotResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int z1__eksportujPrzedmiot(
    struct soap *soap,
    // input parameters:
    z1__id                              ID,
    // output parameters:
    struct z1__eksportujPrzedmiotResponse&
  );
@endcode

C++ proxy class (defined in soapzapisyProxy.h):
@code
  class zapisyProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapzapisyService.h):
@code
  class zapisyService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap z1   service method-protocol:	eksportujPrzedmiot SOAP
//gsoap z1   service method-style:	eksportujPrzedmiot rpc
//gsoap z1   service method-encoding:	eksportujPrzedmiot http://schemas.xmlsoap.org/soap/encoding/
//gsoap z1   service method-action:	eksportujPrzedmiot ""
//gsoap z1   service method-output-action:	eksportujPrzedmiot Response
int z1__eksportujPrzedmiot(
    z1__id                              ID,	///< Input parameter
    struct z1__eksportujPrzedmiotResponse&	///< Output response struct parameter
);

/**

@page zapisy Binding "zapisy"

@section zapisy_policy_enablers Policy Enablers of Binding "zapisy"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section z1 Top-level root elements of schema "localhost/zapisy.wsdl"

*/

/* End of zapisy.h */
