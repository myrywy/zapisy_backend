/* soapC.cpp
   Generated by gSOAP 2.8.30 for zapisy.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.30 2016-05-19 17:24:28 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if ((soap->error && soap->error != SOAP_TAG_MISMATCH) || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_z1__wynik:
		return soap_in_z1__wynik(soap, NULL, NULL, "z1:wynik");
	case SOAP_TYPE_z1__nrIndex:
		return soap_in_z1__nrIndex(soap, NULL, NULL, "z1:nrIndex");
	case SOAP_TYPE_z1__filename:
		return soap_in_z1__filename(soap, NULL, NULL, "z1:filename");
	case SOAP_TYPE_z1__csv:
		return soap_in_z1__csv(soap, NULL, NULL, "z1:csv");
	case SOAP_TYPE_z1__id:
		return soap_in_z1__id(soap, NULL, NULL, "z1:id");
	case SOAP_TYPE_z1__godzina:
		return soap_in_z1__godzina(soap, NULL, NULL, "z1:godzina");
	case SOAP_TYPE_z1__prowadzacy:
		return soap_in_z1__prowadzacy(soap, NULL, NULL, "z1:prowadzacy");
	case SOAP_TYPE_z1__typ:
		return soap_in_z1__typ(soap, NULL, NULL, "z1:typ");
	case SOAP_TYPE_z1__przedmiot:
		return soap_in_z1__przedmiot(soap, NULL, NULL, "z1:przedmiot");
	case SOAP_TYPE_z1__sala:
		return soap_in_z1__sala(soap, NULL, NULL, "z1:sala");
	case SOAP_TYPE_z1__termin:
		return soap_in_z1__termin(soap, NULL, NULL, "z1:termin");
	case SOAP_TYPE_z1__temat:
		return soap_in_z1__temat(soap, NULL, NULL, "z1:temat");
	case SOAP_TYPE_z1__student:
		return soap_in_z1__student(soap, NULL, NULL, "z1:student");
	case SOAP_TYPE_xsd__nonNegativeInteger:
		return soap_in_xsd__nonNegativeInteger(soap, NULL, NULL, "xsd:nonNegativeInteger");
	case SOAP_TYPE_xsd__integer:
		return soap_in_xsd__integer(soap, NULL, NULL, "xsd:integer");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_z1__eksportujPrzedmiot:
		return soap_in_z1__eksportujPrzedmiot(soap, NULL, NULL, "z1:eksportujPrzedmiot");
	case SOAP_TYPE_z1__eksportujPrzedmiotResponse:
		return soap_in_z1__eksportujPrzedmiotResponse(soap, NULL, NULL, "z1:eksportujPrzedmiotResponse");
	case SOAP_TYPE_z1__eksportujTermin:
		return soap_in_z1__eksportujTermin(soap, NULL, NULL, "z1:eksportujTermin");
	case SOAP_TYPE_z1__eksportujTerminResponse:
		return soap_in_z1__eksportujTerminResponse(soap, NULL, NULL, "z1:eksportujTerminResponse");
	case SOAP_TYPE_z1__eksportujProjekt:
		return soap_in_z1__eksportujProjekt(soap, NULL, NULL, "z1:eksportujProjekt");
	case SOAP_TYPE_z1__eksportujProjektResponse:
		return soap_in_z1__eksportujProjektResponse(soap, NULL, NULL, "z1:eksportujProjektResponse");
	case SOAP_TYPE_z1__dodajTermin:
		return soap_in_z1__dodajTermin(soap, NULL, NULL, "z1:dodajTermin");
	case SOAP_TYPE_z1__dodajTerminResponse:
		return soap_in_z1__dodajTerminResponse(soap, NULL, NULL, "z1:dodajTerminResponse");
	case SOAP_TYPE_z1__zapiszTermin:
		return soap_in_z1__zapiszTermin(soap, NULL, NULL, "z1:zapiszTermin");
	case SOAP_TYPE_z1__zapiszTerminResponse:
		return soap_in_z1__zapiszTerminResponse(soap, NULL, NULL, "z1:zapiszTerminResponse");
	case SOAP_TYPE_z1__dodajProjekt:
		return soap_in_z1__dodajProjekt(soap, NULL, NULL, "z1:dodajProjekt");
	case SOAP_TYPE_z1__dodajProjektResponse:
		return soap_in_z1__dodajProjektResponse(soap, NULL, NULL, "z1:dodajProjektResponse");
	case SOAP_TYPE_z1__zapiszProjekt:
		return soap_in_z1__zapiszProjekt(soap, NULL, NULL, "z1:zapiszProjekt");
	case SOAP_TYPE_z1__zapiszProjektResponse:
		return soap_in_z1__zapiszProjektResponse(soap, NULL, NULL, "z1:zapiszProjektResponse");
	case SOAP_TYPE_PointerToz1__termin:
		return soap_in_PointerToz1__termin(soap, NULL, NULL, "z1:termin");
	case SOAP_TYPE_PointerToz1__temat:
		return soap_in_PointerToz1__temat(soap, NULL, NULL, "z1:temat");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "z1:wynik"))
		{	*type = SOAP_TYPE_z1__wynik;
			return soap_in_z1__wynik(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "z1:nrIndex"))
		{	*type = SOAP_TYPE_z1__nrIndex;
			return soap_in_z1__nrIndex(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "z1:filename"))
		{	*type = SOAP_TYPE_z1__filename;
			return soap_in_z1__filename(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "z1:csv"))
		{	*type = SOAP_TYPE_z1__csv;
			return soap_in_z1__csv(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "z1:id"))
		{	*type = SOAP_TYPE_z1__id;
			return soap_in_z1__id(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "z1:godzina"))
		{	*type = SOAP_TYPE_z1__godzina;
			return soap_in_z1__godzina(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "z1:prowadzacy"))
		{	*type = SOAP_TYPE_z1__prowadzacy;
			return soap_in_z1__prowadzacy(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "z1:typ"))
		{	*type = SOAP_TYPE_z1__typ;
			return soap_in_z1__typ(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "z1:przedmiot"))
		{	*type = SOAP_TYPE_z1__przedmiot;
			return soap_in_z1__przedmiot(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "z1:sala"))
		{	*type = SOAP_TYPE_z1__sala;
			return soap_in_z1__sala(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "z1:termin"))
		{	*type = SOAP_TYPE_z1__termin;
			return soap_in_z1__termin(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "z1:temat"))
		{	*type = SOAP_TYPE_z1__temat;
			return soap_in_z1__temat(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "z1:student"))
		{	*type = SOAP_TYPE_z1__student;
			return soap_in_z1__student(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:nonNegativeInteger"))
		{	*type = SOAP_TYPE_xsd__nonNegativeInteger;
			return soap_in_xsd__nonNegativeInteger(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:integer"))
		{	*type = SOAP_TYPE_xsd__integer;
			return soap_in_xsd__integer(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "z1:eksportujPrzedmiot"))
		{	*type = SOAP_TYPE_z1__eksportujPrzedmiot;
			return soap_in_z1__eksportujPrzedmiot(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "z1:eksportujPrzedmiotResponse"))
		{	*type = SOAP_TYPE_z1__eksportujPrzedmiotResponse;
			return soap_in_z1__eksportujPrzedmiotResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "z1:eksportujTermin"))
		{	*type = SOAP_TYPE_z1__eksportujTermin;
			return soap_in_z1__eksportujTermin(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "z1:eksportujTerminResponse"))
		{	*type = SOAP_TYPE_z1__eksportujTerminResponse;
			return soap_in_z1__eksportujTerminResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "z1:eksportujProjekt"))
		{	*type = SOAP_TYPE_z1__eksportujProjekt;
			return soap_in_z1__eksportujProjekt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "z1:eksportujProjektResponse"))
		{	*type = SOAP_TYPE_z1__eksportujProjektResponse;
			return soap_in_z1__eksportujProjektResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "z1:dodajTermin"))
		{	*type = SOAP_TYPE_z1__dodajTermin;
			return soap_in_z1__dodajTermin(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "z1:dodajTerminResponse"))
		{	*type = SOAP_TYPE_z1__dodajTerminResponse;
			return soap_in_z1__dodajTerminResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "z1:zapiszTermin"))
		{	*type = SOAP_TYPE_z1__zapiszTermin;
			return soap_in_z1__zapiszTermin(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "z1:zapiszTerminResponse"))
		{	*type = SOAP_TYPE_z1__zapiszTerminResponse;
			return soap_in_z1__zapiszTerminResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "z1:dodajProjekt"))
		{	*type = SOAP_TYPE_z1__dodajProjekt;
			return soap_in_z1__dodajProjekt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "z1:dodajProjektResponse"))
		{	*type = SOAP_TYPE_z1__dodajProjektResponse;
			return soap_in_z1__dodajProjektResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "z1:zapiszProjekt"))
		{	*type = SOAP_TYPE_z1__zapiszProjekt;
			return soap_in_z1__zapiszProjekt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "z1:zapiszProjektResponse"))
		{	*type = SOAP_TYPE_z1__zapiszProjektResponse;
			return soap_in_z1__zapiszProjektResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other && !soap->fignore)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				if (soap_ignore(soap) || soap_element_end_in(soap, NULL))
					return soap->error;
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_z1__wynik:
		return soap_out_z1__wynik(soap, tag, id, (const std::string *)ptr, "z1:wynik");
	case SOAP_TYPE_z1__nrIndex:
		return soap_out_z1__nrIndex(soap, tag, id, (const std::string *)ptr, "z1:nrIndex");
	case SOAP_TYPE_z1__filename:
		return soap_out_z1__filename(soap, tag, id, (const std::string *)ptr, "z1:filename");
	case SOAP_TYPE_z1__csv:
		return soap_out_z1__csv(soap, tag, id, (const std::string *)ptr, "z1:csv");
	case SOAP_TYPE_z1__id:
		return soap_out_z1__id(soap, tag, id, (const std::string *)ptr, "z1:id");
	case SOAP_TYPE_z1__godzina:
		return soap_out_z1__godzina(soap, tag, id, (const std::string *)ptr, "z1:godzina");
	case SOAP_TYPE_z1__prowadzacy:
		return ((z1__prowadzacy *)ptr)->soap_out(soap, tag, id, "z1:prowadzacy");
	case SOAP_TYPE_z1__typ:
		return ((z1__typ *)ptr)->soap_out(soap, tag, id, "z1:typ");
	case SOAP_TYPE_z1__przedmiot:
		return ((z1__przedmiot *)ptr)->soap_out(soap, tag, id, "z1:przedmiot");
	case SOAP_TYPE_z1__sala:
		return ((z1__sala *)ptr)->soap_out(soap, tag, id, "z1:sala");
	case SOAP_TYPE_z1__termin:
		return ((z1__termin *)ptr)->soap_out(soap, tag, id, "z1:termin");
	case SOAP_TYPE_z1__temat:
		return ((z1__temat *)ptr)->soap_out(soap, tag, id, "z1:temat");
	case SOAP_TYPE_z1__student:
		return ((z1__student *)ptr)->soap_out(soap, tag, id, "z1:student");
	case SOAP_TYPE_xsd__nonNegativeInteger:
		return soap_out_xsd__nonNegativeInteger(soap, tag, id, (const std::string *)ptr, "xsd:nonNegativeInteger");
	case SOAP_TYPE_xsd__integer:
		return soap_out_xsd__integer(soap, tag, id, (const std::string *)ptr, "xsd:integer");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_z1__eksportujPrzedmiot:
		return soap_out_z1__eksportujPrzedmiot(soap, tag, id, (const struct z1__eksportujPrzedmiot *)ptr, "z1:eksportujPrzedmiot");
	case SOAP_TYPE_z1__eksportujPrzedmiotResponse:
		return soap_out_z1__eksportujPrzedmiotResponse(soap, tag, id, (const struct z1__eksportujPrzedmiotResponse *)ptr, "z1:eksportujPrzedmiotResponse");
	case SOAP_TYPE_z1__eksportujTermin:
		return soap_out_z1__eksportujTermin(soap, tag, id, (const struct z1__eksportujTermin *)ptr, "z1:eksportujTermin");
	case SOAP_TYPE_z1__eksportujTerminResponse:
		return soap_out_z1__eksportujTerminResponse(soap, tag, id, (const struct z1__eksportujTerminResponse *)ptr, "z1:eksportujTerminResponse");
	case SOAP_TYPE_z1__eksportujProjekt:
		return soap_out_z1__eksportujProjekt(soap, tag, id, (const struct z1__eksportujProjekt *)ptr, "z1:eksportujProjekt");
	case SOAP_TYPE_z1__eksportujProjektResponse:
		return soap_out_z1__eksportujProjektResponse(soap, tag, id, (const struct z1__eksportujProjektResponse *)ptr, "z1:eksportujProjektResponse");
	case SOAP_TYPE_z1__dodajTermin:
		return soap_out_z1__dodajTermin(soap, tag, id, (const struct z1__dodajTermin *)ptr, "z1:dodajTermin");
	case SOAP_TYPE_z1__dodajTerminResponse:
		return soap_out_z1__dodajTerminResponse(soap, tag, id, (const struct z1__dodajTerminResponse *)ptr, "z1:dodajTerminResponse");
	case SOAP_TYPE_z1__zapiszTermin:
		return soap_out_z1__zapiszTermin(soap, tag, id, (const struct z1__zapiszTermin *)ptr, "z1:zapiszTermin");
	case SOAP_TYPE_z1__zapiszTerminResponse:
		return soap_out_z1__zapiszTerminResponse(soap, tag, id, (const struct z1__zapiszTerminResponse *)ptr, "z1:zapiszTerminResponse");
	case SOAP_TYPE_z1__dodajProjekt:
		return soap_out_z1__dodajProjekt(soap, tag, id, (const struct z1__dodajProjekt *)ptr, "z1:dodajProjekt");
	case SOAP_TYPE_z1__dodajProjektResponse:
		return soap_out_z1__dodajProjektResponse(soap, tag, id, (const struct z1__dodajProjektResponse *)ptr, "z1:dodajProjektResponse");
	case SOAP_TYPE_z1__zapiszProjekt:
		return soap_out_z1__zapiszProjekt(soap, tag, id, (const struct z1__zapiszProjekt *)ptr, "z1:zapiszProjekt");
	case SOAP_TYPE_z1__zapiszProjektResponse:
		return soap_out_z1__zapiszProjektResponse(soap, tag, id, (const struct z1__zapiszProjektResponse *)ptr, "z1:zapiszProjektResponse");
	case SOAP_TYPE_PointerToz1__termin:
		return soap_out_PointerToz1__termin(soap, tag, id, (z1__termin *const*)ptr, "z1:termin");
	case SOAP_TYPE_PointerToz1__temat:
		return soap_out_PointerToz1__temat(soap, tag, id, (z1__temat *const*)ptr, "z1:temat");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}
#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_z1__wynik:
		soap_serialize_z1__wynik(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_z1__nrIndex:
		soap_serialize_z1__nrIndex(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_z1__filename:
		soap_serialize_z1__filename(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_z1__csv:
		soap_serialize_z1__csv(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_z1__id:
		soap_serialize_z1__id(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_z1__godzina:
		soap_serialize_z1__godzina(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_z1__prowadzacy:
		((z1__prowadzacy *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_z1__typ:
		((z1__typ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_z1__przedmiot:
		((z1__przedmiot *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_z1__sala:
		((z1__sala *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_z1__termin:
		((z1__termin *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_z1__temat:
		((z1__temat *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_z1__student:
		((z1__student *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__nonNegativeInteger:
		soap_serialize_xsd__nonNegativeInteger(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__integer:
		soap_serialize_xsd__integer(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_z1__eksportujPrzedmiot:
		soap_serialize_z1__eksportujPrzedmiot(soap, (const struct z1__eksportujPrzedmiot *)ptr);
		break;
	case SOAP_TYPE_z1__eksportujPrzedmiotResponse:
		soap_serialize_z1__eksportujPrzedmiotResponse(soap, (const struct z1__eksportujPrzedmiotResponse *)ptr);
		break;
	case SOAP_TYPE_z1__eksportujTermin:
		soap_serialize_z1__eksportujTermin(soap, (const struct z1__eksportujTermin *)ptr);
		break;
	case SOAP_TYPE_z1__eksportujTerminResponse:
		soap_serialize_z1__eksportujTerminResponse(soap, (const struct z1__eksportujTerminResponse *)ptr);
		break;
	case SOAP_TYPE_z1__eksportujProjekt:
		soap_serialize_z1__eksportujProjekt(soap, (const struct z1__eksportujProjekt *)ptr);
		break;
	case SOAP_TYPE_z1__eksportujProjektResponse:
		soap_serialize_z1__eksportujProjektResponse(soap, (const struct z1__eksportujProjektResponse *)ptr);
		break;
	case SOAP_TYPE_z1__dodajTermin:
		soap_serialize_z1__dodajTermin(soap, (const struct z1__dodajTermin *)ptr);
		break;
	case SOAP_TYPE_z1__dodajTerminResponse:
		soap_serialize_z1__dodajTerminResponse(soap, (const struct z1__dodajTerminResponse *)ptr);
		break;
	case SOAP_TYPE_z1__zapiszTermin:
		soap_serialize_z1__zapiszTermin(soap, (const struct z1__zapiszTermin *)ptr);
		break;
	case SOAP_TYPE_z1__zapiszTerminResponse:
		soap_serialize_z1__zapiszTerminResponse(soap, (const struct z1__zapiszTerminResponse *)ptr);
		break;
	case SOAP_TYPE_z1__dodajProjekt:
		soap_serialize_z1__dodajProjekt(soap, (const struct z1__dodajProjekt *)ptr);
		break;
	case SOAP_TYPE_z1__dodajProjektResponse:
		soap_serialize_z1__dodajProjektResponse(soap, (const struct z1__dodajProjektResponse *)ptr);
		break;
	case SOAP_TYPE_z1__zapiszProjekt:
		soap_serialize_z1__zapiszProjekt(soap, (const struct z1__zapiszProjekt *)ptr);
		break;
	case SOAP_TYPE_z1__zapiszProjektResponse:
		soap_serialize_z1__zapiszProjektResponse(soap, (const struct z1__zapiszProjektResponse *)ptr);
		break;
	case SOAP_TYPE_PointerToz1__termin:
		soap_serialize_PointerToz1__termin(soap, (z1__termin *const*)ptr);
		break;
	case SOAP_TYPE_PointerToz1__temat:
		soap_serialize_PointerToz1__temat(soap, (z1__temat *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}
#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_z1__student:
		return (void*)soap_instantiate_z1__student(soap, -1, type, arrayType, n);
	case SOAP_TYPE_z1__temat:
		return (void*)soap_instantiate_z1__temat(soap, -1, type, arrayType, n);
	case SOAP_TYPE_z1__termin:
		return (void*)soap_instantiate_z1__termin(soap, -1, type, arrayType, n);
	case SOAP_TYPE_z1__sala:
		return (void*)soap_instantiate_z1__sala(soap, -1, type, arrayType, n);
	case SOAP_TYPE_z1__przedmiot:
		return (void*)soap_instantiate_z1__przedmiot(soap, -1, type, arrayType, n);
	case SOAP_TYPE_z1__typ:
		return (void*)soap_instantiate_z1__typ(soap, -1, type, arrayType, n);
	case SOAP_TYPE_z1__prowadzacy:
		return (void*)soap_instantiate_z1__prowadzacy(soap, -1, type, arrayType, n);
	case SOAP_TYPE_z1__zapiszProjektResponse:
		return (void*)soap_instantiate_z1__zapiszProjektResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_z1__zapiszProjekt:
		return (void*)soap_instantiate_z1__zapiszProjekt(soap, -1, type, arrayType, n);
	case SOAP_TYPE_z1__dodajProjektResponse:
		return (void*)soap_instantiate_z1__dodajProjektResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_z1__dodajProjekt:
		return (void*)soap_instantiate_z1__dodajProjekt(soap, -1, type, arrayType, n);
	case SOAP_TYPE_z1__zapiszTerminResponse:
		return (void*)soap_instantiate_z1__zapiszTerminResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_z1__zapiszTermin:
		return (void*)soap_instantiate_z1__zapiszTermin(soap, -1, type, arrayType, n);
	case SOAP_TYPE_z1__dodajTerminResponse:
		return (void*)soap_instantiate_z1__dodajTerminResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_z1__dodajTermin:
		return (void*)soap_instantiate_z1__dodajTermin(soap, -1, type, arrayType, n);
	case SOAP_TYPE_z1__eksportujProjektResponse:
		return (void*)soap_instantiate_z1__eksportujProjektResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_z1__eksportujProjekt:
		return (void*)soap_instantiate_z1__eksportujProjekt(soap, -1, type, arrayType, n);
	case SOAP_TYPE_z1__eksportujTerminResponse:
		return (void*)soap_instantiate_z1__eksportujTerminResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_z1__eksportujTermin:
		return (void*)soap_instantiate_z1__eksportujTermin(soap, -1, type, arrayType, n);
	case SOAP_TYPE_z1__eksportujPrzedmiotResponse:
		return (void*)soap_instantiate_z1__eksportujPrzedmiotResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_z1__eksportujPrzedmiot:
		return (void*)soap_instantiate_z1__eksportujPrzedmiot(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_xsd__integer:
		return (void*)soap_instantiate_xsd__integer(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__nonNegativeInteger:
		return (void*)soap_instantiate_xsd__nonNegativeInteger(soap, -1, type, arrayType, n);
	case SOAP_TYPE_z1__godzina:
		return (void*)soap_instantiate_z1__godzina(soap, -1, type, arrayType, n);
	case SOAP_TYPE_z1__id:
		return (void*)soap_instantiate_z1__id(soap, -1, type, arrayType, n);
	case SOAP_TYPE_z1__csv:
		return (void*)soap_instantiate_z1__csv(soap, -1, type, arrayType, n);
	case SOAP_TYPE_z1__filename:
		return (void*)soap_instantiate_z1__filename(soap, -1, type, arrayType, n);
	case SOAP_TYPE_z1__nrIndex:
		return (void*)soap_instantiate_z1__nrIndex(soap, -1, type, arrayType, n);
	case SOAP_TYPE_z1__wynik:
		return (void*)soap_instantiate_z1__wynik(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_z1__student:
		if (p->size < 0)
			SOAP_DELETE(static_cast<z1__student*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<z1__student*>(p->ptr));
		break;
	case SOAP_TYPE_z1__temat:
		if (p->size < 0)
			SOAP_DELETE(static_cast<z1__temat*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<z1__temat*>(p->ptr));
		break;
	case SOAP_TYPE_z1__termin:
		if (p->size < 0)
			SOAP_DELETE(static_cast<z1__termin*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<z1__termin*>(p->ptr));
		break;
	case SOAP_TYPE_z1__sala:
		if (p->size < 0)
			SOAP_DELETE(static_cast<z1__sala*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<z1__sala*>(p->ptr));
		break;
	case SOAP_TYPE_z1__przedmiot:
		if (p->size < 0)
			SOAP_DELETE(static_cast<z1__przedmiot*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<z1__przedmiot*>(p->ptr));
		break;
	case SOAP_TYPE_z1__typ:
		if (p->size < 0)
			SOAP_DELETE(static_cast<z1__typ*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<z1__typ*>(p->ptr));
		break;
	case SOAP_TYPE_z1__prowadzacy:
		if (p->size < 0)
			SOAP_DELETE(static_cast<z1__prowadzacy*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<z1__prowadzacy*>(p->ptr));
		break;
	case SOAP_TYPE_z1__zapiszProjektResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct z1__zapiszProjektResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct z1__zapiszProjektResponse*>(p->ptr));
		break;
	case SOAP_TYPE_z1__zapiszProjekt:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct z1__zapiszProjekt*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct z1__zapiszProjekt*>(p->ptr));
		break;
	case SOAP_TYPE_z1__dodajProjektResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct z1__dodajProjektResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct z1__dodajProjektResponse*>(p->ptr));
		break;
	case SOAP_TYPE_z1__dodajProjekt:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct z1__dodajProjekt*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct z1__dodajProjekt*>(p->ptr));
		break;
	case SOAP_TYPE_z1__zapiszTerminResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct z1__zapiszTerminResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct z1__zapiszTerminResponse*>(p->ptr));
		break;
	case SOAP_TYPE_z1__zapiszTermin:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct z1__zapiszTermin*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct z1__zapiszTermin*>(p->ptr));
		break;
	case SOAP_TYPE_z1__dodajTerminResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct z1__dodajTerminResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct z1__dodajTerminResponse*>(p->ptr));
		break;
	case SOAP_TYPE_z1__dodajTermin:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct z1__dodajTermin*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct z1__dodajTermin*>(p->ptr));
		break;
	case SOAP_TYPE_z1__eksportujProjektResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct z1__eksportujProjektResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct z1__eksportujProjektResponse*>(p->ptr));
		break;
	case SOAP_TYPE_z1__eksportujProjekt:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct z1__eksportujProjekt*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct z1__eksportujProjekt*>(p->ptr));
		break;
	case SOAP_TYPE_z1__eksportujTerminResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct z1__eksportujTerminResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct z1__eksportujTerminResponse*>(p->ptr));
		break;
	case SOAP_TYPE_z1__eksportujTermin:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct z1__eksportujTermin*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct z1__eksportujTermin*>(p->ptr));
		break;
	case SOAP_TYPE_z1__eksportujPrzedmiotResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct z1__eksportujPrzedmiotResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct z1__eksportujPrzedmiotResponse*>(p->ptr));
		break;
	case SOAP_TYPE_z1__eksportujPrzedmiot:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct z1__eksportujPrzedmiot*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct z1__eksportujPrzedmiot*>(p->ptr));
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		break;
#endif
	case SOAP_TYPE_xsd__integer:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__nonNegativeInteger:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_z1__godzina:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_z1__id:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_z1__csv:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_z1__filename:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_z1__nrIndex:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_z1__wynik:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	default:
		return SOAP_ERR;
	}
	return SOAP_OK;
}

#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int t, int b)
{
	do
	{	switch (t)
		{
		default: return 0;
		}
	}
	while (t != b);
	return 1;
}
#ifdef WIN32
#pragma warning(pop)
#endif

#ifndef WITH_NOIDREF
#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap *soap, int t, int tt, void *p, size_t index, const void *q, void **x)
{
	(void)soap; (void)t; (void)p; (void)index; (void)q; (void)x; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__string:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_z1__student:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy z1__student type=%d location=%p object=%p\n", t, p, q));
		*(z1__student*)p = *(z1__student*)q;
		break;
	case SOAP_TYPE_z1__temat:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy z1__temat type=%d location=%p object=%p\n", t, p, q));
		*(z1__temat*)p = *(z1__temat*)q;
		break;
	case SOAP_TYPE_z1__termin:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy z1__termin type=%d location=%p object=%p\n", t, p, q));
		*(z1__termin*)p = *(z1__termin*)q;
		break;
	case SOAP_TYPE_z1__sala:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy z1__sala type=%d location=%p object=%p\n", t, p, q));
		*(z1__sala*)p = *(z1__sala*)q;
		break;
	case SOAP_TYPE_z1__przedmiot:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy z1__przedmiot type=%d location=%p object=%p\n", t, p, q));
		*(z1__przedmiot*)p = *(z1__przedmiot*)q;
		break;
	case SOAP_TYPE_z1__typ:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy z1__typ type=%d location=%p object=%p\n", t, p, q));
		*(z1__typ*)p = *(z1__typ*)q;
		break;
	case SOAP_TYPE_z1__prowadzacy:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy z1__prowadzacy type=%d location=%p object=%p\n", t, p, q));
		*(z1__prowadzacy*)p = *(z1__prowadzacy*)q;
		break;
	case SOAP_TYPE_z1__zapiszProjektResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct z1__zapiszProjektResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct z1__zapiszProjektResponse*)p = *(struct z1__zapiszProjektResponse*)q;
		break;
	case SOAP_TYPE_z1__zapiszProjekt:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct z1__zapiszProjekt type=%d location=%p object=%p\n", t, p, q));
		*(struct z1__zapiszProjekt*)p = *(struct z1__zapiszProjekt*)q;
		break;
	case SOAP_TYPE_z1__dodajProjektResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct z1__dodajProjektResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct z1__dodajProjektResponse*)p = *(struct z1__dodajProjektResponse*)q;
		break;
	case SOAP_TYPE_z1__dodajProjekt:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct z1__dodajProjekt type=%d location=%p object=%p\n", t, p, q));
		*(struct z1__dodajProjekt*)p = *(struct z1__dodajProjekt*)q;
		break;
	case SOAP_TYPE_z1__zapiszTerminResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct z1__zapiszTerminResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct z1__zapiszTerminResponse*)p = *(struct z1__zapiszTerminResponse*)q;
		break;
	case SOAP_TYPE_z1__zapiszTermin:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct z1__zapiszTermin type=%d location=%p object=%p\n", t, p, q));
		*(struct z1__zapiszTermin*)p = *(struct z1__zapiszTermin*)q;
		break;
	case SOAP_TYPE_z1__dodajTerminResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct z1__dodajTerminResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct z1__dodajTerminResponse*)p = *(struct z1__dodajTerminResponse*)q;
		break;
	case SOAP_TYPE_z1__dodajTermin:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct z1__dodajTermin type=%d location=%p object=%p\n", t, p, q));
		*(struct z1__dodajTermin*)p = *(struct z1__dodajTermin*)q;
		break;
	case SOAP_TYPE_z1__eksportujProjektResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct z1__eksportujProjektResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct z1__eksportujProjektResponse*)p = *(struct z1__eksportujProjektResponse*)q;
		break;
	case SOAP_TYPE_z1__eksportujProjekt:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct z1__eksportujProjekt type=%d location=%p object=%p\n", t, p, q));
		*(struct z1__eksportujProjekt*)p = *(struct z1__eksportujProjekt*)q;
		break;
	case SOAP_TYPE_z1__eksportujTerminResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct z1__eksportujTerminResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct z1__eksportujTerminResponse*)p = *(struct z1__eksportujTerminResponse*)q;
		break;
	case SOAP_TYPE_z1__eksportujTermin:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct z1__eksportujTermin type=%d location=%p object=%p\n", t, p, q));
		*(struct z1__eksportujTermin*)p = *(struct z1__eksportujTermin*)q;
		break;
	case SOAP_TYPE_z1__eksportujPrzedmiotResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct z1__eksportujPrzedmiotResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct z1__eksportujPrzedmiotResponse*)p = *(struct z1__eksportujPrzedmiotResponse*)q;
		break;
	case SOAP_TYPE_z1__eksportujPrzedmiot:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct z1__eksportujPrzedmiot type=%d location=%p object=%p\n", t, p, q));
		*(struct z1__eksportujPrzedmiot*)p = *(struct z1__eksportujPrzedmiot*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Header type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Code type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Detail type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Reason type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Fault type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
		break;
#endif
	case SOAP_TYPE_xsd__integer:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_xsd__nonNegativeInteger:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_z1__godzina:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_z1__id:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_z1__csv:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_z1__filename:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_z1__nrIndex:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_z1__wynik:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type = %d in %d\n", t, tt));
	}
}
#ifdef WIN32
#pragma warning(pop)
#endif
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	a = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	if (soap_out_byte(soap, tag?tag:"byte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_int(soap, tag?tag:"int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__wynik(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__wynik(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__wynik(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_z1__wynik), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_z1__wynik(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_z1__wynik, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, "ok|blad")))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_z1__wynik, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_z1__wynik, SOAP_TYPE_z1__wynik, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__wynik(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_z1__wynik(soap, tag?tag:"z1:wynik", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_z1__wynik(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_z1__wynik(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__nrIndex(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__nrIndex(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__nrIndex(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_z1__nrIndex), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_z1__nrIndex(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_z1__nrIndex, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, "[0-9]{6}")))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_z1__nrIndex, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_z1__nrIndex, SOAP_TYPE_z1__nrIndex, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__nrIndex(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_z1__nrIndex(soap, tag?tag:"z1:nrIndex", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_z1__nrIndex(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_z1__nrIndex(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__godzina(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__godzina(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__godzina(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_z1__godzina), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_z1__godzina(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_z1__godzina, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, "[0-2][0-9]:[0-5][0-9]")))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_z1__godzina, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_z1__godzina, SOAP_TYPE_z1__godzina, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__godzina(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_z1__godzina(soap, tag?tag:"z1:godzina", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_z1__godzina(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_z1__godzina(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void z1__prowadzacy::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->z1__prowadzacy::email);
	soap_default_std__string(soap, &this->z1__prowadzacy::haslo);
	/* transient soap skipped */
}

void z1__prowadzacy::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->z1__prowadzacy::email);
	soap_serialize_std__string(soap, &this->z1__prowadzacy::haslo);
#endif
}

int z1__prowadzacy::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_z1__prowadzacy(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__prowadzacy(struct soap *soap, const char *tag, int id, const z1__prowadzacy *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_z1__prowadzacy), type))
		return soap->error;
	if (soap_out_std__string(soap, "email", -1, &a->z1__prowadzacy::email, ""))
		return soap->error;
	if (soap_out_std__string(soap, "haslo", -1, &a->z1__prowadzacy::haslo, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *z1__prowadzacy::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_z1__prowadzacy(soap, tag, this, type);
}

SOAP_FMAC3 z1__prowadzacy * SOAP_FMAC4 soap_in_z1__prowadzacy(struct soap *soap, const char *tag, z1__prowadzacy *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (z1__prowadzacy *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_z1__prowadzacy, sizeof(z1__prowadzacy), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_email1 = 1;
	size_t soap_flag_haslo1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_email1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "email", &a->z1__prowadzacy::email, "xsd:string"))
				{	soap_flag_email1--;
					continue;
				}
			if (soap_flag_haslo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "haslo", &a->z1__prowadzacy::haslo, "xsd:string"))
				{	soap_flag_haslo1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_email1 > 0 || soap_flag_haslo1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (z1__prowadzacy *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_z1__prowadzacy, SOAP_TYPE_z1__prowadzacy, sizeof(z1__prowadzacy), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 z1__prowadzacy * SOAP_FMAC2 soap_instantiate_z1__prowadzacy(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_z1__prowadzacy(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	z1__prowadzacy *p;
	size_t k = sizeof(z1__prowadzacy);
	if (n < 0)
	{	p = SOAP_NEW(z1__prowadzacy);
		if (p)
			((z1__prowadzacy*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(z1__prowadzacy, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((z1__prowadzacy*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated z1__prowadzacy location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_z1__prowadzacy, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int z1__prowadzacy::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (this->soap_out(soap, tag?tag:"z1:prowadzacy", -2, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *z1__prowadzacy::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_z1__prowadzacy(soap, this, tag, type);
}

SOAP_FMAC3 z1__prowadzacy * SOAP_FMAC4 soap_get_z1__prowadzacy(struct soap *soap, z1__prowadzacy *p, const char *tag, const char *type)
{
	if ((p = soap_in_z1__prowadzacy(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void z1__typ::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__integer(soap, &this->z1__typ::id);
	soap_default_std__string(soap, &this->z1__typ::opis);
	/* transient soap skipped */
}

void z1__typ::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_xsd__integer(soap, &this->z1__typ::id);
	soap_serialize_std__string(soap, &this->z1__typ::opis);
#endif
}

int z1__typ::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_z1__typ(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__typ(struct soap *soap, const char *tag, int id, const z1__typ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_z1__typ), type))
		return soap->error;
	if (soap_out_xsd__integer(soap, "id", -1, &a->z1__typ::id, ""))
		return soap->error;
	if (soap_out_std__string(soap, "opis", -1, &a->z1__typ::opis, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *z1__typ::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_z1__typ(soap, tag, this, type);
}

SOAP_FMAC3 z1__typ * SOAP_FMAC4 soap_in_z1__typ(struct soap *soap, const char *tag, z1__typ *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (z1__typ *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_z1__typ, sizeof(z1__typ), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_id1 = 1;
	size_t soap_flag_opis1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__integer(soap, "id", &a->z1__typ::id, "xsd:integer"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_opis1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "opis", &a->z1__typ::opis, "xsd:string"))
				{	soap_flag_opis1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0 || soap_flag_opis1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (z1__typ *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_z1__typ, SOAP_TYPE_z1__typ, sizeof(z1__typ), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 z1__typ * SOAP_FMAC2 soap_instantiate_z1__typ(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_z1__typ(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	z1__typ *p;
	size_t k = sizeof(z1__typ);
	if (n < 0)
	{	p = SOAP_NEW(z1__typ);
		if (p)
			((z1__typ*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(z1__typ, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((z1__typ*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated z1__typ location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_z1__typ, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int z1__typ::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (this->soap_out(soap, tag?tag:"z1:typ", -2, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *z1__typ::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_z1__typ(soap, this, tag, type);
}

SOAP_FMAC3 z1__typ * SOAP_FMAC4 soap_get_z1__typ(struct soap *soap, z1__typ *p, const char *tag, const char *type)
{
	if ((p = soap_in_z1__typ(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void z1__przedmiot::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->z1__przedmiot::nazwa);
	soap_default_xsd__integer(soap, &this->z1__przedmiot::typ);
	/* transient soap skipped */
}

void z1__przedmiot::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->z1__przedmiot::nazwa);
	soap_serialize_xsd__integer(soap, &this->z1__przedmiot::typ);
#endif
}

int z1__przedmiot::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_z1__przedmiot(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__przedmiot(struct soap *soap, const char *tag, int id, const z1__przedmiot *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_z1__przedmiot), type))
		return soap->error;
	if (soap_out_std__string(soap, "nazwa", -1, &a->z1__przedmiot::nazwa, ""))
		return soap->error;
	if (soap_out_xsd__integer(soap, "typ", -1, &a->z1__przedmiot::typ, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *z1__przedmiot::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_z1__przedmiot(soap, tag, this, type);
}

SOAP_FMAC3 z1__przedmiot * SOAP_FMAC4 soap_in_z1__przedmiot(struct soap *soap, const char *tag, z1__przedmiot *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (z1__przedmiot *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_z1__przedmiot, sizeof(z1__przedmiot), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_nazwa1 = 1;
	size_t soap_flag_typ1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nazwa1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "nazwa", &a->z1__przedmiot::nazwa, "xsd:string"))
				{	soap_flag_nazwa1--;
					continue;
				}
			if (soap_flag_typ1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__integer(soap, "typ", &a->z1__przedmiot::typ, "xsd:integer"))
				{	soap_flag_typ1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nazwa1 > 0 || soap_flag_typ1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (z1__przedmiot *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_z1__przedmiot, SOAP_TYPE_z1__przedmiot, sizeof(z1__przedmiot), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 z1__przedmiot * SOAP_FMAC2 soap_instantiate_z1__przedmiot(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_z1__przedmiot(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	z1__przedmiot *p;
	size_t k = sizeof(z1__przedmiot);
	if (n < 0)
	{	p = SOAP_NEW(z1__przedmiot);
		if (p)
			((z1__przedmiot*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(z1__przedmiot, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((z1__przedmiot*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated z1__przedmiot location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_z1__przedmiot, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int z1__przedmiot::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (this->soap_out(soap, tag?tag:"z1:przedmiot", -2, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *z1__przedmiot::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_z1__przedmiot(soap, this, tag, type);
}

SOAP_FMAC3 z1__przedmiot * SOAP_FMAC4 soap_get_z1__przedmiot(struct soap *soap, z1__przedmiot *p, const char *tag, const char *type)
{
	if ((p = soap_in_z1__przedmiot(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void z1__sala::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->z1__sala::numer);
	soap_default_xsd__nonNegativeInteger(soap, &this->z1__sala::maxMiejsc);
	/* transient soap skipped */
}

void z1__sala::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->z1__sala::numer);
	soap_serialize_xsd__nonNegativeInteger(soap, &this->z1__sala::maxMiejsc);
#endif
}

int z1__sala::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_z1__sala(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__sala(struct soap *soap, const char *tag, int id, const z1__sala *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_z1__sala), type))
		return soap->error;
	if (soap_out_std__string(soap, "numer", -1, &a->z1__sala::numer, ""))
		return soap->error;
	if (soap_out_xsd__nonNegativeInteger(soap, "maxMiejsc", -1, &a->z1__sala::maxMiejsc, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *z1__sala::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_z1__sala(soap, tag, this, type);
}

SOAP_FMAC3 z1__sala * SOAP_FMAC4 soap_in_z1__sala(struct soap *soap, const char *tag, z1__sala *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (z1__sala *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_z1__sala, sizeof(z1__sala), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_numer1 = 1;
	size_t soap_flag_maxMiejsc1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_numer1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "numer", &a->z1__sala::numer, "xsd:string"))
				{	soap_flag_numer1--;
					continue;
				}
			if (soap_flag_maxMiejsc1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__nonNegativeInteger(soap, "maxMiejsc", &a->z1__sala::maxMiejsc, "xsd:nonNegativeInteger"))
				{	soap_flag_maxMiejsc1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_numer1 > 0 || soap_flag_maxMiejsc1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (z1__sala *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_z1__sala, SOAP_TYPE_z1__sala, sizeof(z1__sala), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 z1__sala * SOAP_FMAC2 soap_instantiate_z1__sala(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_z1__sala(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	z1__sala *p;
	size_t k = sizeof(z1__sala);
	if (n < 0)
	{	p = SOAP_NEW(z1__sala);
		if (p)
			((z1__sala*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(z1__sala, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((z1__sala*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated z1__sala location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_z1__sala, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int z1__sala::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (this->soap_out(soap, tag?tag:"z1:sala", -2, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *z1__sala::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_z1__sala(soap, this, tag, type);
}

SOAP_FMAC3 z1__sala * SOAP_FMAC4 soap_get_z1__sala(struct soap *soap, z1__sala *p, const char *tag, const char *type)
{
	if ((p = soap_in_z1__sala(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void z1__termin::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->z1__termin::dzien);
	soap_default_z1__godzina(soap, &this->z1__termin::godzinaOd);
	soap_default_z1__godzina(soap, &this->z1__termin::godzinaDo);
	soap_default_int(soap, &this->z1__termin::miejsca);
	/* transient soap skipped */
}

void z1__termin::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->z1__termin::dzien);
	soap_serialize_z1__godzina(soap, &this->z1__termin::godzinaOd);
	soap_serialize_z1__godzina(soap, &this->z1__termin::godzinaDo);
#endif
}

int z1__termin::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_z1__termin(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__termin(struct soap *soap, const char *tag, int id, const z1__termin *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_z1__termin), type))
		return soap->error;
	if (soap_out_std__string(soap, "dzien", -1, &a->z1__termin::dzien, ""))
		return soap->error;
	if (soap_out_z1__godzina(soap, "godzinaOd", -1, &a->z1__termin::godzinaOd, ""))
		return soap->error;
	if (soap_out_z1__godzina(soap, "godzinaDo", -1, &a->z1__termin::godzinaDo, ""))
		return soap->error;
	if (soap_out_int(soap, "miejsca", -1, &a->z1__termin::miejsca, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *z1__termin::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_z1__termin(soap, tag, this, type);
}

SOAP_FMAC3 z1__termin * SOAP_FMAC4 soap_in_z1__termin(struct soap *soap, const char *tag, z1__termin *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (z1__termin *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_z1__termin, sizeof(z1__termin), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_dzien1 = 1;
	size_t soap_flag_godzinaOd1 = 1;
	size_t soap_flag_godzinaDo1 = 1;
	size_t soap_flag_miejsca1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_dzien1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "dzien", &a->z1__termin::dzien, "xsd:string"))
				{	soap_flag_dzien1--;
					continue;
				}
			if (soap_flag_godzinaOd1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_z1__godzina(soap, "godzinaOd", &a->z1__termin::godzinaOd, "z1:godzina"))
				{	soap_flag_godzinaOd1--;
					continue;
				}
			if (soap_flag_godzinaDo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_z1__godzina(soap, "godzinaDo", &a->z1__termin::godzinaDo, "z1:godzina"))
				{	soap_flag_godzinaDo1--;
					continue;
				}
			if (soap_flag_miejsca1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "miejsca", &a->z1__termin::miejsca, "xsd:int"))
				{	soap_flag_miejsca1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_dzien1 > 0 || soap_flag_godzinaOd1 > 0 || soap_flag_godzinaDo1 > 0 || soap_flag_miejsca1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (z1__termin *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_z1__termin, SOAP_TYPE_z1__termin, sizeof(z1__termin), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 z1__termin * SOAP_FMAC2 soap_instantiate_z1__termin(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_z1__termin(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	z1__termin *p;
	size_t k = sizeof(z1__termin);
	if (n < 0)
	{	p = SOAP_NEW(z1__termin);
		if (p)
			((z1__termin*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(z1__termin, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((z1__termin*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated z1__termin location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_z1__termin, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int z1__termin::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (this->soap_out(soap, tag?tag:"z1:termin", -2, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *z1__termin::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_z1__termin(soap, this, tag, type);
}

SOAP_FMAC3 z1__termin * SOAP_FMAC4 soap_get_z1__termin(struct soap *soap, z1__termin *p, const char *tag, const char *type)
{
	if ((p = soap_in_z1__termin(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void z1__temat::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->z1__temat::temat);
	soap_default_std__string(soap, &this->z1__temat::opis);
	soap_default_xsd__nonNegativeInteger(soap, &this->z1__temat::miejsca);
	soap_default_xsd__nonNegativeInteger(soap, &this->z1__temat::wolneMiejsca);
	/* transient soap skipped */
}

void z1__temat::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->z1__temat::temat);
	soap_serialize_std__string(soap, &this->z1__temat::opis);
	soap_serialize_xsd__nonNegativeInteger(soap, &this->z1__temat::miejsca);
	soap_serialize_xsd__nonNegativeInteger(soap, &this->z1__temat::wolneMiejsca);
#endif
}

int z1__temat::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_z1__temat(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__temat(struct soap *soap, const char *tag, int id, const z1__temat *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_z1__temat), type))
		return soap->error;
	if (soap_out_std__string(soap, "temat", -1, &a->z1__temat::temat, ""))
		return soap->error;
	if (soap_out_std__string(soap, "opis", -1, &a->z1__temat::opis, ""))
		return soap->error;
	if (soap_out_xsd__nonNegativeInteger(soap, "miejsca", -1, &a->z1__temat::miejsca, ""))
		return soap->error;
	if (soap_out_xsd__nonNegativeInteger(soap, "wolneMiejsca", -1, &a->z1__temat::wolneMiejsca, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *z1__temat::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_z1__temat(soap, tag, this, type);
}

SOAP_FMAC3 z1__temat * SOAP_FMAC4 soap_in_z1__temat(struct soap *soap, const char *tag, z1__temat *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (z1__temat *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_z1__temat, sizeof(z1__temat), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_temat1 = 1;
	size_t soap_flag_opis1 = 1;
	size_t soap_flag_miejsca1 = 1;
	size_t soap_flag_wolneMiejsca1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_temat1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "temat", &a->z1__temat::temat, "xsd:string"))
				{	soap_flag_temat1--;
					continue;
				}
			if (soap_flag_opis1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "opis", &a->z1__temat::opis, "xsd:string"))
				{	soap_flag_opis1--;
					continue;
				}
			if (soap_flag_miejsca1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__nonNegativeInteger(soap, "miejsca", &a->z1__temat::miejsca, "xsd:nonNegativeInteger"))
				{	soap_flag_miejsca1--;
					continue;
				}
			if (soap_flag_wolneMiejsca1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__nonNegativeInteger(soap, "wolneMiejsca", &a->z1__temat::wolneMiejsca, "xsd:nonNegativeInteger"))
				{	soap_flag_wolneMiejsca1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_temat1 > 0 || soap_flag_opis1 > 0 || soap_flag_miejsca1 > 0 || soap_flag_wolneMiejsca1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (z1__temat *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_z1__temat, SOAP_TYPE_z1__temat, sizeof(z1__temat), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 z1__temat * SOAP_FMAC2 soap_instantiate_z1__temat(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_z1__temat(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	z1__temat *p;
	size_t k = sizeof(z1__temat);
	if (n < 0)
	{	p = SOAP_NEW(z1__temat);
		if (p)
			((z1__temat*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(z1__temat, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((z1__temat*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated z1__temat location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_z1__temat, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int z1__temat::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (this->soap_out(soap, tag?tag:"z1:temat", -2, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *z1__temat::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_z1__temat(soap, this, tag, type);
}

SOAP_FMAC3 z1__temat * SOAP_FMAC4 soap_get_z1__temat(struct soap *soap, z1__temat *p, const char *tag, const char *type)
{
	if ((p = soap_in_z1__temat(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void z1__student::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->z1__student::imie);
	soap_default_std__string(soap, &this->z1__student::nazwisko);
	soap_default_z1__nrIndex(soap, &this->z1__student::index);
	/* transient soap skipped */
}

void z1__student::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->z1__student::imie);
	soap_serialize_std__string(soap, &this->z1__student::nazwisko);
	soap_serialize_z1__nrIndex(soap, &this->z1__student::index);
#endif
}

int z1__student::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_z1__student(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__student(struct soap *soap, const char *tag, int id, const z1__student *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_z1__student), type))
		return soap->error;
	if (soap_out_std__string(soap, "imie", -1, &a->z1__student::imie, ""))
		return soap->error;
	if (soap_out_std__string(soap, "nazwisko", -1, &a->z1__student::nazwisko, ""))
		return soap->error;
	if (soap_out_z1__nrIndex(soap, "index", -1, &a->z1__student::index, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *z1__student::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_z1__student(soap, tag, this, type);
}

SOAP_FMAC3 z1__student * SOAP_FMAC4 soap_in_z1__student(struct soap *soap, const char *tag, z1__student *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (z1__student *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_z1__student, sizeof(z1__student), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_imie1 = 1;
	size_t soap_flag_nazwisko1 = 1;
	size_t soap_flag_index1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_imie1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "imie", &a->z1__student::imie, "xsd:string"))
				{	soap_flag_imie1--;
					continue;
				}
			if (soap_flag_nazwisko1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "nazwisko", &a->z1__student::nazwisko, "xsd:string"))
				{	soap_flag_nazwisko1--;
					continue;
				}
			if (soap_flag_index1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_z1__nrIndex(soap, "index", &a->z1__student::index, "z1:nrIndex"))
				{	soap_flag_index1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_imie1 > 0 || soap_flag_nazwisko1 > 0 || soap_flag_index1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (z1__student *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_z1__student, SOAP_TYPE_z1__student, sizeof(z1__student), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 z1__student * SOAP_FMAC2 soap_instantiate_z1__student(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_z1__student(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	z1__student *p;
	size_t k = sizeof(z1__student);
	if (n < 0)
	{	p = SOAP_NEW(z1__student);
		if (p)
			((z1__student*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(z1__student, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((z1__student*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated z1__student location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_z1__student, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int z1__student::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (this->soap_out(soap, tag?tag:"z1:student", -2, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *z1__student::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_z1__student(soap, this, tag, type);
}

SOAP_FMAC3 z1__student * SOAP_FMAC4 soap_get_z1__student(struct soap *soap, z1__student *p, const char *tag, const char *type)
{
	if ((p = soap_in_z1__student(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__nonNegativeInteger(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__nonNegativeInteger(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__nonNegativeInteger(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__nonNegativeInteger), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__nonNegativeInteger(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__nonNegativeInteger, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__nonNegativeInteger, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_xsd__nonNegativeInteger, SOAP_TYPE_xsd__nonNegativeInteger, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__nonNegativeInteger(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_xsd__nonNegativeInteger(soap, tag?tag:"xsd:nonNegativeInteger", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__nonNegativeInteger(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__nonNegativeInteger(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__integer(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__integer(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__integer(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__integer), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__integer(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__integer, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__integer, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_xsd__integer, SOAP_TYPE_xsd__integer, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__integer(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_xsd__integer(soap, tag?tag:"xsd:integer", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__integer(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__integer(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_std__string, SOAP_TYPE_std__string, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::string *p;
	size_t k = sizeof(std::string);
	if (n < 0)
	{	p = SOAP_NEW(std::string);
	}
	else
	{	p = SOAP_NEW_ARRAY(std::string, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::string location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_std__string, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_std__string(soap, tag?tag:"string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->faultcode);
	soap_serialize_string(soap, (char*const*)&a->faultstring);
	soap_serialize_string(soap, (char*const*)&a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Node);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, (char*const*)&a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, (char*const*)&a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, (char*const*)&a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, (char*const*)&a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", (char**)&a->faultcode, "xsd:QName"))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", (char**)&a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", (char**)&a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", (char**)&a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", (char**)&a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Fault *p;
	size_t k = sizeof(struct SOAP_ENV__Fault);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Fault);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Fault location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, (char*const*)&a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", (char**)&a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Reason *p;
	size_t k = sizeof(struct SOAP_ENV__Reason);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Reason);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Reason location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", (char*const*)&a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", (char**)&a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Detail *p;
	size_t k = sizeof(struct SOAP_ENV__Detail);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Detail);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Detail location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", (char**)&a->SOAP_ENV__Value, "xsd:QName"))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Code *p;
	size_t k = sizeof(struct SOAP_ENV__Code);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Code);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Code location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Header *p;
	size_t k = sizeof(struct SOAP_ENV__Header);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Header);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Header location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__eksportujPrzedmiot(struct soap *soap, struct z1__eksportujPrzedmiot *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_z1__id(soap, &a->ID);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__eksportujPrzedmiot(struct soap *soap, const struct z1__eksportujPrzedmiot *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_z1__id(soap, &a->ID);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__eksportujPrzedmiot(struct soap *soap, const char *tag, int id, const struct z1__eksportujPrzedmiot *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_z1__eksportujPrzedmiot), type))
		return soap->error;
	if (soap_out_z1__id(soap, "ID", -1, &a->ID, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct z1__eksportujPrzedmiot * SOAP_FMAC4 soap_in_z1__eksportujPrzedmiot(struct soap *soap, const char *tag, struct z1__eksportujPrzedmiot *a, const char *type)
{
	size_t soap_flag_ID = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct z1__eksportujPrzedmiot *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_z1__eksportujPrzedmiot, sizeof(struct z1__eksportujPrzedmiot), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_z1__eksportujPrzedmiot(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_z1__id(soap, "ID", &a->ID, "z1:id"))
				{	soap_flag_ID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ID > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct z1__eksportujPrzedmiot *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_z1__eksportujPrzedmiot, SOAP_TYPE_z1__eksportujPrzedmiot, sizeof(struct z1__eksportujPrzedmiot), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct z1__eksportujPrzedmiot * SOAP_FMAC2 soap_instantiate_z1__eksportujPrzedmiot(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_z1__eksportujPrzedmiot(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct z1__eksportujPrzedmiot *p;
	size_t k = sizeof(struct z1__eksportujPrzedmiot);
	if (n < 0)
	{	p = SOAP_NEW(struct z1__eksportujPrzedmiot);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct z1__eksportujPrzedmiot, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct z1__eksportujPrzedmiot location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_z1__eksportujPrzedmiot, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__eksportujPrzedmiot(struct soap *soap, const struct z1__eksportujPrzedmiot *a, const char *tag, const char *type)
{
	if (soap_out_z1__eksportujPrzedmiot(soap, tag?tag:"z1:eksportujPrzedmiot", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct z1__eksportujPrzedmiot * SOAP_FMAC4 soap_get_z1__eksportujPrzedmiot(struct soap *soap, struct z1__eksportujPrzedmiot *p, const char *tag, const char *type)
{
	if ((p = soap_in_z1__eksportujPrzedmiot(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__eksportujPrzedmiotResponse(struct soap *soap, struct z1__eksportujPrzedmiotResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_z1__filename(soap, &a->nazwa);
	soap_default_z1__csv(soap, &a->plik);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__eksportujPrzedmiotResponse(struct soap *soap, const struct z1__eksportujPrzedmiotResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_z1__filename(soap, &a->nazwa);
	soap_serialize_z1__csv(soap, &a->plik);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__eksportujPrzedmiotResponse(struct soap *soap, const char *tag, int id, const struct z1__eksportujPrzedmiotResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_z1__eksportujPrzedmiotResponse), type))
		return soap->error;
	if (soap_out_z1__filename(soap, "nazwa", -1, &a->nazwa, ""))
		return soap->error;
	if (soap_out_z1__csv(soap, "plik", -1, &a->plik, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct z1__eksportujPrzedmiotResponse * SOAP_FMAC4 soap_in_z1__eksportujPrzedmiotResponse(struct soap *soap, const char *tag, struct z1__eksportujPrzedmiotResponse *a, const char *type)
{
	size_t soap_flag_nazwa = 1;
	size_t soap_flag_plik = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct z1__eksportujPrzedmiotResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_z1__eksportujPrzedmiotResponse, sizeof(struct z1__eksportujPrzedmiotResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_z1__eksportujPrzedmiotResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nazwa && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_z1__filename(soap, "nazwa", &a->nazwa, "z1:filename"))
				{	soap_flag_nazwa--;
					continue;
				}
			if (soap_flag_plik && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_z1__csv(soap, "plik", &a->plik, "z1:csv"))
				{	soap_flag_plik--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nazwa > 0 || soap_flag_plik > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct z1__eksportujPrzedmiotResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_z1__eksportujPrzedmiotResponse, SOAP_TYPE_z1__eksportujPrzedmiotResponse, sizeof(struct z1__eksportujPrzedmiotResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct z1__eksportujPrzedmiotResponse * SOAP_FMAC2 soap_instantiate_z1__eksportujPrzedmiotResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_z1__eksportujPrzedmiotResponse(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct z1__eksportujPrzedmiotResponse *p;
	size_t k = sizeof(struct z1__eksportujPrzedmiotResponse);
	if (n < 0)
	{	p = SOAP_NEW(struct z1__eksportujPrzedmiotResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct z1__eksportujPrzedmiotResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct z1__eksportujPrzedmiotResponse location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_z1__eksportujPrzedmiotResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__eksportujPrzedmiotResponse(struct soap *soap, const struct z1__eksportujPrzedmiotResponse *a, const char *tag, const char *type)
{
	if (soap_out_z1__eksportujPrzedmiotResponse(soap, tag?tag:"z1:eksportujPrzedmiotResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct z1__eksportujPrzedmiotResponse * SOAP_FMAC4 soap_get_z1__eksportujPrzedmiotResponse(struct soap *soap, struct z1__eksportujPrzedmiotResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_z1__eksportujPrzedmiotResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__eksportujTermin(struct soap *soap, struct z1__eksportujTermin *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_z1__id(soap, &a->ID);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__eksportujTermin(struct soap *soap, const struct z1__eksportujTermin *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_z1__id(soap, &a->ID);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__eksportujTermin(struct soap *soap, const char *tag, int id, const struct z1__eksportujTermin *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_z1__eksportujTermin), type))
		return soap->error;
	if (soap_out_z1__id(soap, "ID", -1, &a->ID, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct z1__eksportujTermin * SOAP_FMAC4 soap_in_z1__eksportujTermin(struct soap *soap, const char *tag, struct z1__eksportujTermin *a, const char *type)
{
	size_t soap_flag_ID = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct z1__eksportujTermin *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_z1__eksportujTermin, sizeof(struct z1__eksportujTermin), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_z1__eksportujTermin(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_z1__id(soap, "ID", &a->ID, "z1:id"))
				{	soap_flag_ID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ID > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct z1__eksportujTermin *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_z1__eksportujTermin, SOAP_TYPE_z1__eksportujTermin, sizeof(struct z1__eksportujTermin), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct z1__eksportujTermin * SOAP_FMAC2 soap_instantiate_z1__eksportujTermin(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_z1__eksportujTermin(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct z1__eksportujTermin *p;
	size_t k = sizeof(struct z1__eksportujTermin);
	if (n < 0)
	{	p = SOAP_NEW(struct z1__eksportujTermin);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct z1__eksportujTermin, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct z1__eksportujTermin location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_z1__eksportujTermin, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__eksportujTermin(struct soap *soap, const struct z1__eksportujTermin *a, const char *tag, const char *type)
{
	if (soap_out_z1__eksportujTermin(soap, tag?tag:"z1:eksportujTermin", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct z1__eksportujTermin * SOAP_FMAC4 soap_get_z1__eksportujTermin(struct soap *soap, struct z1__eksportujTermin *p, const char *tag, const char *type)
{
	if ((p = soap_in_z1__eksportujTermin(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__eksportujTerminResponse(struct soap *soap, struct z1__eksportujTerminResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_z1__filename(soap, &a->nazwa);
	soap_default_z1__csv(soap, &a->plik);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__eksportujTerminResponse(struct soap *soap, const struct z1__eksportujTerminResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_z1__filename(soap, &a->nazwa);
	soap_serialize_z1__csv(soap, &a->plik);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__eksportujTerminResponse(struct soap *soap, const char *tag, int id, const struct z1__eksportujTerminResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_z1__eksportujTerminResponse), type))
		return soap->error;
	if (soap_out_z1__filename(soap, "nazwa", -1, &a->nazwa, ""))
		return soap->error;
	if (soap_out_z1__csv(soap, "plik", -1, &a->plik, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct z1__eksportujTerminResponse * SOAP_FMAC4 soap_in_z1__eksportujTerminResponse(struct soap *soap, const char *tag, struct z1__eksportujTerminResponse *a, const char *type)
{
	size_t soap_flag_nazwa = 1;
	size_t soap_flag_plik = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct z1__eksportujTerminResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_z1__eksportujTerminResponse, sizeof(struct z1__eksportujTerminResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_z1__eksportujTerminResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nazwa && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_z1__filename(soap, "nazwa", &a->nazwa, "z1:filename"))
				{	soap_flag_nazwa--;
					continue;
				}
			if (soap_flag_plik && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_z1__csv(soap, "plik", &a->plik, "z1:csv"))
				{	soap_flag_plik--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nazwa > 0 || soap_flag_plik > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct z1__eksportujTerminResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_z1__eksportujTerminResponse, SOAP_TYPE_z1__eksportujTerminResponse, sizeof(struct z1__eksportujTerminResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct z1__eksportujTerminResponse * SOAP_FMAC2 soap_instantiate_z1__eksportujTerminResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_z1__eksportujTerminResponse(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct z1__eksportujTerminResponse *p;
	size_t k = sizeof(struct z1__eksportujTerminResponse);
	if (n < 0)
	{	p = SOAP_NEW(struct z1__eksportujTerminResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct z1__eksportujTerminResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct z1__eksportujTerminResponse location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_z1__eksportujTerminResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__eksportujTerminResponse(struct soap *soap, const struct z1__eksportujTerminResponse *a, const char *tag, const char *type)
{
	if (soap_out_z1__eksportujTerminResponse(soap, tag?tag:"z1:eksportujTerminResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct z1__eksportujTerminResponse * SOAP_FMAC4 soap_get_z1__eksportujTerminResponse(struct soap *soap, struct z1__eksportujTerminResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_z1__eksportujTerminResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__eksportujProjekt(struct soap *soap, struct z1__eksportujProjekt *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_z1__id(soap, &a->ID);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__eksportujProjekt(struct soap *soap, const struct z1__eksportujProjekt *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_z1__id(soap, &a->ID);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__eksportujProjekt(struct soap *soap, const char *tag, int id, const struct z1__eksportujProjekt *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_z1__eksportujProjekt), type))
		return soap->error;
	if (soap_out_z1__id(soap, "ID", -1, &a->ID, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct z1__eksportujProjekt * SOAP_FMAC4 soap_in_z1__eksportujProjekt(struct soap *soap, const char *tag, struct z1__eksportujProjekt *a, const char *type)
{
	size_t soap_flag_ID = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct z1__eksportujProjekt *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_z1__eksportujProjekt, sizeof(struct z1__eksportujProjekt), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_z1__eksportujProjekt(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_z1__id(soap, "ID", &a->ID, "z1:id"))
				{	soap_flag_ID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ID > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct z1__eksportujProjekt *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_z1__eksportujProjekt, SOAP_TYPE_z1__eksportujProjekt, sizeof(struct z1__eksportujProjekt), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct z1__eksportujProjekt * SOAP_FMAC2 soap_instantiate_z1__eksportujProjekt(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_z1__eksportujProjekt(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct z1__eksportujProjekt *p;
	size_t k = sizeof(struct z1__eksportujProjekt);
	if (n < 0)
	{	p = SOAP_NEW(struct z1__eksportujProjekt);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct z1__eksportujProjekt, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct z1__eksportujProjekt location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_z1__eksportujProjekt, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__eksportujProjekt(struct soap *soap, const struct z1__eksportujProjekt *a, const char *tag, const char *type)
{
	if (soap_out_z1__eksportujProjekt(soap, tag?tag:"z1:eksportujProjekt", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct z1__eksportujProjekt * SOAP_FMAC4 soap_get_z1__eksportujProjekt(struct soap *soap, struct z1__eksportujProjekt *p, const char *tag, const char *type)
{
	if ((p = soap_in_z1__eksportujProjekt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__eksportujProjektResponse(struct soap *soap, struct z1__eksportujProjektResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_z1__filename(soap, &a->nazwa);
	soap_default_z1__csv(soap, &a->plik);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__eksportujProjektResponse(struct soap *soap, const struct z1__eksportujProjektResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_z1__filename(soap, &a->nazwa);
	soap_serialize_z1__csv(soap, &a->plik);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__eksportujProjektResponse(struct soap *soap, const char *tag, int id, const struct z1__eksportujProjektResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_z1__eksportujProjektResponse), type))
		return soap->error;
	if (soap_out_z1__filename(soap, "nazwa", -1, &a->nazwa, ""))
		return soap->error;
	if (soap_out_z1__csv(soap, "plik", -1, &a->plik, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct z1__eksportujProjektResponse * SOAP_FMAC4 soap_in_z1__eksportujProjektResponse(struct soap *soap, const char *tag, struct z1__eksportujProjektResponse *a, const char *type)
{
	size_t soap_flag_nazwa = 1;
	size_t soap_flag_plik = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct z1__eksportujProjektResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_z1__eksportujProjektResponse, sizeof(struct z1__eksportujProjektResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_z1__eksportujProjektResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nazwa && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_z1__filename(soap, "nazwa", &a->nazwa, "z1:filename"))
				{	soap_flag_nazwa--;
					continue;
				}
			if (soap_flag_plik && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_z1__csv(soap, "plik", &a->plik, "z1:csv"))
				{	soap_flag_plik--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nazwa > 0 || soap_flag_plik > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct z1__eksportujProjektResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_z1__eksportujProjektResponse, SOAP_TYPE_z1__eksportujProjektResponse, sizeof(struct z1__eksportujProjektResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct z1__eksportujProjektResponse * SOAP_FMAC2 soap_instantiate_z1__eksportujProjektResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_z1__eksportujProjektResponse(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct z1__eksportujProjektResponse *p;
	size_t k = sizeof(struct z1__eksportujProjektResponse);
	if (n < 0)
	{	p = SOAP_NEW(struct z1__eksportujProjektResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct z1__eksportujProjektResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct z1__eksportujProjektResponse location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_z1__eksportujProjektResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__eksportujProjektResponse(struct soap *soap, const struct z1__eksportujProjektResponse *a, const char *tag, const char *type)
{
	if (soap_out_z1__eksportujProjektResponse(soap, tag?tag:"z1:eksportujProjektResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct z1__eksportujProjektResponse * SOAP_FMAC4 soap_get_z1__eksportujProjektResponse(struct soap *soap, struct z1__eksportujProjektResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_z1__eksportujProjektResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__dodajTermin(struct soap *soap, struct z1__dodajTermin *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_z1__id(soap, &a->przedmiotID);
	soap_default_z1__id(soap, &a->salaID);
	a->termin = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__dodajTermin(struct soap *soap, const struct z1__dodajTermin *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_z1__id(soap, &a->przedmiotID);
	soap_serialize_z1__id(soap, &a->salaID);
	soap_serialize_PointerToz1__termin(soap, &a->termin);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__dodajTermin(struct soap *soap, const char *tag, int id, const struct z1__dodajTermin *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_z1__dodajTermin), type))
		return soap->error;
	if (soap_out_z1__id(soap, "przedmiotID", -1, &a->przedmiotID, ""))
		return soap->error;
	if (soap_out_z1__id(soap, "salaID", -1, &a->salaID, ""))
		return soap->error;
	if (soap_out_PointerToz1__termin(soap, "termin", -1, &a->termin, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct z1__dodajTermin * SOAP_FMAC4 soap_in_z1__dodajTermin(struct soap *soap, const char *tag, struct z1__dodajTermin *a, const char *type)
{
	size_t soap_flag_przedmiotID = 1;
	size_t soap_flag_salaID = 1;
	size_t soap_flag_termin = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct z1__dodajTermin *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_z1__dodajTermin, sizeof(struct z1__dodajTermin), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_z1__dodajTermin(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_przedmiotID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_z1__id(soap, "przedmiotID", &a->przedmiotID, "z1:id"))
				{	soap_flag_przedmiotID--;
					continue;
				}
			if (soap_flag_salaID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_z1__id(soap, "salaID", &a->salaID, "z1:id"))
				{	soap_flag_salaID--;
					continue;
				}
			if (soap_flag_termin && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToz1__termin(soap, "termin", &a->termin, "z1:termin"))
				{	soap_flag_termin--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_przedmiotID > 0 || soap_flag_salaID > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct z1__dodajTermin *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_z1__dodajTermin, SOAP_TYPE_z1__dodajTermin, sizeof(struct z1__dodajTermin), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct z1__dodajTermin * SOAP_FMAC2 soap_instantiate_z1__dodajTermin(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_z1__dodajTermin(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct z1__dodajTermin *p;
	size_t k = sizeof(struct z1__dodajTermin);
	if (n < 0)
	{	p = SOAP_NEW(struct z1__dodajTermin);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct z1__dodajTermin, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct z1__dodajTermin location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_z1__dodajTermin, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__dodajTermin(struct soap *soap, const struct z1__dodajTermin *a, const char *tag, const char *type)
{
	if (soap_out_z1__dodajTermin(soap, tag?tag:"z1:dodajTermin", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct z1__dodajTermin * SOAP_FMAC4 soap_get_z1__dodajTermin(struct soap *soap, struct z1__dodajTermin *p, const char *tag, const char *type)
{
	if ((p = soap_in_z1__dodajTermin(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__dodajTerminResponse(struct soap *soap, struct z1__dodajTerminResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_z1__wynik(soap, &a->rezultat);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__dodajTerminResponse(struct soap *soap, const struct z1__dodajTerminResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_z1__wynik(soap, &a->rezultat);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__dodajTerminResponse(struct soap *soap, const char *tag, int id, const struct z1__dodajTerminResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_z1__dodajTerminResponse), type))
		return soap->error;
	if (soap_out_z1__wynik(soap, "rezultat", -1, &a->rezultat, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct z1__dodajTerminResponse * SOAP_FMAC4 soap_in_z1__dodajTerminResponse(struct soap *soap, const char *tag, struct z1__dodajTerminResponse *a, const char *type)
{
	size_t soap_flag_rezultat = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct z1__dodajTerminResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_z1__dodajTerminResponse, sizeof(struct z1__dodajTerminResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_z1__dodajTerminResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_rezultat && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_z1__wynik(soap, "rezultat", &a->rezultat, "z1:wynik"))
				{	soap_flag_rezultat--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_rezultat > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct z1__dodajTerminResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_z1__dodajTerminResponse, SOAP_TYPE_z1__dodajTerminResponse, sizeof(struct z1__dodajTerminResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct z1__dodajTerminResponse * SOAP_FMAC2 soap_instantiate_z1__dodajTerminResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_z1__dodajTerminResponse(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct z1__dodajTerminResponse *p;
	size_t k = sizeof(struct z1__dodajTerminResponse);
	if (n < 0)
	{	p = SOAP_NEW(struct z1__dodajTerminResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct z1__dodajTerminResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct z1__dodajTerminResponse location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_z1__dodajTerminResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__dodajTerminResponse(struct soap *soap, const struct z1__dodajTerminResponse *a, const char *tag, const char *type)
{
	if (soap_out_z1__dodajTerminResponse(soap, tag?tag:"z1:dodajTerminResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct z1__dodajTerminResponse * SOAP_FMAC4 soap_get_z1__dodajTerminResponse(struct soap *soap, struct z1__dodajTerminResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_z1__dodajTerminResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__zapiszTermin(struct soap *soap, struct z1__zapiszTermin *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_z1__id(soap, &a->projektID);
	soap_default_z1__id(soap, &a->zapisywanyID);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__zapiszTermin(struct soap *soap, const struct z1__zapiszTermin *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_z1__id(soap, &a->projektID);
	soap_serialize_z1__id(soap, &a->zapisywanyID);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__zapiszTermin(struct soap *soap, const char *tag, int id, const struct z1__zapiszTermin *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_z1__zapiszTermin), type))
		return soap->error;
	if (soap_out_z1__id(soap, "projektID", -1, &a->projektID, ""))
		return soap->error;
	if (soap_out_z1__id(soap, "zapisywanyID", -1, &a->zapisywanyID, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct z1__zapiszTermin * SOAP_FMAC4 soap_in_z1__zapiszTermin(struct soap *soap, const char *tag, struct z1__zapiszTermin *a, const char *type)
{
	size_t soap_flag_projektID = 1;
	size_t soap_flag_zapisywanyID = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct z1__zapiszTermin *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_z1__zapiszTermin, sizeof(struct z1__zapiszTermin), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_z1__zapiszTermin(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_projektID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_z1__id(soap, "projektID", &a->projektID, "z1:id"))
				{	soap_flag_projektID--;
					continue;
				}
			if (soap_flag_zapisywanyID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_z1__id(soap, "zapisywanyID", &a->zapisywanyID, "z1:id"))
				{	soap_flag_zapisywanyID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_projektID > 0 || soap_flag_zapisywanyID > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct z1__zapiszTermin *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_z1__zapiszTermin, SOAP_TYPE_z1__zapiszTermin, sizeof(struct z1__zapiszTermin), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct z1__zapiszTermin * SOAP_FMAC2 soap_instantiate_z1__zapiszTermin(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_z1__zapiszTermin(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct z1__zapiszTermin *p;
	size_t k = sizeof(struct z1__zapiszTermin);
	if (n < 0)
	{	p = SOAP_NEW(struct z1__zapiszTermin);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct z1__zapiszTermin, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct z1__zapiszTermin location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_z1__zapiszTermin, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__zapiszTermin(struct soap *soap, const struct z1__zapiszTermin *a, const char *tag, const char *type)
{
	if (soap_out_z1__zapiszTermin(soap, tag?tag:"z1:zapiszTermin", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct z1__zapiszTermin * SOAP_FMAC4 soap_get_z1__zapiszTermin(struct soap *soap, struct z1__zapiszTermin *p, const char *tag, const char *type)
{
	if ((p = soap_in_z1__zapiszTermin(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__zapiszTerminResponse(struct soap *soap, struct z1__zapiszTerminResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_z1__wynik(soap, &a->rezultat);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__zapiszTerminResponse(struct soap *soap, const struct z1__zapiszTerminResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_z1__wynik(soap, &a->rezultat);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__zapiszTerminResponse(struct soap *soap, const char *tag, int id, const struct z1__zapiszTerminResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_z1__zapiszTerminResponse), type))
		return soap->error;
	if (soap_out_z1__wynik(soap, "rezultat", -1, &a->rezultat, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct z1__zapiszTerminResponse * SOAP_FMAC4 soap_in_z1__zapiszTerminResponse(struct soap *soap, const char *tag, struct z1__zapiszTerminResponse *a, const char *type)
{
	size_t soap_flag_rezultat = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct z1__zapiszTerminResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_z1__zapiszTerminResponse, sizeof(struct z1__zapiszTerminResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_z1__zapiszTerminResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_rezultat && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_z1__wynik(soap, "rezultat", &a->rezultat, "z1:wynik"))
				{	soap_flag_rezultat--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_rezultat > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct z1__zapiszTerminResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_z1__zapiszTerminResponse, SOAP_TYPE_z1__zapiszTerminResponse, sizeof(struct z1__zapiszTerminResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct z1__zapiszTerminResponse * SOAP_FMAC2 soap_instantiate_z1__zapiszTerminResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_z1__zapiszTerminResponse(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct z1__zapiszTerminResponse *p;
	size_t k = sizeof(struct z1__zapiszTerminResponse);
	if (n < 0)
	{	p = SOAP_NEW(struct z1__zapiszTerminResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct z1__zapiszTerminResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct z1__zapiszTerminResponse location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_z1__zapiszTerminResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__zapiszTerminResponse(struct soap *soap, const struct z1__zapiszTerminResponse *a, const char *tag, const char *type)
{
	if (soap_out_z1__zapiszTerminResponse(soap, tag?tag:"z1:zapiszTerminResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct z1__zapiszTerminResponse * SOAP_FMAC4 soap_get_z1__zapiszTerminResponse(struct soap *soap, struct z1__zapiszTerminResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_z1__zapiszTerminResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__dodajProjekt(struct soap *soap, struct z1__dodajProjekt *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_z1__id(soap, &a->przedmiotID);
	a->projekt = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__dodajProjekt(struct soap *soap, const struct z1__dodajProjekt *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_z1__id(soap, &a->przedmiotID);
	soap_serialize_PointerToz1__temat(soap, &a->projekt);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__dodajProjekt(struct soap *soap, const char *tag, int id, const struct z1__dodajProjekt *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_z1__dodajProjekt), type))
		return soap->error;
	if (soap_out_z1__id(soap, "przedmiotID", -1, &a->przedmiotID, ""))
		return soap->error;
	if (soap_out_PointerToz1__temat(soap, "projekt", -1, &a->projekt, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct z1__dodajProjekt * SOAP_FMAC4 soap_in_z1__dodajProjekt(struct soap *soap, const char *tag, struct z1__dodajProjekt *a, const char *type)
{
	size_t soap_flag_przedmiotID = 1;
	size_t soap_flag_projekt = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct z1__dodajProjekt *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_z1__dodajProjekt, sizeof(struct z1__dodajProjekt), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_z1__dodajProjekt(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_przedmiotID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_z1__id(soap, "przedmiotID", &a->przedmiotID, "z1:id"))
				{	soap_flag_przedmiotID--;
					continue;
				}
			if (soap_flag_projekt && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToz1__temat(soap, "projekt", &a->projekt, "z1:temat"))
				{	soap_flag_projekt--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_przedmiotID > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct z1__dodajProjekt *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_z1__dodajProjekt, SOAP_TYPE_z1__dodajProjekt, sizeof(struct z1__dodajProjekt), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct z1__dodajProjekt * SOAP_FMAC2 soap_instantiate_z1__dodajProjekt(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_z1__dodajProjekt(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct z1__dodajProjekt *p;
	size_t k = sizeof(struct z1__dodajProjekt);
	if (n < 0)
	{	p = SOAP_NEW(struct z1__dodajProjekt);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct z1__dodajProjekt, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct z1__dodajProjekt location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_z1__dodajProjekt, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__dodajProjekt(struct soap *soap, const struct z1__dodajProjekt *a, const char *tag, const char *type)
{
	if (soap_out_z1__dodajProjekt(soap, tag?tag:"z1:dodajProjekt", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct z1__dodajProjekt * SOAP_FMAC4 soap_get_z1__dodajProjekt(struct soap *soap, struct z1__dodajProjekt *p, const char *tag, const char *type)
{
	if ((p = soap_in_z1__dodajProjekt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__dodajProjektResponse(struct soap *soap, struct z1__dodajProjektResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_z1__wynik(soap, &a->rezultat);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__dodajProjektResponse(struct soap *soap, const struct z1__dodajProjektResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_z1__wynik(soap, &a->rezultat);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__dodajProjektResponse(struct soap *soap, const char *tag, int id, const struct z1__dodajProjektResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_z1__dodajProjektResponse), type))
		return soap->error;
	if (soap_out_z1__wynik(soap, "rezultat", -1, &a->rezultat, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct z1__dodajProjektResponse * SOAP_FMAC4 soap_in_z1__dodajProjektResponse(struct soap *soap, const char *tag, struct z1__dodajProjektResponse *a, const char *type)
{
	size_t soap_flag_rezultat = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct z1__dodajProjektResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_z1__dodajProjektResponse, sizeof(struct z1__dodajProjektResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_z1__dodajProjektResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_rezultat && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_z1__wynik(soap, "rezultat", &a->rezultat, "z1:wynik"))
				{	soap_flag_rezultat--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_rezultat > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct z1__dodajProjektResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_z1__dodajProjektResponse, SOAP_TYPE_z1__dodajProjektResponse, sizeof(struct z1__dodajProjektResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct z1__dodajProjektResponse * SOAP_FMAC2 soap_instantiate_z1__dodajProjektResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_z1__dodajProjektResponse(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct z1__dodajProjektResponse *p;
	size_t k = sizeof(struct z1__dodajProjektResponse);
	if (n < 0)
	{	p = SOAP_NEW(struct z1__dodajProjektResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct z1__dodajProjektResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct z1__dodajProjektResponse location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_z1__dodajProjektResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__dodajProjektResponse(struct soap *soap, const struct z1__dodajProjektResponse *a, const char *tag, const char *type)
{
	if (soap_out_z1__dodajProjektResponse(soap, tag?tag:"z1:dodajProjektResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct z1__dodajProjektResponse * SOAP_FMAC4 soap_get_z1__dodajProjektResponse(struct soap *soap, struct z1__dodajProjektResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_z1__dodajProjektResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__zapiszProjekt(struct soap *soap, struct z1__zapiszProjekt *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_z1__id(soap, &a->projektID);
	soap_default_z1__id(soap, &a->zapisywanyID);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__zapiszProjekt(struct soap *soap, const struct z1__zapiszProjekt *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_z1__id(soap, &a->projektID);
	soap_serialize_z1__id(soap, &a->zapisywanyID);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__zapiszProjekt(struct soap *soap, const char *tag, int id, const struct z1__zapiszProjekt *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_z1__zapiszProjekt), type))
		return soap->error;
	if (soap_out_z1__id(soap, "projektID", -1, &a->projektID, ""))
		return soap->error;
	if (soap_out_z1__id(soap, "zapisywanyID", -1, &a->zapisywanyID, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct z1__zapiszProjekt * SOAP_FMAC4 soap_in_z1__zapiszProjekt(struct soap *soap, const char *tag, struct z1__zapiszProjekt *a, const char *type)
{
	size_t soap_flag_projektID = 1;
	size_t soap_flag_zapisywanyID = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct z1__zapiszProjekt *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_z1__zapiszProjekt, sizeof(struct z1__zapiszProjekt), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_z1__zapiszProjekt(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_projektID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_z1__id(soap, "projektID", &a->projektID, "z1:id"))
				{	soap_flag_projektID--;
					continue;
				}
			if (soap_flag_zapisywanyID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_z1__id(soap, "zapisywanyID", &a->zapisywanyID, "z1:id"))
				{	soap_flag_zapisywanyID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_projektID > 0 || soap_flag_zapisywanyID > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct z1__zapiszProjekt *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_z1__zapiszProjekt, SOAP_TYPE_z1__zapiszProjekt, sizeof(struct z1__zapiszProjekt), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct z1__zapiszProjekt * SOAP_FMAC2 soap_instantiate_z1__zapiszProjekt(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_z1__zapiszProjekt(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct z1__zapiszProjekt *p;
	size_t k = sizeof(struct z1__zapiszProjekt);
	if (n < 0)
	{	p = SOAP_NEW(struct z1__zapiszProjekt);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct z1__zapiszProjekt, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct z1__zapiszProjekt location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_z1__zapiszProjekt, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__zapiszProjekt(struct soap *soap, const struct z1__zapiszProjekt *a, const char *tag, const char *type)
{
	if (soap_out_z1__zapiszProjekt(soap, tag?tag:"z1:zapiszProjekt", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct z1__zapiszProjekt * SOAP_FMAC4 soap_get_z1__zapiszProjekt(struct soap *soap, struct z1__zapiszProjekt *p, const char *tag, const char *type)
{
	if ((p = soap_in_z1__zapiszProjekt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__zapiszProjektResponse(struct soap *soap, struct z1__zapiszProjektResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_z1__wynik(soap, &a->rezultat);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__zapiszProjektResponse(struct soap *soap, const struct z1__zapiszProjektResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_z1__wynik(soap, &a->rezultat);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__zapiszProjektResponse(struct soap *soap, const char *tag, int id, const struct z1__zapiszProjektResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_z1__zapiszProjektResponse), type))
		return soap->error;
	if (soap_out_z1__wynik(soap, "rezultat", -1, &a->rezultat, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct z1__zapiszProjektResponse * SOAP_FMAC4 soap_in_z1__zapiszProjektResponse(struct soap *soap, const char *tag, struct z1__zapiszProjektResponse *a, const char *type)
{
	size_t soap_flag_rezultat = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct z1__zapiszProjektResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_z1__zapiszProjektResponse, sizeof(struct z1__zapiszProjektResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_z1__zapiszProjektResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_rezultat && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_z1__wynik(soap, "rezultat", &a->rezultat, "z1:wynik"))
				{	soap_flag_rezultat--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_rezultat > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct z1__zapiszProjektResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_z1__zapiszProjektResponse, SOAP_TYPE_z1__zapiszProjektResponse, sizeof(struct z1__zapiszProjektResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct z1__zapiszProjektResponse * SOAP_FMAC2 soap_instantiate_z1__zapiszProjektResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_z1__zapiszProjektResponse(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct z1__zapiszProjektResponse *p;
	size_t k = sizeof(struct z1__zapiszProjektResponse);
	if (n < 0)
	{	p = SOAP_NEW(struct z1__zapiszProjektResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct z1__zapiszProjektResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct z1__zapiszProjektResponse location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_z1__zapiszProjektResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__zapiszProjektResponse(struct soap *soap, const struct z1__zapiszProjektResponse *a, const char *tag, const char *type)
{
	if (soap_out_z1__zapiszProjektResponse(soap, tag?tag:"z1:zapiszProjektResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct z1__zapiszProjektResponse * SOAP_FMAC4 soap_get_z1__zapiszProjektResponse(struct soap *soap, struct z1__zapiszProjektResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_z1__zapiszProjektResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code, &mark);
	if (id < 0)
		return soap->error;
	soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToz1__termin(struct soap *soap, z1__termin *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_z1__termin))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToz1__termin(struct soap *soap, const char *tag, int id, z1__termin *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_z1__termin, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 z1__termin ** SOAP_FMAC4 soap_in_PointerToz1__termin(struct soap *soap, const char *tag, z1__termin **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (z1__termin **)soap_malloc(soap, sizeof(z1__termin *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (z1__termin *)soap_instantiate_z1__termin(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (z1__termin **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_z1__termin, sizeof(z1__termin), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToz1__termin(struct soap *soap, z1__termin *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToz1__termin(soap, tag?tag:"z1:termin", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 z1__termin ** SOAP_FMAC4 soap_get_PointerToz1__termin(struct soap *soap, z1__termin **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToz1__termin(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToz1__temat(struct soap *soap, z1__temat *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_z1__temat))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToz1__temat(struct soap *soap, const char *tag, int id, z1__temat *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_z1__temat, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 z1__temat ** SOAP_FMAC4 soap_in_PointerToz1__temat(struct soap *soap, const char *tag, z1__temat **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (z1__temat **)soap_malloc(soap, sizeof(z1__temat *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (z1__temat *)soap_instantiate_z1__temat(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (z1__temat **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_z1__temat, sizeof(z1__temat), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToz1__temat(struct soap *soap, z1__temat *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToz1__temat(soap, tag?tag:"z1:temat", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 z1__temat ** SOAP_FMAC4 soap_get_PointerToz1__temat(struct soap *soap, z1__temat **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToz1__temat(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__QName(soap, tag?tag:"QName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out_string(soap, tag?tag:"string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
