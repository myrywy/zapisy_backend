/* soapStub.h
   Generated by gSOAP 2.8.30 for zapisy.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include <deque>
#include <list>
#include <vector>
#include <set>
#define SOAP_NAMESPACE_OF_z1	"localhost/zapisy.wsdl"

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 20830
# error "GSOAP VERSION 20830 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class z1__student;	/* zapisy.h:154 */
class z1__temat;	/* zapisy.h:157 */
class z1__termin;	/* zapisy.h:160 */
class z1__sala;	/* zapisy.h:163 */
class z1__przedmiot;	/* zapisy.h:166 */
class z1__typ;	/* zapisy.h:169 */
class z1__prowadzacy;	/* zapisy.h:172 */
class z1__importowanyPrzedmiot;	/* zapisy.h:175 */
struct z1__zapiszProjektResponse;	/* zapisy.h:536 */
struct z1__zapiszProjekt;	/* zapisy.h:597 */
struct z1__dodajProjektResponse;	/* zapisy.h:608 */
struct z1__dodajProjekt;	/* zapisy.h:669 */
struct z1__zapiszTerminResponse;	/* zapisy.h:680 */
struct z1__zapiszTermin;	/* zapisy.h:741 */
struct z1__dodajTerminResponse;	/* zapisy.h:752 */
struct z1__dodajTermin;	/* zapisy.h:816 */
struct z1__eksportujProjektResponse;	/* zapisy.h:827 */
struct z1__eksportujProjekt;	/* zapisy.h:886 */
struct z1__eksportujTerminResponse;	/* zapisy.h:897 */
struct z1__eksportujTermin;	/* zapisy.h:956 */
struct z1__eksportujPrzedmiotResponse;	/* zapisy.h:967 */
struct z1__eksportujPrzedmiot;	/* zapisy.h:1026 */
struct z1__dodajPrzedmiotResponse;	/* zapisy.h:1037 */
struct z1__dodajPrzedmiot;	/* zapisy.h:1095 */
struct z1__dodajProwadzacegoResponse;	/* zapisy.h:1106 */
struct z1__dodajProwadzacego;	/* zapisy.h:1164 */
struct z1__zmienDaneProwadzacegoResponse;	/* zapisy.h:1175 */
struct z1__zmienDaneProwadzacego;	/* zapisy.h:1236 */
struct z1__usunProwadzacegoResponse;	/* zapisy.h:1247 */
struct z1__usunProwadzacego;	/* zapisy.h:1305 */
struct z1__dodajStudentaResponse;	/* zapisy.h:1316 */
struct z1__dodajStudenta;	/* zapisy.h:1377 */
struct z1__usunStudentaZPrzedmiotuResponse;	/* zapisy.h:1388 */
struct z1__usunStudentaZPrzedmiotu;	/* zapisy.h:1449 */
struct z1__usunWszystkichZPrzedmiotuResponse;	/* zapisy.h:1460 */
struct z1__usunWszystkichZPrzedmiotu;	/* zapisy.h:1518 */
struct z1__usunPrzedmiotResponse;	/* zapisy.h:1529 */
struct z1__usunPrzedmiot;	/* zapisy.h:1587 */
struct z1__edytujProjektResponse;	/* zapisy.h:1598 */
struct z1__edytujProjekt;	/* zapisy.h:1662 */
struct z1__edytujTerminResponse;	/* zapisy.h:1673 */
struct z1__edytujTermin;	/* zapisy.h:1740 */

/* zapisy.h:154 */
#ifndef SOAP_TYPE_z1__student
#define SOAP_TYPE_z1__student (14)
/* complex XSD type 'z1:student': */
class SOAP_CMAC z1__student {
      public:
        /// Required element 'imie' of XSD type 'xsd:string'
        std::string imie;
        /// Required element 'nazwisko' of XSD type 'xsd:string'
        std::string nazwisko;
        /// Required element 'index' of XSD type 'z1:nrIndex'
        std::string index;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_z1__student
        virtual int soap_type(void) const { return SOAP_TYPE_z1__student; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type z1__student, default initialized and not managed by a soap context
        virtual z1__student *soap_alloc(void) const { return SOAP_NEW(z1__student); }
      public:
        /// Constructor with initializations
        z1__student()
        {
          soap = (struct soap *)0;
        }
        virtual ~z1__student() { }
        /// Friend allocator used by soap_new_z1__student(struct soap*, int)
        friend SOAP_FMAC1 z1__student * SOAP_FMAC2 soap_instantiate_z1__student(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zapisy.h:157 */
#ifndef SOAP_TYPE_z1__temat
#define SOAP_TYPE_z1__temat (15)
/* complex XSD type 'z1:temat': */
class SOAP_CMAC z1__temat {
      public:
        /// Required element 'temat' of XSD type 'xsd:string'
        std::string temat;
        /// Required element 'opis' of XSD type 'xsd:string'
        std::string opis;
        /// Required element 'miejsca' of XSD type 'xsd:nonNegativeInteger'
        std::string miejsca;
        /// Required element 'wolneMiejsca' of XSD type 'xsd:nonNegativeInteger'
        std::string wolneMiejsca;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_z1__temat
        virtual int soap_type(void) const { return SOAP_TYPE_z1__temat; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type z1__temat, default initialized and not managed by a soap context
        virtual z1__temat *soap_alloc(void) const { return SOAP_NEW(z1__temat); }
      public:
        /// Constructor with initializations
        z1__temat()
        {
          soap = (struct soap *)0;
        }
        virtual ~z1__temat() { }
        /// Friend allocator used by soap_new_z1__temat(struct soap*, int)
        friend SOAP_FMAC1 z1__temat * SOAP_FMAC2 soap_instantiate_z1__temat(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zapisy.h:160 */
#ifndef SOAP_TYPE_z1__termin
#define SOAP_TYPE_z1__termin (16)
/* complex XSD type 'z1:termin': */
class SOAP_CMAC z1__termin {
      public:
        /// Required element 'dzien' of XSD type 'xsd:string'
        std::string dzien;
        /// Required element 'godzinaOd' of XSD type 'z1:godzina'
        std::string godzinaOd;
        /// Required element 'godzinaDo' of XSD type 'z1:godzina'
        std::string godzinaDo;
        /// Required element 'miejsca' of XSD type 'xsd:int'
        int miejsca;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_z1__termin
        virtual int soap_type(void) const { return SOAP_TYPE_z1__termin; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type z1__termin, default initialized and not managed by a soap context
        virtual z1__termin *soap_alloc(void) const { return SOAP_NEW(z1__termin); }
      public:
        /// Constructor with initializations
        z1__termin()
        {
          miejsca = (int)0;
          soap = (struct soap *)0;
        }
        virtual ~z1__termin() { }
        /// Friend allocator used by soap_new_z1__termin(struct soap*, int)
        friend SOAP_FMAC1 z1__termin * SOAP_FMAC2 soap_instantiate_z1__termin(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zapisy.h:163 */
#ifndef SOAP_TYPE_z1__sala
#define SOAP_TYPE_z1__sala (17)
/* complex XSD type 'z1:sala': */
class SOAP_CMAC z1__sala {
      public:
        /// Required element 'numer' of XSD type 'xsd:string'
        std::string numer;
        /// Required element 'maxMiejsc' of XSD type 'xsd:nonNegativeInteger'
        std::string maxMiejsc;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_z1__sala
        virtual int soap_type(void) const { return SOAP_TYPE_z1__sala; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type z1__sala, default initialized and not managed by a soap context
        virtual z1__sala *soap_alloc(void) const { return SOAP_NEW(z1__sala); }
      public:
        /// Constructor with initializations
        z1__sala()
        {
          soap = (struct soap *)0;
        }
        virtual ~z1__sala() { }
        /// Friend allocator used by soap_new_z1__sala(struct soap*, int)
        friend SOAP_FMAC1 z1__sala * SOAP_FMAC2 soap_instantiate_z1__sala(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zapisy.h:166 */
#ifndef SOAP_TYPE_z1__przedmiot
#define SOAP_TYPE_z1__przedmiot (18)
/* complex XSD type 'z1:przedmiot': */
class SOAP_CMAC z1__przedmiot {
      public:
        /// Required element 'nazwa' of XSD type 'xsd:string'
        std::string nazwa;
        /// Required element 'typ' of XSD type 'xsd:integer'
        std::string typ;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_z1__przedmiot
        virtual int soap_type(void) const { return SOAP_TYPE_z1__przedmiot; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type z1__przedmiot, default initialized and not managed by a soap context
        virtual z1__przedmiot *soap_alloc(void) const { return SOAP_NEW(z1__przedmiot); }
      public:
        /// Constructor with initializations
        z1__przedmiot()
        {
          soap = (struct soap *)0;
        }
        virtual ~z1__przedmiot() { }
        /// Friend allocator used by soap_new_z1__przedmiot(struct soap*, int)
        friend SOAP_FMAC1 z1__przedmiot * SOAP_FMAC2 soap_instantiate_z1__przedmiot(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zapisy.h:169 */
#ifndef SOAP_TYPE_z1__typ
#define SOAP_TYPE_z1__typ (19)
/* complex XSD type 'z1:typ': */
class SOAP_CMAC z1__typ {
      public:
        /// Required element 'id' of XSD type 'xsd:integer'
        std::string id;
        /// Required element 'opis' of XSD type 'xsd:string'
        std::string opis;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_z1__typ
        virtual int soap_type(void) const { return SOAP_TYPE_z1__typ; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type z1__typ, default initialized and not managed by a soap context
        virtual z1__typ *soap_alloc(void) const { return SOAP_NEW(z1__typ); }
      public:
        /// Constructor with initializations
        z1__typ()
        {
          soap = (struct soap *)0;
        }
        virtual ~z1__typ() { }
        /// Friend allocator used by soap_new_z1__typ(struct soap*, int)
        friend SOAP_FMAC1 z1__typ * SOAP_FMAC2 soap_instantiate_z1__typ(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zapisy.h:172 */
#ifndef SOAP_TYPE_z1__prowadzacy
#define SOAP_TYPE_z1__prowadzacy (20)
/* complex XSD type 'z1:prowadzacy': */
class SOAP_CMAC z1__prowadzacy {
      public:
        /// Required element 'email' of XSD type 'xsd:string'
        std::string email;
        /// Required element 'imie' of XSD type 'xsd:string'
        std::string imie;
        /// Required element 'nazwisko' of XSD type 'xsd:string'
        std::string nazwisko;
        /// Required element 'haslo' of XSD type 'xsd:string'
        std::string haslo;
        /// Required element 'admin' of XSD type 'xsd:boolean'
        bool admin;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_z1__prowadzacy
        virtual int soap_type(void) const { return SOAP_TYPE_z1__prowadzacy; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type z1__prowadzacy, default initialized and not managed by a soap context
        virtual z1__prowadzacy *soap_alloc(void) const { return SOAP_NEW(z1__prowadzacy); }
      public:
        /// Constructor with initializations
        z1__prowadzacy()
        {
          admin = (bool)0;
          soap = (struct soap *)0;
        }
        virtual ~z1__prowadzacy() { }
        /// Friend allocator used by soap_new_z1__prowadzacy(struct soap*, int)
        friend SOAP_FMAC1 z1__prowadzacy * SOAP_FMAC2 soap_instantiate_z1__prowadzacy(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zapisy.h:175 */
#ifndef SOAP_TYPE_z1__importowanyPrzedmiot
#define SOAP_TYPE_z1__importowanyPrzedmiot (21)
/* complex XSD type 'z1:importowanyPrzedmiot': */
class SOAP_CMAC z1__importowanyPrzedmiot {
      public:
        /// Required element 'emailProwadzacego' of XSD type 'xsd:string'
        std::string emailProwadzacego;
        /// Optional element 'listaStudentow' of XSD type 'z1:csv'
        std::string *listaStudentow;
        /// Optional element 'terminyLaboratoriow' of XSD type 'z1:csv'
        std::string *terminyLaboratoriow;
        /// Optional element 'tematyProjektow' of XSD type 'z1:csv'
        std::string *tematyProjektow;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_z1__importowanyPrzedmiot
        virtual int soap_type(void) const { return SOAP_TYPE_z1__importowanyPrzedmiot; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type z1__importowanyPrzedmiot, default initialized and not managed by a soap context
        virtual z1__importowanyPrzedmiot *soap_alloc(void) const { return SOAP_NEW(z1__importowanyPrzedmiot); }
      public:
        /// Constructor with initializations
        z1__importowanyPrzedmiot()
        {
          listaStudentow = (std::string *)0;
          terminyLaboratoriow = (std::string *)0;
          tematyProjektow = (std::string *)0;
          soap = (struct soap *)0;
        }
        virtual ~z1__importowanyPrzedmiot() { }
        /// Friend allocator used by soap_new_z1__importowanyPrzedmiot(struct soap*, int)
        friend SOAP_FMAC1 z1__importowanyPrzedmiot * SOAP_FMAC2 soap_instantiate_z1__importowanyPrzedmiot(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zapisy.h:536 */
#ifndef SOAP_TYPE_z1__zapiszProjektResponse
#define SOAP_TYPE_z1__zapiszProjektResponse (31)
/* complex XSD type 'z1:zapiszProjektResponse': */
struct z1__zapiszProjektResponse {
      public:
        /** Required element 'rezultat' of XSD type 'z1:wynik' */
        std::string rezultat;
      public:
        /** Return unique type id SOAP_TYPE_z1__zapiszProjektResponse */
        int soap_type() const { return SOAP_TYPE_z1__zapiszProjektResponse; }
        /** Constructor with member initializations */
        z1__zapiszProjektResponse()
        {
        }
        /** Friend allocator used by soap_new_z1__zapiszProjektResponse(struct soap*, int) */
        friend SOAP_FMAC1 z1__zapiszProjektResponse * SOAP_FMAC2 soap_instantiate_z1__zapiszProjektResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zapisy.h:597 */
#ifndef SOAP_TYPE_z1__zapiszProjekt
#define SOAP_TYPE_z1__zapiszProjekt (34)
/* complex XSD type 'z1:zapiszProjekt': */
struct z1__zapiszProjekt {
      public:
        /** Required element 'projektID' of XSD type 'z1:id' */
        std::string projektID;
        /** Required element 'zapisywanyID' of XSD type 'z1:id' */
        std::string zapisywanyID;
      public:
        /** Return unique type id SOAP_TYPE_z1__zapiszProjekt */
        int soap_type() const { return SOAP_TYPE_z1__zapiszProjekt; }
        /** Constructor with member initializations */
        z1__zapiszProjekt()
        {
        }
        /** Friend allocator used by soap_new_z1__zapiszProjekt(struct soap*, int) */
        friend SOAP_FMAC1 z1__zapiszProjekt * SOAP_FMAC2 soap_instantiate_z1__zapiszProjekt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zapisy.h:608 */
#ifndef SOAP_TYPE_z1__dodajProjektResponse
#define SOAP_TYPE_z1__dodajProjektResponse (35)
/* complex XSD type 'z1:dodajProjektResponse': */
struct z1__dodajProjektResponse {
      public:
        /** Required element 'rezultat' of XSD type 'z1:wynik' */
        std::string rezultat;
      public:
        /** Return unique type id SOAP_TYPE_z1__dodajProjektResponse */
        int soap_type() const { return SOAP_TYPE_z1__dodajProjektResponse; }
        /** Constructor with member initializations */
        z1__dodajProjektResponse()
        {
        }
        /** Friend allocator used by soap_new_z1__dodajProjektResponse(struct soap*, int) */
        friend SOAP_FMAC1 z1__dodajProjektResponse * SOAP_FMAC2 soap_instantiate_z1__dodajProjektResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zapisy.h:669 */
#ifndef SOAP_TYPE_z1__dodajProjekt
#define SOAP_TYPE_z1__dodajProjekt (39)
/* complex XSD type 'z1:dodajProjekt': */
struct z1__dodajProjekt {
      public:
        /** Required element 'przedmiotID' of XSD type 'z1:id' */
        std::string przedmiotID;
        /** Optional element 'projekt' of XSD type 'z1:temat' */
        z1__temat *projekt;
      public:
        /** Return unique type id SOAP_TYPE_z1__dodajProjekt */
        int soap_type() const { return SOAP_TYPE_z1__dodajProjekt; }
        /** Constructor with member initializations */
        z1__dodajProjekt()
        {
          projekt = (z1__temat *)0;
        }
        /** Friend allocator used by soap_new_z1__dodajProjekt(struct soap*, int) */
        friend SOAP_FMAC1 z1__dodajProjekt * SOAP_FMAC2 soap_instantiate_z1__dodajProjekt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zapisy.h:680 */
#ifndef SOAP_TYPE_z1__zapiszTerminResponse
#define SOAP_TYPE_z1__zapiszTerminResponse (40)
/* complex XSD type 'z1:zapiszTerminResponse': */
struct z1__zapiszTerminResponse {
      public:
        /** Required element 'rezultat' of XSD type 'z1:wynik' */
        std::string rezultat;
      public:
        /** Return unique type id SOAP_TYPE_z1__zapiszTerminResponse */
        int soap_type() const { return SOAP_TYPE_z1__zapiszTerminResponse; }
        /** Constructor with member initializations */
        z1__zapiszTerminResponse()
        {
        }
        /** Friend allocator used by soap_new_z1__zapiszTerminResponse(struct soap*, int) */
        friend SOAP_FMAC1 z1__zapiszTerminResponse * SOAP_FMAC2 soap_instantiate_z1__zapiszTerminResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zapisy.h:741 */
#ifndef SOAP_TYPE_z1__zapiszTermin
#define SOAP_TYPE_z1__zapiszTermin (43)
/* complex XSD type 'z1:zapiszTermin': */
struct z1__zapiszTermin {
      public:
        /** Required element 'projektID' of XSD type 'z1:id' */
        std::string projektID;
        /** Required element 'zapisywanyID' of XSD type 'z1:id' */
        std::string zapisywanyID;
      public:
        /** Return unique type id SOAP_TYPE_z1__zapiszTermin */
        int soap_type() const { return SOAP_TYPE_z1__zapiszTermin; }
        /** Constructor with member initializations */
        z1__zapiszTermin()
        {
        }
        /** Friend allocator used by soap_new_z1__zapiszTermin(struct soap*, int) */
        friend SOAP_FMAC1 z1__zapiszTermin * SOAP_FMAC2 soap_instantiate_z1__zapiszTermin(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zapisy.h:752 */
#ifndef SOAP_TYPE_z1__dodajTerminResponse
#define SOAP_TYPE_z1__dodajTerminResponse (44)
/* complex XSD type 'z1:dodajTerminResponse': */
struct z1__dodajTerminResponse {
      public:
        /** Required element 'rezultat' of XSD type 'z1:wynik' */
        std::string rezultat;
      public:
        /** Return unique type id SOAP_TYPE_z1__dodajTerminResponse */
        int soap_type() const { return SOAP_TYPE_z1__dodajTerminResponse; }
        /** Constructor with member initializations */
        z1__dodajTerminResponse()
        {
        }
        /** Friend allocator used by soap_new_z1__dodajTerminResponse(struct soap*, int) */
        friend SOAP_FMAC1 z1__dodajTerminResponse * SOAP_FMAC2 soap_instantiate_z1__dodajTerminResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zapisy.h:816 */
#ifndef SOAP_TYPE_z1__dodajTermin
#define SOAP_TYPE_z1__dodajTermin (48)
/* complex XSD type 'z1:dodajTermin': */
struct z1__dodajTermin {
      public:
        /** Required element 'przedmiotID' of XSD type 'z1:id' */
        std::string przedmiotID;
        /** Required element 'salaID' of XSD type 'z1:id' */
        std::string salaID;
        /** Optional element 'termin' of XSD type 'z1:termin' */
        z1__termin *termin;
      public:
        /** Return unique type id SOAP_TYPE_z1__dodajTermin */
        int soap_type() const { return SOAP_TYPE_z1__dodajTermin; }
        /** Constructor with member initializations */
        z1__dodajTermin()
        {
          termin = (z1__termin *)0;
        }
        /** Friend allocator used by soap_new_z1__dodajTermin(struct soap*, int) */
        friend SOAP_FMAC1 z1__dodajTermin * SOAP_FMAC2 soap_instantiate_z1__dodajTermin(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zapisy.h:827 */
#ifndef SOAP_TYPE_z1__eksportujProjektResponse
#define SOAP_TYPE_z1__eksportujProjektResponse (49)
/* complex XSD type 'z1:eksportujProjektResponse': */
struct z1__eksportujProjektResponse {
      public:
        /** Required element 'nazwa' of XSD type 'z1:filename' */
        std::string nazwa;
        /** Required element 'plik' of XSD type 'z1:csv' */
        std::string plik;
      public:
        /** Return unique type id SOAP_TYPE_z1__eksportujProjektResponse */
        int soap_type() const { return SOAP_TYPE_z1__eksportujProjektResponse; }
        /** Constructor with member initializations */
        z1__eksportujProjektResponse()
        {
        }
        /** Friend allocator used by soap_new_z1__eksportujProjektResponse(struct soap*, int) */
        friend SOAP_FMAC1 z1__eksportujProjektResponse * SOAP_FMAC2 soap_instantiate_z1__eksportujProjektResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zapisy.h:886 */
#ifndef SOAP_TYPE_z1__eksportujProjekt
#define SOAP_TYPE_z1__eksportujProjekt (52)
/* complex XSD type 'z1:eksportujProjekt': */
struct z1__eksportujProjekt {
      public:
        /** Required element 'ID' of XSD type 'z1:id' */
        std::string ID;
      public:
        /** Return unique type id SOAP_TYPE_z1__eksportujProjekt */
        int soap_type() const { return SOAP_TYPE_z1__eksportujProjekt; }
        /** Constructor with member initializations */
        z1__eksportujProjekt()
        {
        }
        /** Friend allocator used by soap_new_z1__eksportujProjekt(struct soap*, int) */
        friend SOAP_FMAC1 z1__eksportujProjekt * SOAP_FMAC2 soap_instantiate_z1__eksportujProjekt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zapisy.h:897 */
#ifndef SOAP_TYPE_z1__eksportujTerminResponse
#define SOAP_TYPE_z1__eksportujTerminResponse (53)
/* complex XSD type 'z1:eksportujTerminResponse': */
struct z1__eksportujTerminResponse {
      public:
        /** Required element 'nazwa' of XSD type 'z1:filename' */
        std::string nazwa;
        /** Required element 'plik' of XSD type 'z1:csv' */
        std::string plik;
      public:
        /** Return unique type id SOAP_TYPE_z1__eksportujTerminResponse */
        int soap_type() const { return SOAP_TYPE_z1__eksportujTerminResponse; }
        /** Constructor with member initializations */
        z1__eksportujTerminResponse()
        {
        }
        /** Friend allocator used by soap_new_z1__eksportujTerminResponse(struct soap*, int) */
        friend SOAP_FMAC1 z1__eksportujTerminResponse * SOAP_FMAC2 soap_instantiate_z1__eksportujTerminResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zapisy.h:956 */
#ifndef SOAP_TYPE_z1__eksportujTermin
#define SOAP_TYPE_z1__eksportujTermin (56)
/* complex XSD type 'z1:eksportujTermin': */
struct z1__eksportujTermin {
      public:
        /** Required element 'ID' of XSD type 'z1:id' */
        std::string ID;
      public:
        /** Return unique type id SOAP_TYPE_z1__eksportujTermin */
        int soap_type() const { return SOAP_TYPE_z1__eksportujTermin; }
        /** Constructor with member initializations */
        z1__eksportujTermin()
        {
        }
        /** Friend allocator used by soap_new_z1__eksportujTermin(struct soap*, int) */
        friend SOAP_FMAC1 z1__eksportujTermin * SOAP_FMAC2 soap_instantiate_z1__eksportujTermin(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zapisy.h:967 */
#ifndef SOAP_TYPE_z1__eksportujPrzedmiotResponse
#define SOAP_TYPE_z1__eksportujPrzedmiotResponse (57)
/* complex XSD type 'z1:eksportujPrzedmiotResponse': */
struct z1__eksportujPrzedmiotResponse {
      public:
        /** Required element 'nazwa' of XSD type 'z1:filename' */
        std::string nazwa;
        /** Required element 'plik' of XSD type 'z1:csv' */
        std::string plik;
      public:
        /** Return unique type id SOAP_TYPE_z1__eksportujPrzedmiotResponse */
        int soap_type() const { return SOAP_TYPE_z1__eksportujPrzedmiotResponse; }
        /** Constructor with member initializations */
        z1__eksportujPrzedmiotResponse()
        {
        }
        /** Friend allocator used by soap_new_z1__eksportujPrzedmiotResponse(struct soap*, int) */
        friend SOAP_FMAC1 z1__eksportujPrzedmiotResponse * SOAP_FMAC2 soap_instantiate_z1__eksportujPrzedmiotResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zapisy.h:1026 */
#ifndef SOAP_TYPE_z1__eksportujPrzedmiot
#define SOAP_TYPE_z1__eksportujPrzedmiot (60)
/* complex XSD type 'z1:eksportujPrzedmiot': */
struct z1__eksportujPrzedmiot {
      public:
        /** Required element 'ID' of XSD type 'z1:id' */
        std::string ID;
      public:
        /** Return unique type id SOAP_TYPE_z1__eksportujPrzedmiot */
        int soap_type() const { return SOAP_TYPE_z1__eksportujPrzedmiot; }
        /** Constructor with member initializations */
        z1__eksportujPrzedmiot()
        {
        }
        /** Friend allocator used by soap_new_z1__eksportujPrzedmiot(struct soap*, int) */
        friend SOAP_FMAC1 z1__eksportujPrzedmiot * SOAP_FMAC2 soap_instantiate_z1__eksportujPrzedmiot(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zapisy.h:1037 */
#ifndef SOAP_TYPE_z1__dodajPrzedmiotResponse
#define SOAP_TYPE_z1__dodajPrzedmiotResponse (61)
/* complex XSD type 'z1:dodajPrzedmiotResponse': */
struct z1__dodajPrzedmiotResponse {
      public:
        /** Required element 'rezultat' of XSD type 'z1:wynik' */
        std::string rezultat;
      public:
        /** Return unique type id SOAP_TYPE_z1__dodajPrzedmiotResponse */
        int soap_type() const { return SOAP_TYPE_z1__dodajPrzedmiotResponse; }
        /** Constructor with member initializations */
        z1__dodajPrzedmiotResponse()
        {
        }
        /** Friend allocator used by soap_new_z1__dodajPrzedmiotResponse(struct soap*, int) */
        friend SOAP_FMAC1 z1__dodajPrzedmiotResponse * SOAP_FMAC2 soap_instantiate_z1__dodajPrzedmiotResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zapisy.h:1095 */
#ifndef SOAP_TYPE_z1__dodajPrzedmiot
#define SOAP_TYPE_z1__dodajPrzedmiot (65)
/* complex XSD type 'z1:dodajPrzedmiot': */
struct z1__dodajPrzedmiot {
      public:
        /** Optional element 'przedmiot' of XSD type 'z1:przedmiot' */
        z1__przedmiot *przedmiot;
      public:
        /** Return unique type id SOAP_TYPE_z1__dodajPrzedmiot */
        int soap_type() const { return SOAP_TYPE_z1__dodajPrzedmiot; }
        /** Constructor with member initializations */
        z1__dodajPrzedmiot()
        {
          przedmiot = (z1__przedmiot *)0;
        }
        /** Friend allocator used by soap_new_z1__dodajPrzedmiot(struct soap*, int) */
        friend SOAP_FMAC1 z1__dodajPrzedmiot * SOAP_FMAC2 soap_instantiate_z1__dodajPrzedmiot(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zapisy.h:1106 */
#ifndef SOAP_TYPE_z1__dodajProwadzacegoResponse
#define SOAP_TYPE_z1__dodajProwadzacegoResponse (66)
/* complex XSD type 'z1:dodajProwadzacegoResponse': */
struct z1__dodajProwadzacegoResponse {
      public:
        /** Required element 'rezultat' of XSD type 'z1:wynik' */
        std::string rezultat;
      public:
        /** Return unique type id SOAP_TYPE_z1__dodajProwadzacegoResponse */
        int soap_type() const { return SOAP_TYPE_z1__dodajProwadzacegoResponse; }
        /** Constructor with member initializations */
        z1__dodajProwadzacegoResponse()
        {
        }
        /** Friend allocator used by soap_new_z1__dodajProwadzacegoResponse(struct soap*, int) */
        friend SOAP_FMAC1 z1__dodajProwadzacegoResponse * SOAP_FMAC2 soap_instantiate_z1__dodajProwadzacegoResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zapisy.h:1164 */
#ifndef SOAP_TYPE_z1__dodajProwadzacego
#define SOAP_TYPE_z1__dodajProwadzacego (70)
/* complex XSD type 'z1:dodajProwadzacego': */
struct z1__dodajProwadzacego {
      public:
        /** Optional element 'daneProwadzacego' of XSD type 'z1:prowadzacy' */
        z1__prowadzacy *daneProwadzacego;
      public:
        /** Return unique type id SOAP_TYPE_z1__dodajProwadzacego */
        int soap_type() const { return SOAP_TYPE_z1__dodajProwadzacego; }
        /** Constructor with member initializations */
        z1__dodajProwadzacego()
        {
          daneProwadzacego = (z1__prowadzacy *)0;
        }
        /** Friend allocator used by soap_new_z1__dodajProwadzacego(struct soap*, int) */
        friend SOAP_FMAC1 z1__dodajProwadzacego * SOAP_FMAC2 soap_instantiate_z1__dodajProwadzacego(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zapisy.h:1175 */
#ifndef SOAP_TYPE_z1__zmienDaneProwadzacegoResponse
#define SOAP_TYPE_z1__zmienDaneProwadzacegoResponse (71)
/* complex XSD type 'z1:zmienDaneProwadzacegoResponse': */
struct z1__zmienDaneProwadzacegoResponse {
      public:
        /** Required element 'rezultat' of XSD type 'z1:wynik' */
        std::string rezultat;
      public:
        /** Return unique type id SOAP_TYPE_z1__zmienDaneProwadzacegoResponse */
        int soap_type() const { return SOAP_TYPE_z1__zmienDaneProwadzacegoResponse; }
        /** Constructor with member initializations */
        z1__zmienDaneProwadzacegoResponse()
        {
        }
        /** Friend allocator used by soap_new_z1__zmienDaneProwadzacegoResponse(struct soap*, int) */
        friend SOAP_FMAC1 z1__zmienDaneProwadzacegoResponse * SOAP_FMAC2 soap_instantiate_z1__zmienDaneProwadzacegoResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zapisy.h:1236 */
#ifndef SOAP_TYPE_z1__zmienDaneProwadzacego
#define SOAP_TYPE_z1__zmienDaneProwadzacego (74)
/* complex XSD type 'z1:zmienDaneProwadzacego': */
struct z1__zmienDaneProwadzacego {
      public:
        /** Required element 'idProwadzacego' of XSD type 'z1:id' */
        std::string idProwadzacego;
        /** Optional element 'daneProwadzacego' of XSD type 'z1:prowadzacy' */
        z1__prowadzacy *daneProwadzacego;
      public:
        /** Return unique type id SOAP_TYPE_z1__zmienDaneProwadzacego */
        int soap_type() const { return SOAP_TYPE_z1__zmienDaneProwadzacego; }
        /** Constructor with member initializations */
        z1__zmienDaneProwadzacego()
        {
          daneProwadzacego = (z1__prowadzacy *)0;
        }
        /** Friend allocator used by soap_new_z1__zmienDaneProwadzacego(struct soap*, int) */
        friend SOAP_FMAC1 z1__zmienDaneProwadzacego * SOAP_FMAC2 soap_instantiate_z1__zmienDaneProwadzacego(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zapisy.h:1247 */
#ifndef SOAP_TYPE_z1__usunProwadzacegoResponse
#define SOAP_TYPE_z1__usunProwadzacegoResponse (75)
/* complex XSD type 'z1:usunProwadzacegoResponse': */
struct z1__usunProwadzacegoResponse {
      public:
        /** Required element 'rezultat' of XSD type 'z1:wynik' */
        std::string rezultat;
      public:
        /** Return unique type id SOAP_TYPE_z1__usunProwadzacegoResponse */
        int soap_type() const { return SOAP_TYPE_z1__usunProwadzacegoResponse; }
        /** Constructor with member initializations */
        z1__usunProwadzacegoResponse()
        {
        }
        /** Friend allocator used by soap_new_z1__usunProwadzacegoResponse(struct soap*, int) */
        friend SOAP_FMAC1 z1__usunProwadzacegoResponse * SOAP_FMAC2 soap_instantiate_z1__usunProwadzacegoResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zapisy.h:1305 */
#ifndef SOAP_TYPE_z1__usunProwadzacego
#define SOAP_TYPE_z1__usunProwadzacego (78)
/* complex XSD type 'z1:usunProwadzacego': */
struct z1__usunProwadzacego {
      public:
        /** Required element 'ID' of XSD type 'z1:id' */
        std::string ID;
      public:
        /** Return unique type id SOAP_TYPE_z1__usunProwadzacego */
        int soap_type() const { return SOAP_TYPE_z1__usunProwadzacego; }
        /** Constructor with member initializations */
        z1__usunProwadzacego()
        {
        }
        /** Friend allocator used by soap_new_z1__usunProwadzacego(struct soap*, int) */
        friend SOAP_FMAC1 z1__usunProwadzacego * SOAP_FMAC2 soap_instantiate_z1__usunProwadzacego(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zapisy.h:1316 */
#ifndef SOAP_TYPE_z1__dodajStudentaResponse
#define SOAP_TYPE_z1__dodajStudentaResponse (79)
/* complex XSD type 'z1:dodajStudentaResponse': */
struct z1__dodajStudentaResponse {
      public:
        /** Required element 'rezultat' of XSD type 'z1:wynik' */
        std::string rezultat;
      public:
        /** Return unique type id SOAP_TYPE_z1__dodajStudentaResponse */
        int soap_type() const { return SOAP_TYPE_z1__dodajStudentaResponse; }
        /** Constructor with member initializations */
        z1__dodajStudentaResponse()
        {
        }
        /** Friend allocator used by soap_new_z1__dodajStudentaResponse(struct soap*, int) */
        friend SOAP_FMAC1 z1__dodajStudentaResponse * SOAP_FMAC2 soap_instantiate_z1__dodajStudentaResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zapisy.h:1377 */
#ifndef SOAP_TYPE_z1__dodajStudenta
#define SOAP_TYPE_z1__dodajStudenta (83)
/* complex XSD type 'z1:dodajStudenta': */
struct z1__dodajStudenta {
      public:
        /** Required element 'przedmiotID' of XSD type 'z1:id' */
        std::string przedmiotID;
        /** Optional element 'student' of XSD type 'z1:student' */
        z1__student *student;
      public:
        /** Return unique type id SOAP_TYPE_z1__dodajStudenta */
        int soap_type() const { return SOAP_TYPE_z1__dodajStudenta; }
        /** Constructor with member initializations */
        z1__dodajStudenta()
        {
          student = (z1__student *)0;
        }
        /** Friend allocator used by soap_new_z1__dodajStudenta(struct soap*, int) */
        friend SOAP_FMAC1 z1__dodajStudenta * SOAP_FMAC2 soap_instantiate_z1__dodajStudenta(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zapisy.h:1388 */
#ifndef SOAP_TYPE_z1__usunStudentaZPrzedmiotuResponse
#define SOAP_TYPE_z1__usunStudentaZPrzedmiotuResponse (84)
/* complex XSD type 'z1:usunStudentaZPrzedmiotuResponse': */
struct z1__usunStudentaZPrzedmiotuResponse {
      public:
        /** Required element 'rezultat' of XSD type 'z1:wynik' */
        std::string rezultat;
      public:
        /** Return unique type id SOAP_TYPE_z1__usunStudentaZPrzedmiotuResponse */
        int soap_type() const { return SOAP_TYPE_z1__usunStudentaZPrzedmiotuResponse; }
        /** Constructor with member initializations */
        z1__usunStudentaZPrzedmiotuResponse()
        {
        }
        /** Friend allocator used by soap_new_z1__usunStudentaZPrzedmiotuResponse(struct soap*, int) */
        friend SOAP_FMAC1 z1__usunStudentaZPrzedmiotuResponse * SOAP_FMAC2 soap_instantiate_z1__usunStudentaZPrzedmiotuResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zapisy.h:1449 */
#ifndef SOAP_TYPE_z1__usunStudentaZPrzedmiotu
#define SOAP_TYPE_z1__usunStudentaZPrzedmiotu (87)
/* complex XSD type 'z1:usunStudentaZPrzedmiotu': */
struct z1__usunStudentaZPrzedmiotu {
      public:
        /** Required element 'przedmiotID' of XSD type 'z1:id' */
        std::string przedmiotID;
        /** Optional element 'student' of XSD type 'z1:student' */
        z1__student *student;
      public:
        /** Return unique type id SOAP_TYPE_z1__usunStudentaZPrzedmiotu */
        int soap_type() const { return SOAP_TYPE_z1__usunStudentaZPrzedmiotu; }
        /** Constructor with member initializations */
        z1__usunStudentaZPrzedmiotu()
        {
          student = (z1__student *)0;
        }
        /** Friend allocator used by soap_new_z1__usunStudentaZPrzedmiotu(struct soap*, int) */
        friend SOAP_FMAC1 z1__usunStudentaZPrzedmiotu * SOAP_FMAC2 soap_instantiate_z1__usunStudentaZPrzedmiotu(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zapisy.h:1460 */
#ifndef SOAP_TYPE_z1__usunWszystkichZPrzedmiotuResponse
#define SOAP_TYPE_z1__usunWszystkichZPrzedmiotuResponse (88)
/* complex XSD type 'z1:usunWszystkichZPrzedmiotuResponse': */
struct z1__usunWszystkichZPrzedmiotuResponse {
      public:
        /** Required element 'rezultat' of XSD type 'z1:wynik' */
        std::string rezultat;
      public:
        /** Return unique type id SOAP_TYPE_z1__usunWszystkichZPrzedmiotuResponse */
        int soap_type() const { return SOAP_TYPE_z1__usunWszystkichZPrzedmiotuResponse; }
        /** Constructor with member initializations */
        z1__usunWszystkichZPrzedmiotuResponse()
        {
        }
        /** Friend allocator used by soap_new_z1__usunWszystkichZPrzedmiotuResponse(struct soap*, int) */
        friend SOAP_FMAC1 z1__usunWszystkichZPrzedmiotuResponse * SOAP_FMAC2 soap_instantiate_z1__usunWszystkichZPrzedmiotuResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zapisy.h:1518 */
#ifndef SOAP_TYPE_z1__usunWszystkichZPrzedmiotu
#define SOAP_TYPE_z1__usunWszystkichZPrzedmiotu (91)
/* complex XSD type 'z1:usunWszystkichZPrzedmiotu': */
struct z1__usunWszystkichZPrzedmiotu {
      public:
        /** Required element 'ID' of XSD type 'z1:id' */
        std::string ID;
      public:
        /** Return unique type id SOAP_TYPE_z1__usunWszystkichZPrzedmiotu */
        int soap_type() const { return SOAP_TYPE_z1__usunWszystkichZPrzedmiotu; }
        /** Constructor with member initializations */
        z1__usunWszystkichZPrzedmiotu()
        {
        }
        /** Friend allocator used by soap_new_z1__usunWszystkichZPrzedmiotu(struct soap*, int) */
        friend SOAP_FMAC1 z1__usunWszystkichZPrzedmiotu * SOAP_FMAC2 soap_instantiate_z1__usunWszystkichZPrzedmiotu(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zapisy.h:1529 */
#ifndef SOAP_TYPE_z1__usunPrzedmiotResponse
#define SOAP_TYPE_z1__usunPrzedmiotResponse (92)
/* complex XSD type 'z1:usunPrzedmiotResponse': */
struct z1__usunPrzedmiotResponse {
      public:
        /** Required element 'rezultat' of XSD type 'z1:wynik' */
        std::string rezultat;
      public:
        /** Return unique type id SOAP_TYPE_z1__usunPrzedmiotResponse */
        int soap_type() const { return SOAP_TYPE_z1__usunPrzedmiotResponse; }
        /** Constructor with member initializations */
        z1__usunPrzedmiotResponse()
        {
        }
        /** Friend allocator used by soap_new_z1__usunPrzedmiotResponse(struct soap*, int) */
        friend SOAP_FMAC1 z1__usunPrzedmiotResponse * SOAP_FMAC2 soap_instantiate_z1__usunPrzedmiotResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zapisy.h:1587 */
#ifndef SOAP_TYPE_z1__usunPrzedmiot
#define SOAP_TYPE_z1__usunPrzedmiot (95)
/* complex XSD type 'z1:usunPrzedmiot': */
struct z1__usunPrzedmiot {
      public:
        /** Required element 'ID' of XSD type 'z1:id' */
        std::string ID;
      public:
        /** Return unique type id SOAP_TYPE_z1__usunPrzedmiot */
        int soap_type() const { return SOAP_TYPE_z1__usunPrzedmiot; }
        /** Constructor with member initializations */
        z1__usunPrzedmiot()
        {
        }
        /** Friend allocator used by soap_new_z1__usunPrzedmiot(struct soap*, int) */
        friend SOAP_FMAC1 z1__usunPrzedmiot * SOAP_FMAC2 soap_instantiate_z1__usunPrzedmiot(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zapisy.h:1598 */
#ifndef SOAP_TYPE_z1__edytujProjektResponse
#define SOAP_TYPE_z1__edytujProjektResponse (96)
/* complex XSD type 'z1:edytujProjektResponse': */
struct z1__edytujProjektResponse {
      public:
        /** Required element 'rezultat' of XSD type 'z1:wynik' */
        std::string rezultat;
      public:
        /** Return unique type id SOAP_TYPE_z1__edytujProjektResponse */
        int soap_type() const { return SOAP_TYPE_z1__edytujProjektResponse; }
        /** Constructor with member initializations */
        z1__edytujProjektResponse()
        {
        }
        /** Friend allocator used by soap_new_z1__edytujProjektResponse(struct soap*, int) */
        friend SOAP_FMAC1 z1__edytujProjektResponse * SOAP_FMAC2 soap_instantiate_z1__edytujProjektResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zapisy.h:1662 */
#ifndef SOAP_TYPE_z1__edytujProjekt
#define SOAP_TYPE_z1__edytujProjekt (99)
/* complex XSD type 'z1:edytujProjekt': */
struct z1__edytujProjekt {
      public:
        /** Required element 'przedmiotID' of XSD type 'z1:id' */
        std::string przedmiotID;
        /** Required element 'projektID' of XSD type 'z1:id' */
        std::string projektID;
        /** Optional element 'projekt' of XSD type 'z1:temat' */
        z1__temat *projekt;
      public:
        /** Return unique type id SOAP_TYPE_z1__edytujProjekt */
        int soap_type() const { return SOAP_TYPE_z1__edytujProjekt; }
        /** Constructor with member initializations */
        z1__edytujProjekt()
        {
          projekt = (z1__temat *)0;
        }
        /** Friend allocator used by soap_new_z1__edytujProjekt(struct soap*, int) */
        friend SOAP_FMAC1 z1__edytujProjekt * SOAP_FMAC2 soap_instantiate_z1__edytujProjekt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zapisy.h:1673 */
#ifndef SOAP_TYPE_z1__edytujTerminResponse
#define SOAP_TYPE_z1__edytujTerminResponse (100)
/* complex XSD type 'z1:edytujTerminResponse': */
struct z1__edytujTerminResponse {
      public:
        /** Required element 'rezultat' of XSD type 'z1:wynik' */
        std::string rezultat;
      public:
        /** Return unique type id SOAP_TYPE_z1__edytujTerminResponse */
        int soap_type() const { return SOAP_TYPE_z1__edytujTerminResponse; }
        /** Constructor with member initializations */
        z1__edytujTerminResponse()
        {
        }
        /** Friend allocator used by soap_new_z1__edytujTerminResponse(struct soap*, int) */
        friend SOAP_FMAC1 z1__edytujTerminResponse * SOAP_FMAC2 soap_instantiate_z1__edytujTerminResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zapisy.h:1740 */
#ifndef SOAP_TYPE_z1__edytujTermin
#define SOAP_TYPE_z1__edytujTermin (103)
/* complex XSD type 'z1:edytujTermin': */
struct z1__edytujTermin {
      public:
        /** Required element 'przedmiotID' of XSD type 'z1:id' */
        std::string przedmiotID;
        /** Required element 'terminID' of XSD type 'z1:id' */
        std::string terminID;
        /** Required element 'salaID' of XSD type 'z1:id' */
        std::string salaID;
        /** Optional element 'termin' of XSD type 'z1:termin' */
        z1__termin *termin;
      public:
        /** Return unique type id SOAP_TYPE_z1__edytujTermin */
        int soap_type() const { return SOAP_TYPE_z1__edytujTermin; }
        /** Constructor with member initializations */
        z1__edytujTermin()
        {
          termin = (z1__termin *)0;
        }
        /** Friend allocator used by soap_new_z1__edytujTermin(struct soap*, int) */
        friend SOAP_FMAC1 z1__edytujTermin * SOAP_FMAC2 soap_instantiate_z1__edytujTermin(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zapisy.h:1801 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (104)
/* SOAP_ENV__Header: */
struct SOAP_ENV__Header {
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Header */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header()
        {
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Header(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* zapisy.h:1801 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (105)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XSD type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Code */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code()
        {
          SOAP_ENV__Value = (char *)0;
          SOAP_ENV__Subcode = (struct SOAP_ENV__Code *)0;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Code(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* zapisy.h:1801 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (107)
/* SOAP_ENV__Detail: */
struct SOAP_ENV__Detail {
      public:
        char *__any;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_T assigned to __type */
        /** Do not create a cyclic data structure throught this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Detail */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail()
        {
          __any = (char *)0;
          __type = 0;
          fault = NULL;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Detail(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* zapisy.h:1801 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (110)
/* SOAP_ENV__Reason: */
struct SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XSD type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Reason */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason()
        {
          SOAP_ENV__Text = (char *)0;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Reason(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* zapisy.h:1801 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (111)
/* SOAP_ENV__Fault: */
struct SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XSD type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XSD type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XSD type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XSD type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XSD type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XSD type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Fault */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault()
        {
          faultcode = (char *)0;
          faultstring = (char *)0;
          faultactor = (char *)0;
          detail = (struct SOAP_ENV__Detail *)0;
          SOAP_ENV__Code = (struct SOAP_ENV__Code *)0;
          SOAP_ENV__Reason = (struct SOAP_ENV__Reason *)0;
          SOAP_ENV__Node = (char *)0;
          SOAP_ENV__Role = (char *)0;
          SOAP_ENV__Detail = (struct SOAP_ENV__Detail *)0;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Fault(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* zapisy.h:102 */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

/* zapisy.h:102 */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

/* zapisy.h:140 */
#ifndef SOAP_TYPE_xsd__integer
#define SOAP_TYPE_xsd__integer (12)
typedef std::string xsd__integer;
#endif

/* zapisy.h:143 */
#ifndef SOAP_TYPE_xsd__nonNegativeInteger
#define SOAP_TYPE_xsd__nonNegativeInteger (13)
typedef std::string xsd__nonNegativeInteger;
#endif

/* zapisy.h:188 */
#ifndef SOAP_TYPE_z1__godzina
#define SOAP_TYPE_z1__godzina (22)
typedef std::string z1__godzina;
#endif

/* zapisy.h:192 */
#ifndef SOAP_TYPE_z1__id
#define SOAP_TYPE_z1__id (23)
typedef xsd__integer z1__id;
#endif

/* zapisy.h:196 */
#ifndef SOAP_TYPE_z1__csv
#define SOAP_TYPE_z1__csv (24)
typedef xsd__integer z1__csv;
#endif

/* zapisy.h:200 */
#ifndef SOAP_TYPE_z1__filename
#define SOAP_TYPE_z1__filename (25)
typedef xsd__integer z1__filename;
#endif

/* zapisy.h:205 */
#ifndef SOAP_TYPE_z1__nrIndex
#define SOAP_TYPE_z1__nrIndex (26)
typedef std::string z1__nrIndex;
#endif

/* zapisy.h:210 */
#ifndef SOAP_TYPE_z1__wynik
#define SOAP_TYPE_z1__wynik (27)
typedef std::string z1__wynik;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif

/* bool has binding name 'bool' for type 'xsd:boolean' */
#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (29)
#endif

/* z1__wynik has binding name 'z1__wynik' for type 'z1:wynik' */
#ifndef SOAP_TYPE_z1__wynik
#define SOAP_TYPE_z1__wynik (27)
#endif

/* z1__nrIndex has binding name 'z1__nrIndex' for type 'z1:nrIndex' */
#ifndef SOAP_TYPE_z1__nrIndex
#define SOAP_TYPE_z1__nrIndex (26)
#endif

/* z1__filename has binding name 'z1__filename' for type 'z1:filename' */
#ifndef SOAP_TYPE_z1__filename
#define SOAP_TYPE_z1__filename (25)
#endif

/* z1__csv has binding name 'z1__csv' for type 'z1:csv' */
#ifndef SOAP_TYPE_z1__csv
#define SOAP_TYPE_z1__csv (24)
#endif

/* z1__id has binding name 'z1__id' for type 'z1:id' */
#ifndef SOAP_TYPE_z1__id
#define SOAP_TYPE_z1__id (23)
#endif

/* z1__godzina has binding name 'z1__godzina' for type 'z1:godzina' */
#ifndef SOAP_TYPE_z1__godzina
#define SOAP_TYPE_z1__godzina (22)
#endif

/* z1__importowanyPrzedmiot has binding name 'z1__importowanyPrzedmiot' for type 'z1:importowanyPrzedmiot' */
#ifndef SOAP_TYPE_z1__importowanyPrzedmiot
#define SOAP_TYPE_z1__importowanyPrzedmiot (21)
#endif

/* z1__prowadzacy has binding name 'z1__prowadzacy' for type 'z1:prowadzacy' */
#ifndef SOAP_TYPE_z1__prowadzacy
#define SOAP_TYPE_z1__prowadzacy (20)
#endif

/* z1__typ has binding name 'z1__typ' for type 'z1:typ' */
#ifndef SOAP_TYPE_z1__typ
#define SOAP_TYPE_z1__typ (19)
#endif

/* z1__przedmiot has binding name 'z1__przedmiot' for type 'z1:przedmiot' */
#ifndef SOAP_TYPE_z1__przedmiot
#define SOAP_TYPE_z1__przedmiot (18)
#endif

/* z1__sala has binding name 'z1__sala' for type 'z1:sala' */
#ifndef SOAP_TYPE_z1__sala
#define SOAP_TYPE_z1__sala (17)
#endif

/* z1__termin has binding name 'z1__termin' for type 'z1:termin' */
#ifndef SOAP_TYPE_z1__termin
#define SOAP_TYPE_z1__termin (16)
#endif

/* z1__temat has binding name 'z1__temat' for type 'z1:temat' */
#ifndef SOAP_TYPE_z1__temat
#define SOAP_TYPE_z1__temat (15)
#endif

/* z1__student has binding name 'z1__student' for type 'z1:student' */
#ifndef SOAP_TYPE_z1__student
#define SOAP_TYPE_z1__student (14)
#endif

/* xsd__nonNegativeInteger has binding name 'xsd__nonNegativeInteger' for type 'xsd:nonNegativeInteger' */
#ifndef SOAP_TYPE_xsd__nonNegativeInteger
#define SOAP_TYPE_xsd__nonNegativeInteger (13)
#endif

/* xsd__integer has binding name 'xsd__integer' for type 'xsd:integer' */
#ifndef SOAP_TYPE_xsd__integer
#define SOAP_TYPE_xsd__integer (12)
#endif

/* std::string has binding name 'std__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (11)
#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (111)
#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (110)
#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (107)
#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (105)
#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (104)
#endif

/* struct z1__edytujTermin has binding name 'z1__edytujTermin' for type 'z1:edytujTermin' */
#ifndef SOAP_TYPE_z1__edytujTermin
#define SOAP_TYPE_z1__edytujTermin (103)
#endif

/* struct z1__edytujTerminResponse has binding name 'z1__edytujTerminResponse' for type 'z1:edytujTerminResponse' */
#ifndef SOAP_TYPE_z1__edytujTerminResponse
#define SOAP_TYPE_z1__edytujTerminResponse (100)
#endif

/* struct z1__edytujProjekt has binding name 'z1__edytujProjekt' for type 'z1:edytujProjekt' */
#ifndef SOAP_TYPE_z1__edytujProjekt
#define SOAP_TYPE_z1__edytujProjekt (99)
#endif

/* struct z1__edytujProjektResponse has binding name 'z1__edytujProjektResponse' for type 'z1:edytujProjektResponse' */
#ifndef SOAP_TYPE_z1__edytujProjektResponse
#define SOAP_TYPE_z1__edytujProjektResponse (96)
#endif

/* struct z1__usunPrzedmiot has binding name 'z1__usunPrzedmiot' for type 'z1:usunPrzedmiot' */
#ifndef SOAP_TYPE_z1__usunPrzedmiot
#define SOAP_TYPE_z1__usunPrzedmiot (95)
#endif

/* struct z1__usunPrzedmiotResponse has binding name 'z1__usunPrzedmiotResponse' for type 'z1:usunPrzedmiotResponse' */
#ifndef SOAP_TYPE_z1__usunPrzedmiotResponse
#define SOAP_TYPE_z1__usunPrzedmiotResponse (92)
#endif

/* struct z1__usunWszystkichZPrzedmiotu has binding name 'z1__usunWszystkichZPrzedmiotu' for type 'z1:usunWszystkichZPrzedmiotu' */
#ifndef SOAP_TYPE_z1__usunWszystkichZPrzedmiotu
#define SOAP_TYPE_z1__usunWszystkichZPrzedmiotu (91)
#endif

/* struct z1__usunWszystkichZPrzedmiotuResponse has binding name 'z1__usunWszystkichZPrzedmiotuResponse' for type 'z1:usunWszystkichZPrzedmiotuResponse' */
#ifndef SOAP_TYPE_z1__usunWszystkichZPrzedmiotuResponse
#define SOAP_TYPE_z1__usunWszystkichZPrzedmiotuResponse (88)
#endif

/* struct z1__usunStudentaZPrzedmiotu has binding name 'z1__usunStudentaZPrzedmiotu' for type 'z1:usunStudentaZPrzedmiotu' */
#ifndef SOAP_TYPE_z1__usunStudentaZPrzedmiotu
#define SOAP_TYPE_z1__usunStudentaZPrzedmiotu (87)
#endif

/* struct z1__usunStudentaZPrzedmiotuResponse has binding name 'z1__usunStudentaZPrzedmiotuResponse' for type 'z1:usunStudentaZPrzedmiotuResponse' */
#ifndef SOAP_TYPE_z1__usunStudentaZPrzedmiotuResponse
#define SOAP_TYPE_z1__usunStudentaZPrzedmiotuResponse (84)
#endif

/* struct z1__dodajStudenta has binding name 'z1__dodajStudenta' for type 'z1:dodajStudenta' */
#ifndef SOAP_TYPE_z1__dodajStudenta
#define SOAP_TYPE_z1__dodajStudenta (83)
#endif

/* struct z1__dodajStudentaResponse has binding name 'z1__dodajStudentaResponse' for type 'z1:dodajStudentaResponse' */
#ifndef SOAP_TYPE_z1__dodajStudentaResponse
#define SOAP_TYPE_z1__dodajStudentaResponse (79)
#endif

/* struct z1__usunProwadzacego has binding name 'z1__usunProwadzacego' for type 'z1:usunProwadzacego' */
#ifndef SOAP_TYPE_z1__usunProwadzacego
#define SOAP_TYPE_z1__usunProwadzacego (78)
#endif

/* struct z1__usunProwadzacegoResponse has binding name 'z1__usunProwadzacegoResponse' for type 'z1:usunProwadzacegoResponse' */
#ifndef SOAP_TYPE_z1__usunProwadzacegoResponse
#define SOAP_TYPE_z1__usunProwadzacegoResponse (75)
#endif

/* struct z1__zmienDaneProwadzacego has binding name 'z1__zmienDaneProwadzacego' for type 'z1:zmienDaneProwadzacego' */
#ifndef SOAP_TYPE_z1__zmienDaneProwadzacego
#define SOAP_TYPE_z1__zmienDaneProwadzacego (74)
#endif

/* struct z1__zmienDaneProwadzacegoResponse has binding name 'z1__zmienDaneProwadzacegoResponse' for type 'z1:zmienDaneProwadzacegoResponse' */
#ifndef SOAP_TYPE_z1__zmienDaneProwadzacegoResponse
#define SOAP_TYPE_z1__zmienDaneProwadzacegoResponse (71)
#endif

/* struct z1__dodajProwadzacego has binding name 'z1__dodajProwadzacego' for type 'z1:dodajProwadzacego' */
#ifndef SOAP_TYPE_z1__dodajProwadzacego
#define SOAP_TYPE_z1__dodajProwadzacego (70)
#endif

/* struct z1__dodajProwadzacegoResponse has binding name 'z1__dodajProwadzacegoResponse' for type 'z1:dodajProwadzacegoResponse' */
#ifndef SOAP_TYPE_z1__dodajProwadzacegoResponse
#define SOAP_TYPE_z1__dodajProwadzacegoResponse (66)
#endif

/* struct z1__dodajPrzedmiot has binding name 'z1__dodajPrzedmiot' for type 'z1:dodajPrzedmiot' */
#ifndef SOAP_TYPE_z1__dodajPrzedmiot
#define SOAP_TYPE_z1__dodajPrzedmiot (65)
#endif

/* struct z1__dodajPrzedmiotResponse has binding name 'z1__dodajPrzedmiotResponse' for type 'z1:dodajPrzedmiotResponse' */
#ifndef SOAP_TYPE_z1__dodajPrzedmiotResponse
#define SOAP_TYPE_z1__dodajPrzedmiotResponse (61)
#endif

/* struct z1__eksportujPrzedmiot has binding name 'z1__eksportujPrzedmiot' for type 'z1:eksportujPrzedmiot' */
#ifndef SOAP_TYPE_z1__eksportujPrzedmiot
#define SOAP_TYPE_z1__eksportujPrzedmiot (60)
#endif

/* struct z1__eksportujPrzedmiotResponse has binding name 'z1__eksportujPrzedmiotResponse' for type 'z1:eksportujPrzedmiotResponse' */
#ifndef SOAP_TYPE_z1__eksportujPrzedmiotResponse
#define SOAP_TYPE_z1__eksportujPrzedmiotResponse (57)
#endif

/* struct z1__eksportujTermin has binding name 'z1__eksportujTermin' for type 'z1:eksportujTermin' */
#ifndef SOAP_TYPE_z1__eksportujTermin
#define SOAP_TYPE_z1__eksportujTermin (56)
#endif

/* struct z1__eksportujTerminResponse has binding name 'z1__eksportujTerminResponse' for type 'z1:eksportujTerminResponse' */
#ifndef SOAP_TYPE_z1__eksportujTerminResponse
#define SOAP_TYPE_z1__eksportujTerminResponse (53)
#endif

/* struct z1__eksportujProjekt has binding name 'z1__eksportujProjekt' for type 'z1:eksportujProjekt' */
#ifndef SOAP_TYPE_z1__eksportujProjekt
#define SOAP_TYPE_z1__eksportujProjekt (52)
#endif

/* struct z1__eksportujProjektResponse has binding name 'z1__eksportujProjektResponse' for type 'z1:eksportujProjektResponse' */
#ifndef SOAP_TYPE_z1__eksportujProjektResponse
#define SOAP_TYPE_z1__eksportujProjektResponse (49)
#endif

/* struct z1__dodajTermin has binding name 'z1__dodajTermin' for type 'z1:dodajTermin' */
#ifndef SOAP_TYPE_z1__dodajTermin
#define SOAP_TYPE_z1__dodajTermin (48)
#endif

/* struct z1__dodajTerminResponse has binding name 'z1__dodajTerminResponse' for type 'z1:dodajTerminResponse' */
#ifndef SOAP_TYPE_z1__dodajTerminResponse
#define SOAP_TYPE_z1__dodajTerminResponse (44)
#endif

/* struct z1__zapiszTermin has binding name 'z1__zapiszTermin' for type 'z1:zapiszTermin' */
#ifndef SOAP_TYPE_z1__zapiszTermin
#define SOAP_TYPE_z1__zapiszTermin (43)
#endif

/* struct z1__zapiszTerminResponse has binding name 'z1__zapiszTerminResponse' for type 'z1:zapiszTerminResponse' */
#ifndef SOAP_TYPE_z1__zapiszTerminResponse
#define SOAP_TYPE_z1__zapiszTerminResponse (40)
#endif

/* struct z1__dodajProjekt has binding name 'z1__dodajProjekt' for type 'z1:dodajProjekt' */
#ifndef SOAP_TYPE_z1__dodajProjekt
#define SOAP_TYPE_z1__dodajProjekt (39)
#endif

/* struct z1__dodajProjektResponse has binding name 'z1__dodajProjektResponse' for type 'z1:dodajProjektResponse' */
#ifndef SOAP_TYPE_z1__dodajProjektResponse
#define SOAP_TYPE_z1__dodajProjektResponse (35)
#endif

/* struct z1__zapiszProjekt has binding name 'z1__zapiszProjekt' for type 'z1:zapiszProjekt' */
#ifndef SOAP_TYPE_z1__zapiszProjekt
#define SOAP_TYPE_z1__zapiszProjekt (34)
#endif

/* struct z1__zapiszProjektResponse has binding name 'z1__zapiszProjektResponse' for type 'z1:zapiszProjektResponse' */
#ifndef SOAP_TYPE_z1__zapiszProjektResponse
#define SOAP_TYPE_z1__zapiszProjektResponse (31)
#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (113)
#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (112)
#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (106)
#endif

/* z1__student * has binding name 'PointerToz1__student' for type 'z1:student' */
#ifndef SOAP_TYPE_PointerToz1__student
#define SOAP_TYPE_PointerToz1__student (80)
#endif

/* z1__prowadzacy * has binding name 'PointerToz1__prowadzacy' for type 'z1:prowadzacy' */
#ifndef SOAP_TYPE_PointerToz1__prowadzacy
#define SOAP_TYPE_PointerToz1__prowadzacy (67)
#endif

/* z1__przedmiot * has binding name 'PointerToz1__przedmiot' for type 'z1:przedmiot' */
#ifndef SOAP_TYPE_PointerToz1__przedmiot
#define SOAP_TYPE_PointerToz1__przedmiot (62)
#endif

/* z1__termin * has binding name 'PointerToz1__termin' for type 'z1:termin' */
#ifndef SOAP_TYPE_PointerToz1__termin
#define SOAP_TYPE_PointerToz1__termin (45)
#endif

/* z1__temat * has binding name 'PointerToz1__temat' for type 'z1:temat' */
#ifndef SOAP_TYPE_PointerToz1__temat
#define SOAP_TYPE_PointerToz1__temat (36)
#endif

/* std::string * has binding name 'PointerToz1__csv' for type 'z1:csv' */
#ifndef SOAP_TYPE_PointerToz1__csv
#define SOAP_TYPE_PointerToz1__csv (30)
#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
