/* soapH.h
   Generated by gSOAP 2.8.30 for zapisy.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_byte(soap, p, "byte", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_int(soap, p, "int", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__wynik_DEFINED
#define SOAP_TYPE_z1__wynik_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__wynik(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__wynik(struct soap*, const std::string *);

#define soap_z1__wynik2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__wynik(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2z1__wynik soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_z1__wynik(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_z1__wynik soap_instantiate_std__string


#define soap_new_z1__wynik soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__wynik(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_z1__wynik(struct soap *soap, std::string const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_z1__wynik(soap, p, "z1:wynik", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_z1__wynik(struct soap*, std::string *, const char*, const char*);

inline int soap_read_z1__wynik(struct soap *soap, std::string *p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get_z1__wynik(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__nrIndex_DEFINED
#define SOAP_TYPE_z1__nrIndex_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__nrIndex(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__nrIndex(struct soap*, const std::string *);

#define soap_z1__nrIndex2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__nrIndex(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2z1__nrIndex soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_z1__nrIndex(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_z1__nrIndex soap_instantiate_std__string


#define soap_new_z1__nrIndex soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__nrIndex(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_z1__nrIndex(struct soap *soap, std::string const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_z1__nrIndex(soap, p, "z1:nrIndex", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_z1__nrIndex(struct soap*, std::string *, const char*, const char*);

inline int soap_read_z1__nrIndex(struct soap *soap, std::string *p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get_z1__nrIndex(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif
/* z1__filename is a typedef synonym for xsd__integer */

#ifndef SOAP_TYPE_z1__filename_DEFINED
#define SOAP_TYPE_z1__filename_DEFINED

#define soap_default_z1__filename(soap, a) soap_default_xsd__integer(soap, a)


#define soap_serialize_z1__filename soap_serialize_xsd__integer


#define soap_z1__filename2s soap_xsd__integer2s


#define soap_out_z1__filename soap_out_xsd__integer


#define soap_s2z1__filename soap_s2xsd__integer


#define soap_in_z1__filename soap_in_xsd__integer


#define soap_instantiate_z1__filename soap_instantiate_xsd__integer


#define soap_new_z1__filename soap_new_xsd__integer


#define soap_put_z1__filename soap_put_xsd__integer


#define soap_write_z1__filename soap_write_xsd__integer


#define soap_get_z1__filename soap_get_xsd__integer


#define soap_read_z1__filename soap_read_xsd__integer

#endif
/* z1__csv is a typedef synonym for xsd__integer */

#ifndef SOAP_TYPE_z1__csv_DEFINED
#define SOAP_TYPE_z1__csv_DEFINED

#define soap_default_z1__csv(soap, a) soap_default_xsd__integer(soap, a)


#define soap_serialize_z1__csv soap_serialize_xsd__integer


#define soap_z1__csv2s soap_xsd__integer2s


#define soap_out_z1__csv soap_out_xsd__integer


#define soap_s2z1__csv soap_s2xsd__integer


#define soap_in_z1__csv soap_in_xsd__integer


#define soap_instantiate_z1__csv soap_instantiate_xsd__integer


#define soap_new_z1__csv soap_new_xsd__integer


#define soap_put_z1__csv soap_put_xsd__integer


#define soap_write_z1__csv soap_write_xsd__integer


#define soap_get_z1__csv soap_get_xsd__integer


#define soap_read_z1__csv soap_read_xsd__integer

#endif
/* z1__id is a typedef synonym for xsd__integer */

#ifndef SOAP_TYPE_z1__id_DEFINED
#define SOAP_TYPE_z1__id_DEFINED

#define soap_default_z1__id(soap, a) soap_default_xsd__integer(soap, a)


#define soap_serialize_z1__id soap_serialize_xsd__integer


#define soap_z1__id2s soap_xsd__integer2s


#define soap_out_z1__id soap_out_xsd__integer


#define soap_s2z1__id soap_s2xsd__integer


#define soap_in_z1__id soap_in_xsd__integer


#define soap_instantiate_z1__id soap_instantiate_xsd__integer


#define soap_new_z1__id soap_new_xsd__integer


#define soap_put_z1__id soap_put_xsd__integer


#define soap_write_z1__id soap_write_xsd__integer


#define soap_get_z1__id soap_get_xsd__integer


#define soap_read_z1__id soap_read_xsd__integer

#endif

#ifndef SOAP_TYPE_z1__godzina_DEFINED
#define SOAP_TYPE_z1__godzina_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__godzina(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__godzina(struct soap*, const std::string *);

#define soap_z1__godzina2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__godzina(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2z1__godzina soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_z1__godzina(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_z1__godzina soap_instantiate_std__string


#define soap_new_z1__godzina soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__godzina(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_z1__godzina(struct soap *soap, std::string const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_z1__godzina(soap, p, "z1:godzina", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_z1__godzina(struct soap*, std::string *, const char*, const char*);

inline int soap_read_z1__godzina(struct soap *soap, std::string *p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get_z1__godzina(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__prowadzacy_DEFINED
#define SOAP_TYPE_z1__prowadzacy_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__prowadzacy(struct soap*, const char*, int, const z1__prowadzacy *, const char*);
SOAP_FMAC3 z1__prowadzacy * SOAP_FMAC4 soap_in_z1__prowadzacy(struct soap*, const char*, z1__prowadzacy *, const char*);
SOAP_FMAC1 z1__prowadzacy * SOAP_FMAC2 soap_instantiate_z1__prowadzacy(struct soap*, int, const char*, const char*, size_t*);

inline z1__prowadzacy * soap_new_z1__prowadzacy(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__prowadzacy(soap, n, NULL, NULL, NULL);
}

inline z1__prowadzacy * soap_new_req_z1__prowadzacy(
	struct soap *soap,
	const std::string& email,
	const std::string& haslo)
{	z1__prowadzacy *_p = soap_new_z1__prowadzacy(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->z1__prowadzacy::email = email;
		_p->z1__prowadzacy::haslo = haslo;
	}
	return _p;
}

inline z1__prowadzacy * soap_new_set_z1__prowadzacy(
	struct soap *soap,
	const std::string& email,
	const std::string& haslo)
{	z1__prowadzacy *_p = soap_new_z1__prowadzacy(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->z1__prowadzacy::email = email;
		_p->z1__prowadzacy::haslo = haslo;
	}
	return _p;
}

inline int soap_write_z1__prowadzacy(struct soap *soap, z1__prowadzacy const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "z1:prowadzacy", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 z1__prowadzacy * SOAP_FMAC4 soap_get_z1__prowadzacy(struct soap*, z1__prowadzacy *, const char*, const char*);

inline int soap_read_z1__prowadzacy(struct soap *soap, z1__prowadzacy *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_z1__prowadzacy(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__typ_DEFINED
#define SOAP_TYPE_z1__typ_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__typ(struct soap*, const char*, int, const z1__typ *, const char*);
SOAP_FMAC3 z1__typ * SOAP_FMAC4 soap_in_z1__typ(struct soap*, const char*, z1__typ *, const char*);
SOAP_FMAC1 z1__typ * SOAP_FMAC2 soap_instantiate_z1__typ(struct soap*, int, const char*, const char*, size_t*);

inline z1__typ * soap_new_z1__typ(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__typ(soap, n, NULL, NULL, NULL);
}

inline z1__typ * soap_new_req_z1__typ(
	struct soap *soap,
	const std::string& id,
	const std::string& opis)
{	z1__typ *_p = soap_new_z1__typ(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->z1__typ::id = id;
		_p->z1__typ::opis = opis;
	}
	return _p;
}

inline z1__typ * soap_new_set_z1__typ(
	struct soap *soap,
	const std::string& id,
	const std::string& opis)
{	z1__typ *_p = soap_new_z1__typ(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->z1__typ::id = id;
		_p->z1__typ::opis = opis;
	}
	return _p;
}

inline int soap_write_z1__typ(struct soap *soap, z1__typ const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "z1:typ", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 z1__typ * SOAP_FMAC4 soap_get_z1__typ(struct soap*, z1__typ *, const char*, const char*);

inline int soap_read_z1__typ(struct soap *soap, z1__typ *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_z1__typ(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__przedmiot_DEFINED
#define SOAP_TYPE_z1__przedmiot_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__przedmiot(struct soap*, const char*, int, const z1__przedmiot *, const char*);
SOAP_FMAC3 z1__przedmiot * SOAP_FMAC4 soap_in_z1__przedmiot(struct soap*, const char*, z1__przedmiot *, const char*);
SOAP_FMAC1 z1__przedmiot * SOAP_FMAC2 soap_instantiate_z1__przedmiot(struct soap*, int, const char*, const char*, size_t*);

inline z1__przedmiot * soap_new_z1__przedmiot(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__przedmiot(soap, n, NULL, NULL, NULL);
}

inline z1__przedmiot * soap_new_req_z1__przedmiot(
	struct soap *soap,
	const std::string& nazwa,
	const std::string& typ)
{	z1__przedmiot *_p = soap_new_z1__przedmiot(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->z1__przedmiot::nazwa = nazwa;
		_p->z1__przedmiot::typ = typ;
	}
	return _p;
}

inline z1__przedmiot * soap_new_set_z1__przedmiot(
	struct soap *soap,
	const std::string& nazwa,
	const std::string& typ)
{	z1__przedmiot *_p = soap_new_z1__przedmiot(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->z1__przedmiot::nazwa = nazwa;
		_p->z1__przedmiot::typ = typ;
	}
	return _p;
}

inline int soap_write_z1__przedmiot(struct soap *soap, z1__przedmiot const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "z1:przedmiot", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 z1__przedmiot * SOAP_FMAC4 soap_get_z1__przedmiot(struct soap*, z1__przedmiot *, const char*, const char*);

inline int soap_read_z1__przedmiot(struct soap *soap, z1__przedmiot *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_z1__przedmiot(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__sala_DEFINED
#define SOAP_TYPE_z1__sala_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__sala(struct soap*, const char*, int, const z1__sala *, const char*);
SOAP_FMAC3 z1__sala * SOAP_FMAC4 soap_in_z1__sala(struct soap*, const char*, z1__sala *, const char*);
SOAP_FMAC1 z1__sala * SOAP_FMAC2 soap_instantiate_z1__sala(struct soap*, int, const char*, const char*, size_t*);

inline z1__sala * soap_new_z1__sala(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__sala(soap, n, NULL, NULL, NULL);
}

inline z1__sala * soap_new_req_z1__sala(
	struct soap *soap,
	const std::string& numer,
	const std::string& maxMiejsc)
{	z1__sala *_p = soap_new_z1__sala(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->z1__sala::numer = numer;
		_p->z1__sala::maxMiejsc = maxMiejsc;
	}
	return _p;
}

inline z1__sala * soap_new_set_z1__sala(
	struct soap *soap,
	const std::string& numer,
	const std::string& maxMiejsc)
{	z1__sala *_p = soap_new_z1__sala(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->z1__sala::numer = numer;
		_p->z1__sala::maxMiejsc = maxMiejsc;
	}
	return _p;
}

inline int soap_write_z1__sala(struct soap *soap, z1__sala const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "z1:sala", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 z1__sala * SOAP_FMAC4 soap_get_z1__sala(struct soap*, z1__sala *, const char*, const char*);

inline int soap_read_z1__sala(struct soap *soap, z1__sala *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_z1__sala(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__termin_DEFINED
#define SOAP_TYPE_z1__termin_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__termin(struct soap*, const char*, int, const z1__termin *, const char*);
SOAP_FMAC3 z1__termin * SOAP_FMAC4 soap_in_z1__termin(struct soap*, const char*, z1__termin *, const char*);
SOAP_FMAC1 z1__termin * SOAP_FMAC2 soap_instantiate_z1__termin(struct soap*, int, const char*, const char*, size_t*);

inline z1__termin * soap_new_z1__termin(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__termin(soap, n, NULL, NULL, NULL);
}

inline z1__termin * soap_new_req_z1__termin(
	struct soap *soap,
	const std::string& dzien,
	const std::string& godzinaOd,
	const std::string& godzinaDo,
	int miejsca)
{	z1__termin *_p = soap_new_z1__termin(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->z1__termin::dzien = dzien;
		_p->z1__termin::godzinaOd = godzinaOd;
		_p->z1__termin::godzinaDo = godzinaDo;
		_p->z1__termin::miejsca = miejsca;
	}
	return _p;
}

inline z1__termin * soap_new_set_z1__termin(
	struct soap *soap,
	const std::string& dzien,
	const std::string& godzinaOd,
	const std::string& godzinaDo,
	int miejsca)
{	z1__termin *_p = soap_new_z1__termin(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->z1__termin::dzien = dzien;
		_p->z1__termin::godzinaOd = godzinaOd;
		_p->z1__termin::godzinaDo = godzinaDo;
		_p->z1__termin::miejsca = miejsca;
	}
	return _p;
}

inline int soap_write_z1__termin(struct soap *soap, z1__termin const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "z1:termin", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 z1__termin * SOAP_FMAC4 soap_get_z1__termin(struct soap*, z1__termin *, const char*, const char*);

inline int soap_read_z1__termin(struct soap *soap, z1__termin *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_z1__termin(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__temat_DEFINED
#define SOAP_TYPE_z1__temat_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__temat(struct soap*, const char*, int, const z1__temat *, const char*);
SOAP_FMAC3 z1__temat * SOAP_FMAC4 soap_in_z1__temat(struct soap*, const char*, z1__temat *, const char*);
SOAP_FMAC1 z1__temat * SOAP_FMAC2 soap_instantiate_z1__temat(struct soap*, int, const char*, const char*, size_t*);

inline z1__temat * soap_new_z1__temat(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__temat(soap, n, NULL, NULL, NULL);
}

inline z1__temat * soap_new_req_z1__temat(
	struct soap *soap,
	const std::string& temat,
	const std::string& opis,
	const std::string& miejsca,
	const std::string& wolneMiejsca)
{	z1__temat *_p = soap_new_z1__temat(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->z1__temat::temat = temat;
		_p->z1__temat::opis = opis;
		_p->z1__temat::miejsca = miejsca;
		_p->z1__temat::wolneMiejsca = wolneMiejsca;
	}
	return _p;
}

inline z1__temat * soap_new_set_z1__temat(
	struct soap *soap,
	const std::string& temat,
	const std::string& opis,
	const std::string& miejsca,
	const std::string& wolneMiejsca)
{	z1__temat *_p = soap_new_z1__temat(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->z1__temat::temat = temat;
		_p->z1__temat::opis = opis;
		_p->z1__temat::miejsca = miejsca;
		_p->z1__temat::wolneMiejsca = wolneMiejsca;
	}
	return _p;
}

inline int soap_write_z1__temat(struct soap *soap, z1__temat const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "z1:temat", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 z1__temat * SOAP_FMAC4 soap_get_z1__temat(struct soap*, z1__temat *, const char*, const char*);

inline int soap_read_z1__temat(struct soap *soap, z1__temat *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_z1__temat(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__student_DEFINED
#define SOAP_TYPE_z1__student_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__student(struct soap*, const char*, int, const z1__student *, const char*);
SOAP_FMAC3 z1__student * SOAP_FMAC4 soap_in_z1__student(struct soap*, const char*, z1__student *, const char*);
SOAP_FMAC1 z1__student * SOAP_FMAC2 soap_instantiate_z1__student(struct soap*, int, const char*, const char*, size_t*);

inline z1__student * soap_new_z1__student(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__student(soap, n, NULL, NULL, NULL);
}

inline z1__student * soap_new_req_z1__student(
	struct soap *soap,
	const std::string& imie,
	const std::string& nazwisko,
	const std::string& index)
{	z1__student *_p = soap_new_z1__student(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->z1__student::imie = imie;
		_p->z1__student::nazwisko = nazwisko;
		_p->z1__student::index = index;
	}
	return _p;
}

inline z1__student * soap_new_set_z1__student(
	struct soap *soap,
	const std::string& imie,
	const std::string& nazwisko,
	const std::string& index)
{	z1__student *_p = soap_new_z1__student(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->z1__student::imie = imie;
		_p->z1__student::nazwisko = nazwisko;
		_p->z1__student::index = index;
	}
	return _p;
}

inline int soap_write_z1__student(struct soap *soap, z1__student const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "z1:student", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 z1__student * SOAP_FMAC4 soap_get_z1__student(struct soap*, z1__student *, const char*, const char*);

inline int soap_read_z1__student(struct soap *soap, z1__student *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_z1__student(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__nonNegativeInteger_DEFINED
#define SOAP_TYPE_xsd__nonNegativeInteger_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__nonNegativeInteger(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__nonNegativeInteger(struct soap*, const std::string *);

#define soap_xsd__nonNegativeInteger2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__nonNegativeInteger(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__nonNegativeInteger soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__nonNegativeInteger(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__nonNegativeInteger soap_instantiate_std__string


#define soap_new_xsd__nonNegativeInteger soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__nonNegativeInteger(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__nonNegativeInteger(struct soap *soap, std::string const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__nonNegativeInteger(soap, p, "xsd:nonNegativeInteger", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__nonNegativeInteger(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__nonNegativeInteger(struct soap *soap, std::string *p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__nonNegativeInteger(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__integer_DEFINED
#define SOAP_TYPE_xsd__integer_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__integer(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__integer(struct soap*, const std::string *);

#define soap_xsd__integer2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__integer(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__integer soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__integer(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__integer soap_instantiate_std__string


#define soap_new_xsd__integer soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__integer(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__integer(struct soap *soap, std::string const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__integer(soap, p, "xsd:integer", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__integer(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__integer(struct soap *soap, std::string *p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__integer(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_std__string(soap, p, "string", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{	if (p)
	{	soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{	if (p)
	{	soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{	if (p)
	{	soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{	if (p)
	{	soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{	if (p)
	{	soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE_z1__eksportujPrzedmiot_DEFINED
#define SOAP_TYPE_z1__eksportujPrzedmiot_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__eksportujPrzedmiot(struct soap*, struct z1__eksportujPrzedmiot *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__eksportujPrzedmiot(struct soap*, const struct z1__eksportujPrzedmiot *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__eksportujPrzedmiot(struct soap*, const char*, int, const struct z1__eksportujPrzedmiot *, const char*);
SOAP_FMAC3 struct z1__eksportujPrzedmiot * SOAP_FMAC4 soap_in_z1__eksportujPrzedmiot(struct soap*, const char*, struct z1__eksportujPrzedmiot *, const char*);
SOAP_FMAC1 struct z1__eksportujPrzedmiot * SOAP_FMAC2 soap_instantiate_z1__eksportujPrzedmiot(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__eksportujPrzedmiot * soap_new_z1__eksportujPrzedmiot(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__eksportujPrzedmiot(soap, n, NULL, NULL, NULL);
}

inline struct z1__eksportujPrzedmiot * soap_new_req_z1__eksportujPrzedmiot(
	struct soap *soap,
	const std::string& ID)
{	struct z1__eksportujPrzedmiot *_p = soap_new_z1__eksportujPrzedmiot(soap);
	if (_p)
	{	soap_default_z1__eksportujPrzedmiot(soap, _p);
		_p->ID = ID;
	}
	return _p;
}

inline struct z1__eksportujPrzedmiot * soap_new_set_z1__eksportujPrzedmiot(
	struct soap *soap,
	const std::string& ID)
{	struct z1__eksportujPrzedmiot *_p = soap_new_z1__eksportujPrzedmiot(soap);
	if (_p)
	{	soap_default_z1__eksportujPrzedmiot(soap, _p);
		_p->ID = ID;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__eksportujPrzedmiot(struct soap*, const struct z1__eksportujPrzedmiot *, const char*, const char*);

inline int soap_write_z1__eksportujPrzedmiot(struct soap *soap, struct z1__eksportujPrzedmiot const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__eksportujPrzedmiot(soap, p), 0) || soap_put_z1__eksportujPrzedmiot(soap, p, "z1:eksportujPrzedmiot", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__eksportujPrzedmiot * SOAP_FMAC4 soap_get_z1__eksportujPrzedmiot(struct soap*, struct z1__eksportujPrzedmiot *, const char*, const char*);

inline int soap_read_z1__eksportujPrzedmiot(struct soap *soap, struct z1__eksportujPrzedmiot *p)
{	if (p)
	{	soap_default_z1__eksportujPrzedmiot(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__eksportujPrzedmiot(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__eksportujPrzedmiotResponse_DEFINED
#define SOAP_TYPE_z1__eksportujPrzedmiotResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__eksportujPrzedmiotResponse(struct soap*, struct z1__eksportujPrzedmiotResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__eksportujPrzedmiotResponse(struct soap*, const struct z1__eksportujPrzedmiotResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__eksportujPrzedmiotResponse(struct soap*, const char*, int, const struct z1__eksportujPrzedmiotResponse *, const char*);
SOAP_FMAC3 struct z1__eksportujPrzedmiotResponse * SOAP_FMAC4 soap_in_z1__eksportujPrzedmiotResponse(struct soap*, const char*, struct z1__eksportujPrzedmiotResponse *, const char*);
SOAP_FMAC1 struct z1__eksportujPrzedmiotResponse * SOAP_FMAC2 soap_instantiate_z1__eksportujPrzedmiotResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__eksportujPrzedmiotResponse * soap_new_z1__eksportujPrzedmiotResponse(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__eksportujPrzedmiotResponse(soap, n, NULL, NULL, NULL);
}

inline struct z1__eksportujPrzedmiotResponse * soap_new_req_z1__eksportujPrzedmiotResponse(
	struct soap *soap,
	const std::string& nazwa,
	const std::string& plik)
{	struct z1__eksportujPrzedmiotResponse *_p = soap_new_z1__eksportujPrzedmiotResponse(soap);
	if (_p)
	{	soap_default_z1__eksportujPrzedmiotResponse(soap, _p);
		_p->nazwa = nazwa;
		_p->plik = plik;
	}
	return _p;
}

inline struct z1__eksportujPrzedmiotResponse * soap_new_set_z1__eksportujPrzedmiotResponse(
	struct soap *soap,
	const std::string& nazwa,
	const std::string& plik)
{	struct z1__eksportujPrzedmiotResponse *_p = soap_new_z1__eksportujPrzedmiotResponse(soap);
	if (_p)
	{	soap_default_z1__eksportujPrzedmiotResponse(soap, _p);
		_p->nazwa = nazwa;
		_p->plik = plik;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__eksportujPrzedmiotResponse(struct soap*, const struct z1__eksportujPrzedmiotResponse *, const char*, const char*);

inline int soap_write_z1__eksportujPrzedmiotResponse(struct soap *soap, struct z1__eksportujPrzedmiotResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__eksportujPrzedmiotResponse(soap, p), 0) || soap_put_z1__eksportujPrzedmiotResponse(soap, p, "z1:eksportujPrzedmiotResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__eksportujPrzedmiotResponse * SOAP_FMAC4 soap_get_z1__eksportujPrzedmiotResponse(struct soap*, struct z1__eksportujPrzedmiotResponse *, const char*, const char*);

inline int soap_read_z1__eksportujPrzedmiotResponse(struct soap *soap, struct z1__eksportujPrzedmiotResponse *p)
{	if (p)
	{	soap_default_z1__eksportujPrzedmiotResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__eksportujPrzedmiotResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__eksportujTermin_DEFINED
#define SOAP_TYPE_z1__eksportujTermin_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__eksportujTermin(struct soap*, struct z1__eksportujTermin *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__eksportujTermin(struct soap*, const struct z1__eksportujTermin *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__eksportujTermin(struct soap*, const char*, int, const struct z1__eksportujTermin *, const char*);
SOAP_FMAC3 struct z1__eksportujTermin * SOAP_FMAC4 soap_in_z1__eksportujTermin(struct soap*, const char*, struct z1__eksportujTermin *, const char*);
SOAP_FMAC1 struct z1__eksportujTermin * SOAP_FMAC2 soap_instantiate_z1__eksportujTermin(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__eksportujTermin * soap_new_z1__eksportujTermin(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__eksportujTermin(soap, n, NULL, NULL, NULL);
}

inline struct z1__eksportujTermin * soap_new_req_z1__eksportujTermin(
	struct soap *soap,
	const std::string& ID)
{	struct z1__eksportujTermin *_p = soap_new_z1__eksportujTermin(soap);
	if (_p)
	{	soap_default_z1__eksportujTermin(soap, _p);
		_p->ID = ID;
	}
	return _p;
}

inline struct z1__eksportujTermin * soap_new_set_z1__eksportujTermin(
	struct soap *soap,
	const std::string& ID)
{	struct z1__eksportujTermin *_p = soap_new_z1__eksportujTermin(soap);
	if (_p)
	{	soap_default_z1__eksportujTermin(soap, _p);
		_p->ID = ID;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__eksportujTermin(struct soap*, const struct z1__eksportujTermin *, const char*, const char*);

inline int soap_write_z1__eksportujTermin(struct soap *soap, struct z1__eksportujTermin const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__eksportujTermin(soap, p), 0) || soap_put_z1__eksportujTermin(soap, p, "z1:eksportujTermin", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__eksportujTermin * SOAP_FMAC4 soap_get_z1__eksportujTermin(struct soap*, struct z1__eksportujTermin *, const char*, const char*);

inline int soap_read_z1__eksportujTermin(struct soap *soap, struct z1__eksportujTermin *p)
{	if (p)
	{	soap_default_z1__eksportujTermin(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__eksportujTermin(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__eksportujTerminResponse_DEFINED
#define SOAP_TYPE_z1__eksportujTerminResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__eksportujTerminResponse(struct soap*, struct z1__eksportujTerminResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__eksportujTerminResponse(struct soap*, const struct z1__eksportujTerminResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__eksportujTerminResponse(struct soap*, const char*, int, const struct z1__eksportujTerminResponse *, const char*);
SOAP_FMAC3 struct z1__eksportujTerminResponse * SOAP_FMAC4 soap_in_z1__eksportujTerminResponse(struct soap*, const char*, struct z1__eksportujTerminResponse *, const char*);
SOAP_FMAC1 struct z1__eksportujTerminResponse * SOAP_FMAC2 soap_instantiate_z1__eksportujTerminResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__eksportujTerminResponse * soap_new_z1__eksportujTerminResponse(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__eksportujTerminResponse(soap, n, NULL, NULL, NULL);
}

inline struct z1__eksportujTerminResponse * soap_new_req_z1__eksportujTerminResponse(
	struct soap *soap,
	const std::string& nazwa,
	const std::string& plik)
{	struct z1__eksportujTerminResponse *_p = soap_new_z1__eksportujTerminResponse(soap);
	if (_p)
	{	soap_default_z1__eksportujTerminResponse(soap, _p);
		_p->nazwa = nazwa;
		_p->plik = plik;
	}
	return _p;
}

inline struct z1__eksportujTerminResponse * soap_new_set_z1__eksportujTerminResponse(
	struct soap *soap,
	const std::string& nazwa,
	const std::string& plik)
{	struct z1__eksportujTerminResponse *_p = soap_new_z1__eksportujTerminResponse(soap);
	if (_p)
	{	soap_default_z1__eksportujTerminResponse(soap, _p);
		_p->nazwa = nazwa;
		_p->plik = plik;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__eksportujTerminResponse(struct soap*, const struct z1__eksportujTerminResponse *, const char*, const char*);

inline int soap_write_z1__eksportujTerminResponse(struct soap *soap, struct z1__eksportujTerminResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__eksportujTerminResponse(soap, p), 0) || soap_put_z1__eksportujTerminResponse(soap, p, "z1:eksportujTerminResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__eksportujTerminResponse * SOAP_FMAC4 soap_get_z1__eksportujTerminResponse(struct soap*, struct z1__eksportujTerminResponse *, const char*, const char*);

inline int soap_read_z1__eksportujTerminResponse(struct soap *soap, struct z1__eksportujTerminResponse *p)
{	if (p)
	{	soap_default_z1__eksportujTerminResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__eksportujTerminResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__eksportujProjekt_DEFINED
#define SOAP_TYPE_z1__eksportujProjekt_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__eksportujProjekt(struct soap*, struct z1__eksportujProjekt *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__eksportujProjekt(struct soap*, const struct z1__eksportujProjekt *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__eksportujProjekt(struct soap*, const char*, int, const struct z1__eksportujProjekt *, const char*);
SOAP_FMAC3 struct z1__eksportujProjekt * SOAP_FMAC4 soap_in_z1__eksportujProjekt(struct soap*, const char*, struct z1__eksportujProjekt *, const char*);
SOAP_FMAC1 struct z1__eksportujProjekt * SOAP_FMAC2 soap_instantiate_z1__eksportujProjekt(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__eksportujProjekt * soap_new_z1__eksportujProjekt(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__eksportujProjekt(soap, n, NULL, NULL, NULL);
}

inline struct z1__eksportujProjekt * soap_new_req_z1__eksportujProjekt(
	struct soap *soap,
	const std::string& ID)
{	struct z1__eksportujProjekt *_p = soap_new_z1__eksportujProjekt(soap);
	if (_p)
	{	soap_default_z1__eksportujProjekt(soap, _p);
		_p->ID = ID;
	}
	return _p;
}

inline struct z1__eksportujProjekt * soap_new_set_z1__eksportujProjekt(
	struct soap *soap,
	const std::string& ID)
{	struct z1__eksportujProjekt *_p = soap_new_z1__eksportujProjekt(soap);
	if (_p)
	{	soap_default_z1__eksportujProjekt(soap, _p);
		_p->ID = ID;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__eksportujProjekt(struct soap*, const struct z1__eksportujProjekt *, const char*, const char*);

inline int soap_write_z1__eksportujProjekt(struct soap *soap, struct z1__eksportujProjekt const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__eksportujProjekt(soap, p), 0) || soap_put_z1__eksportujProjekt(soap, p, "z1:eksportujProjekt", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__eksportujProjekt * SOAP_FMAC4 soap_get_z1__eksportujProjekt(struct soap*, struct z1__eksportujProjekt *, const char*, const char*);

inline int soap_read_z1__eksportujProjekt(struct soap *soap, struct z1__eksportujProjekt *p)
{	if (p)
	{	soap_default_z1__eksportujProjekt(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__eksportujProjekt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__eksportujProjektResponse_DEFINED
#define SOAP_TYPE_z1__eksportujProjektResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__eksportujProjektResponse(struct soap*, struct z1__eksportujProjektResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__eksportujProjektResponse(struct soap*, const struct z1__eksportujProjektResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__eksportujProjektResponse(struct soap*, const char*, int, const struct z1__eksportujProjektResponse *, const char*);
SOAP_FMAC3 struct z1__eksportujProjektResponse * SOAP_FMAC4 soap_in_z1__eksportujProjektResponse(struct soap*, const char*, struct z1__eksportujProjektResponse *, const char*);
SOAP_FMAC1 struct z1__eksportujProjektResponse * SOAP_FMAC2 soap_instantiate_z1__eksportujProjektResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__eksportujProjektResponse * soap_new_z1__eksportujProjektResponse(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__eksportujProjektResponse(soap, n, NULL, NULL, NULL);
}

inline struct z1__eksportujProjektResponse * soap_new_req_z1__eksportujProjektResponse(
	struct soap *soap,
	const std::string& nazwa,
	const std::string& plik)
{	struct z1__eksportujProjektResponse *_p = soap_new_z1__eksportujProjektResponse(soap);
	if (_p)
	{	soap_default_z1__eksportujProjektResponse(soap, _p);
		_p->nazwa = nazwa;
		_p->plik = plik;
	}
	return _p;
}

inline struct z1__eksportujProjektResponse * soap_new_set_z1__eksportujProjektResponse(
	struct soap *soap,
	const std::string& nazwa,
	const std::string& plik)
{	struct z1__eksportujProjektResponse *_p = soap_new_z1__eksportujProjektResponse(soap);
	if (_p)
	{	soap_default_z1__eksportujProjektResponse(soap, _p);
		_p->nazwa = nazwa;
		_p->plik = plik;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__eksportujProjektResponse(struct soap*, const struct z1__eksportujProjektResponse *, const char*, const char*);

inline int soap_write_z1__eksportujProjektResponse(struct soap *soap, struct z1__eksportujProjektResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__eksportujProjektResponse(soap, p), 0) || soap_put_z1__eksportujProjektResponse(soap, p, "z1:eksportujProjektResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__eksportujProjektResponse * SOAP_FMAC4 soap_get_z1__eksportujProjektResponse(struct soap*, struct z1__eksportujProjektResponse *, const char*, const char*);

inline int soap_read_z1__eksportujProjektResponse(struct soap *soap, struct z1__eksportujProjektResponse *p)
{	if (p)
	{	soap_default_z1__eksportujProjektResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__eksportujProjektResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__dodajTermin_DEFINED
#define SOAP_TYPE_z1__dodajTermin_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__dodajTermin(struct soap*, struct z1__dodajTermin *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__dodajTermin(struct soap*, const struct z1__dodajTermin *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__dodajTermin(struct soap*, const char*, int, const struct z1__dodajTermin *, const char*);
SOAP_FMAC3 struct z1__dodajTermin * SOAP_FMAC4 soap_in_z1__dodajTermin(struct soap*, const char*, struct z1__dodajTermin *, const char*);
SOAP_FMAC1 struct z1__dodajTermin * SOAP_FMAC2 soap_instantiate_z1__dodajTermin(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__dodajTermin * soap_new_z1__dodajTermin(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__dodajTermin(soap, n, NULL, NULL, NULL);
}

inline struct z1__dodajTermin * soap_new_req_z1__dodajTermin(
	struct soap *soap,
	const std::string& przedmiotID,
	const std::string& salaID)
{	struct z1__dodajTermin *_p = soap_new_z1__dodajTermin(soap);
	if (_p)
	{	soap_default_z1__dodajTermin(soap, _p);
		_p->przedmiotID = przedmiotID;
		_p->salaID = salaID;
	}
	return _p;
}

inline struct z1__dodajTermin * soap_new_set_z1__dodajTermin(
	struct soap *soap,
	const std::string& przedmiotID,
	const std::string& salaID,
	z1__termin *termin)
{	struct z1__dodajTermin *_p = soap_new_z1__dodajTermin(soap);
	if (_p)
	{	soap_default_z1__dodajTermin(soap, _p);
		_p->przedmiotID = przedmiotID;
		_p->salaID = salaID;
		_p->termin = termin;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__dodajTermin(struct soap*, const struct z1__dodajTermin *, const char*, const char*);

inline int soap_write_z1__dodajTermin(struct soap *soap, struct z1__dodajTermin const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__dodajTermin(soap, p), 0) || soap_put_z1__dodajTermin(soap, p, "z1:dodajTermin", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__dodajTermin * SOAP_FMAC4 soap_get_z1__dodajTermin(struct soap*, struct z1__dodajTermin *, const char*, const char*);

inline int soap_read_z1__dodajTermin(struct soap *soap, struct z1__dodajTermin *p)
{	if (p)
	{	soap_default_z1__dodajTermin(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__dodajTermin(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__dodajTerminResponse_DEFINED
#define SOAP_TYPE_z1__dodajTerminResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__dodajTerminResponse(struct soap*, struct z1__dodajTerminResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__dodajTerminResponse(struct soap*, const struct z1__dodajTerminResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__dodajTerminResponse(struct soap*, const char*, int, const struct z1__dodajTerminResponse *, const char*);
SOAP_FMAC3 struct z1__dodajTerminResponse * SOAP_FMAC4 soap_in_z1__dodajTerminResponse(struct soap*, const char*, struct z1__dodajTerminResponse *, const char*);
SOAP_FMAC1 struct z1__dodajTerminResponse * SOAP_FMAC2 soap_instantiate_z1__dodajTerminResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__dodajTerminResponse * soap_new_z1__dodajTerminResponse(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__dodajTerminResponse(soap, n, NULL, NULL, NULL);
}

inline struct z1__dodajTerminResponse * soap_new_req_z1__dodajTerminResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__dodajTerminResponse *_p = soap_new_z1__dodajTerminResponse(soap);
	if (_p)
	{	soap_default_z1__dodajTerminResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}

inline struct z1__dodajTerminResponse * soap_new_set_z1__dodajTerminResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__dodajTerminResponse *_p = soap_new_z1__dodajTerminResponse(soap);
	if (_p)
	{	soap_default_z1__dodajTerminResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__dodajTerminResponse(struct soap*, const struct z1__dodajTerminResponse *, const char*, const char*);

inline int soap_write_z1__dodajTerminResponse(struct soap *soap, struct z1__dodajTerminResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__dodajTerminResponse(soap, p), 0) || soap_put_z1__dodajTerminResponse(soap, p, "z1:dodajTerminResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__dodajTerminResponse * SOAP_FMAC4 soap_get_z1__dodajTerminResponse(struct soap*, struct z1__dodajTerminResponse *, const char*, const char*);

inline int soap_read_z1__dodajTerminResponse(struct soap *soap, struct z1__dodajTerminResponse *p)
{	if (p)
	{	soap_default_z1__dodajTerminResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__dodajTerminResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__zapiszTermin_DEFINED
#define SOAP_TYPE_z1__zapiszTermin_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__zapiszTermin(struct soap*, struct z1__zapiszTermin *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__zapiszTermin(struct soap*, const struct z1__zapiszTermin *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__zapiszTermin(struct soap*, const char*, int, const struct z1__zapiszTermin *, const char*);
SOAP_FMAC3 struct z1__zapiszTermin * SOAP_FMAC4 soap_in_z1__zapiszTermin(struct soap*, const char*, struct z1__zapiszTermin *, const char*);
SOAP_FMAC1 struct z1__zapiszTermin * SOAP_FMAC2 soap_instantiate_z1__zapiszTermin(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__zapiszTermin * soap_new_z1__zapiszTermin(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__zapiszTermin(soap, n, NULL, NULL, NULL);
}

inline struct z1__zapiszTermin * soap_new_req_z1__zapiszTermin(
	struct soap *soap,
	const std::string& projektID,
	const std::string& zapisywanyID)
{	struct z1__zapiszTermin *_p = soap_new_z1__zapiszTermin(soap);
	if (_p)
	{	soap_default_z1__zapiszTermin(soap, _p);
		_p->projektID = projektID;
		_p->zapisywanyID = zapisywanyID;
	}
	return _p;
}

inline struct z1__zapiszTermin * soap_new_set_z1__zapiszTermin(
	struct soap *soap,
	const std::string& projektID,
	const std::string& zapisywanyID)
{	struct z1__zapiszTermin *_p = soap_new_z1__zapiszTermin(soap);
	if (_p)
	{	soap_default_z1__zapiszTermin(soap, _p);
		_p->projektID = projektID;
		_p->zapisywanyID = zapisywanyID;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__zapiszTermin(struct soap*, const struct z1__zapiszTermin *, const char*, const char*);

inline int soap_write_z1__zapiszTermin(struct soap *soap, struct z1__zapiszTermin const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__zapiszTermin(soap, p), 0) || soap_put_z1__zapiszTermin(soap, p, "z1:zapiszTermin", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__zapiszTermin * SOAP_FMAC4 soap_get_z1__zapiszTermin(struct soap*, struct z1__zapiszTermin *, const char*, const char*);

inline int soap_read_z1__zapiszTermin(struct soap *soap, struct z1__zapiszTermin *p)
{	if (p)
	{	soap_default_z1__zapiszTermin(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__zapiszTermin(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__zapiszTerminResponse_DEFINED
#define SOAP_TYPE_z1__zapiszTerminResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__zapiszTerminResponse(struct soap*, struct z1__zapiszTerminResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__zapiszTerminResponse(struct soap*, const struct z1__zapiszTerminResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__zapiszTerminResponse(struct soap*, const char*, int, const struct z1__zapiszTerminResponse *, const char*);
SOAP_FMAC3 struct z1__zapiszTerminResponse * SOAP_FMAC4 soap_in_z1__zapiszTerminResponse(struct soap*, const char*, struct z1__zapiszTerminResponse *, const char*);
SOAP_FMAC1 struct z1__zapiszTerminResponse * SOAP_FMAC2 soap_instantiate_z1__zapiszTerminResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__zapiszTerminResponse * soap_new_z1__zapiszTerminResponse(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__zapiszTerminResponse(soap, n, NULL, NULL, NULL);
}

inline struct z1__zapiszTerminResponse * soap_new_req_z1__zapiszTerminResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__zapiszTerminResponse *_p = soap_new_z1__zapiszTerminResponse(soap);
	if (_p)
	{	soap_default_z1__zapiszTerminResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}

inline struct z1__zapiszTerminResponse * soap_new_set_z1__zapiszTerminResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__zapiszTerminResponse *_p = soap_new_z1__zapiszTerminResponse(soap);
	if (_p)
	{	soap_default_z1__zapiszTerminResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__zapiszTerminResponse(struct soap*, const struct z1__zapiszTerminResponse *, const char*, const char*);

inline int soap_write_z1__zapiszTerminResponse(struct soap *soap, struct z1__zapiszTerminResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__zapiszTerminResponse(soap, p), 0) || soap_put_z1__zapiszTerminResponse(soap, p, "z1:zapiszTerminResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__zapiszTerminResponse * SOAP_FMAC4 soap_get_z1__zapiszTerminResponse(struct soap*, struct z1__zapiszTerminResponse *, const char*, const char*);

inline int soap_read_z1__zapiszTerminResponse(struct soap *soap, struct z1__zapiszTerminResponse *p)
{	if (p)
	{	soap_default_z1__zapiszTerminResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__zapiszTerminResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__dodajProjekt_DEFINED
#define SOAP_TYPE_z1__dodajProjekt_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__dodajProjekt(struct soap*, struct z1__dodajProjekt *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__dodajProjekt(struct soap*, const struct z1__dodajProjekt *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__dodajProjekt(struct soap*, const char*, int, const struct z1__dodajProjekt *, const char*);
SOAP_FMAC3 struct z1__dodajProjekt * SOAP_FMAC4 soap_in_z1__dodajProjekt(struct soap*, const char*, struct z1__dodajProjekt *, const char*);
SOAP_FMAC1 struct z1__dodajProjekt * SOAP_FMAC2 soap_instantiate_z1__dodajProjekt(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__dodajProjekt * soap_new_z1__dodajProjekt(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__dodajProjekt(soap, n, NULL, NULL, NULL);
}

inline struct z1__dodajProjekt * soap_new_req_z1__dodajProjekt(
	struct soap *soap,
	const std::string& przedmiotID)
{	struct z1__dodajProjekt *_p = soap_new_z1__dodajProjekt(soap);
	if (_p)
	{	soap_default_z1__dodajProjekt(soap, _p);
		_p->przedmiotID = przedmiotID;
	}
	return _p;
}

inline struct z1__dodajProjekt * soap_new_set_z1__dodajProjekt(
	struct soap *soap,
	const std::string& przedmiotID,
	z1__temat *projekt)
{	struct z1__dodajProjekt *_p = soap_new_z1__dodajProjekt(soap);
	if (_p)
	{	soap_default_z1__dodajProjekt(soap, _p);
		_p->przedmiotID = przedmiotID;
		_p->projekt = projekt;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__dodajProjekt(struct soap*, const struct z1__dodajProjekt *, const char*, const char*);

inline int soap_write_z1__dodajProjekt(struct soap *soap, struct z1__dodajProjekt const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__dodajProjekt(soap, p), 0) || soap_put_z1__dodajProjekt(soap, p, "z1:dodajProjekt", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__dodajProjekt * SOAP_FMAC4 soap_get_z1__dodajProjekt(struct soap*, struct z1__dodajProjekt *, const char*, const char*);

inline int soap_read_z1__dodajProjekt(struct soap *soap, struct z1__dodajProjekt *p)
{	if (p)
	{	soap_default_z1__dodajProjekt(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__dodajProjekt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__dodajProjektResponse_DEFINED
#define SOAP_TYPE_z1__dodajProjektResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__dodajProjektResponse(struct soap*, struct z1__dodajProjektResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__dodajProjektResponse(struct soap*, const struct z1__dodajProjektResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__dodajProjektResponse(struct soap*, const char*, int, const struct z1__dodajProjektResponse *, const char*);
SOAP_FMAC3 struct z1__dodajProjektResponse * SOAP_FMAC4 soap_in_z1__dodajProjektResponse(struct soap*, const char*, struct z1__dodajProjektResponse *, const char*);
SOAP_FMAC1 struct z1__dodajProjektResponse * SOAP_FMAC2 soap_instantiate_z1__dodajProjektResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__dodajProjektResponse * soap_new_z1__dodajProjektResponse(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__dodajProjektResponse(soap, n, NULL, NULL, NULL);
}

inline struct z1__dodajProjektResponse * soap_new_req_z1__dodajProjektResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__dodajProjektResponse *_p = soap_new_z1__dodajProjektResponse(soap);
	if (_p)
	{	soap_default_z1__dodajProjektResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}

inline struct z1__dodajProjektResponse * soap_new_set_z1__dodajProjektResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__dodajProjektResponse *_p = soap_new_z1__dodajProjektResponse(soap);
	if (_p)
	{	soap_default_z1__dodajProjektResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__dodajProjektResponse(struct soap*, const struct z1__dodajProjektResponse *, const char*, const char*);

inline int soap_write_z1__dodajProjektResponse(struct soap *soap, struct z1__dodajProjektResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__dodajProjektResponse(soap, p), 0) || soap_put_z1__dodajProjektResponse(soap, p, "z1:dodajProjektResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__dodajProjektResponse * SOAP_FMAC4 soap_get_z1__dodajProjektResponse(struct soap*, struct z1__dodajProjektResponse *, const char*, const char*);

inline int soap_read_z1__dodajProjektResponse(struct soap *soap, struct z1__dodajProjektResponse *p)
{	if (p)
	{	soap_default_z1__dodajProjektResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__dodajProjektResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__zapiszProjekt_DEFINED
#define SOAP_TYPE_z1__zapiszProjekt_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__zapiszProjekt(struct soap*, struct z1__zapiszProjekt *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__zapiszProjekt(struct soap*, const struct z1__zapiszProjekt *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__zapiszProjekt(struct soap*, const char*, int, const struct z1__zapiszProjekt *, const char*);
SOAP_FMAC3 struct z1__zapiszProjekt * SOAP_FMAC4 soap_in_z1__zapiszProjekt(struct soap*, const char*, struct z1__zapiszProjekt *, const char*);
SOAP_FMAC1 struct z1__zapiszProjekt * SOAP_FMAC2 soap_instantiate_z1__zapiszProjekt(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__zapiszProjekt * soap_new_z1__zapiszProjekt(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__zapiszProjekt(soap, n, NULL, NULL, NULL);
}

inline struct z1__zapiszProjekt * soap_new_req_z1__zapiszProjekt(
	struct soap *soap,
	const std::string& projektID,
	const std::string& zapisywanyID)
{	struct z1__zapiszProjekt *_p = soap_new_z1__zapiszProjekt(soap);
	if (_p)
	{	soap_default_z1__zapiszProjekt(soap, _p);
		_p->projektID = projektID;
		_p->zapisywanyID = zapisywanyID;
	}
	return _p;
}

inline struct z1__zapiszProjekt * soap_new_set_z1__zapiszProjekt(
	struct soap *soap,
	const std::string& projektID,
	const std::string& zapisywanyID)
{	struct z1__zapiszProjekt *_p = soap_new_z1__zapiszProjekt(soap);
	if (_p)
	{	soap_default_z1__zapiszProjekt(soap, _p);
		_p->projektID = projektID;
		_p->zapisywanyID = zapisywanyID;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__zapiszProjekt(struct soap*, const struct z1__zapiszProjekt *, const char*, const char*);

inline int soap_write_z1__zapiszProjekt(struct soap *soap, struct z1__zapiszProjekt const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__zapiszProjekt(soap, p), 0) || soap_put_z1__zapiszProjekt(soap, p, "z1:zapiszProjekt", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__zapiszProjekt * SOAP_FMAC4 soap_get_z1__zapiszProjekt(struct soap*, struct z1__zapiszProjekt *, const char*, const char*);

inline int soap_read_z1__zapiszProjekt(struct soap *soap, struct z1__zapiszProjekt *p)
{	if (p)
	{	soap_default_z1__zapiszProjekt(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__zapiszProjekt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__zapiszProjektResponse_DEFINED
#define SOAP_TYPE_z1__zapiszProjektResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__zapiszProjektResponse(struct soap*, struct z1__zapiszProjektResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__zapiszProjektResponse(struct soap*, const struct z1__zapiszProjektResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__zapiszProjektResponse(struct soap*, const char*, int, const struct z1__zapiszProjektResponse *, const char*);
SOAP_FMAC3 struct z1__zapiszProjektResponse * SOAP_FMAC4 soap_in_z1__zapiszProjektResponse(struct soap*, const char*, struct z1__zapiszProjektResponse *, const char*);
SOAP_FMAC1 struct z1__zapiszProjektResponse * SOAP_FMAC2 soap_instantiate_z1__zapiszProjektResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__zapiszProjektResponse * soap_new_z1__zapiszProjektResponse(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__zapiszProjektResponse(soap, n, NULL, NULL, NULL);
}

inline struct z1__zapiszProjektResponse * soap_new_req_z1__zapiszProjektResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__zapiszProjektResponse *_p = soap_new_z1__zapiszProjektResponse(soap);
	if (_p)
	{	soap_default_z1__zapiszProjektResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}

inline struct z1__zapiszProjektResponse * soap_new_set_z1__zapiszProjektResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__zapiszProjektResponse *_p = soap_new_z1__zapiszProjektResponse(soap);
	if (_p)
	{	soap_default_z1__zapiszProjektResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__zapiszProjektResponse(struct soap*, const struct z1__zapiszProjektResponse *, const char*, const char*);

inline int soap_write_z1__zapiszProjektResponse(struct soap *soap, struct z1__zapiszProjektResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__zapiszProjektResponse(soap, p), 0) || soap_put_z1__zapiszProjektResponse(soap, p, "z1:zapiszProjektResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__zapiszProjektResponse * SOAP_FMAC4 soap_get_z1__zapiszProjektResponse(struct soap*, struct z1__zapiszProjektResponse *, const char*, const char*);

inline int soap_read_z1__zapiszProjektResponse(struct soap *soap, struct z1__zapiszProjektResponse *p)
{	if (p)
	{	soap_default_z1__zapiszProjektResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__zapiszProjektResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerToz1__termin_DEFINED
#define SOAP_TYPE_PointerToz1__termin_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToz1__termin(struct soap*, z1__termin *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToz1__termin(struct soap*, const char *, int, z1__termin *const*, const char *);
SOAP_FMAC3 z1__termin ** SOAP_FMAC4 soap_in_PointerToz1__termin(struct soap*, const char*, z1__termin **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToz1__termin(struct soap*, z1__termin *const*, const char*, const char*);
SOAP_FMAC3 z1__termin ** SOAP_FMAC4 soap_get_PointerToz1__termin(struct soap*, z1__termin **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToz1__temat_DEFINED
#define SOAP_TYPE_PointerToz1__temat_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToz1__temat(struct soap*, z1__temat *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToz1__temat(struct soap*, const char *, int, z1__temat *const*, const char *);
SOAP_FMAC3 z1__temat ** SOAP_FMAC4 soap_in_PointerToz1__temat(struct soap*, const char*, z1__temat **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToz1__temat(struct soap*, z1__temat *const*, const char*, const char*);
SOAP_FMAC3 z1__temat ** SOAP_FMAC4 soap_get_PointerToz1__temat(struct soap*, z1__temat **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put__QName(soap, p, "QName", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_string(soap, p, "string", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

/* End of soapH.h */
