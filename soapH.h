/* soapH.h
   Generated by gSOAP 2.8.30 for zapisy.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_byte(soap, p, "byte", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_int(soap, p, "int", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_bool_DEFINED
#define SOAP_TYPE_bool_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap*, bool *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

inline bool * soap_new_bool(struct soap *soap, int n = -1)
{	return static_cast<bool *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(bool)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

inline int soap_write_bool(struct soap *soap, bool const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_bool(soap, p, "boolean", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

inline int soap_read_bool(struct soap *soap, bool *p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get_bool(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__wynik_DEFINED
#define SOAP_TYPE_z1__wynik_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__wynik(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__wynik(struct soap*, const std::string *);

#define soap_z1__wynik2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__wynik(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2z1__wynik soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_z1__wynik(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_z1__wynik soap_instantiate_std__string


#define soap_new_z1__wynik soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__wynik(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_z1__wynik(struct soap *soap, std::string const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_z1__wynik(soap, p, "z1:wynik", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_z1__wynik(struct soap*, std::string *, const char*, const char*);

inline int soap_read_z1__wynik(struct soap *soap, std::string *p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get_z1__wynik(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__nrIndex_DEFINED
#define SOAP_TYPE_z1__nrIndex_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__nrIndex(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__nrIndex(struct soap*, const std::string *);

#define soap_z1__nrIndex2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__nrIndex(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2z1__nrIndex soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_z1__nrIndex(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_z1__nrIndex soap_instantiate_std__string


#define soap_new_z1__nrIndex soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__nrIndex(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_z1__nrIndex(struct soap *soap, std::string const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_z1__nrIndex(soap, p, "z1:nrIndex", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_z1__nrIndex(struct soap*, std::string *, const char*, const char*);

inline int soap_read_z1__nrIndex(struct soap *soap, std::string *p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get_z1__nrIndex(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__filename_DEFINED
#define SOAP_TYPE_z1__filename_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__filename(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__filename(struct soap*, const std::string *);

#define soap_z1__filename2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__filename(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2z1__filename soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_z1__filename(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_z1__filename soap_instantiate_std__string


#define soap_new_z1__filename soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__filename(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_z1__filename(struct soap *soap, std::string const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_z1__filename(soap, p, "z1:filename", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_z1__filename(struct soap*, std::string *, const char*, const char*);

inline int soap_read_z1__filename(struct soap *soap, std::string *p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get_z1__filename(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__csv_DEFINED
#define SOAP_TYPE_z1__csv_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__csv(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__csv(struct soap*, const std::string *);

#define soap_z1__csv2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__csv(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2z1__csv soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_z1__csv(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_z1__csv soap_instantiate_std__string


#define soap_new_z1__csv soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__csv(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_z1__csv(struct soap *soap, std::string const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_z1__csv(soap, p, "z1:csv", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_z1__csv(struct soap*, std::string *, const char*, const char*);

inline int soap_read_z1__csv(struct soap *soap, std::string *p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get_z1__csv(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif
/* z1__id is a typedef synonym for xsd__integer */

#ifndef SOAP_TYPE_z1__id_DEFINED
#define SOAP_TYPE_z1__id_DEFINED

#define soap_default_z1__id(soap, a) soap_default_xsd__integer(soap, a)


#define soap_serialize_z1__id soap_serialize_xsd__integer


#define soap_z1__id2s soap_xsd__integer2s


#define soap_out_z1__id soap_out_xsd__integer


#define soap_s2z1__id soap_s2xsd__integer


#define soap_in_z1__id soap_in_xsd__integer


#define soap_instantiate_z1__id soap_instantiate_xsd__integer


#define soap_new_z1__id soap_new_xsd__integer


#define soap_put_z1__id soap_put_xsd__integer


#define soap_write_z1__id soap_write_xsd__integer


#define soap_get_z1__id soap_get_xsd__integer


#define soap_read_z1__id soap_read_xsd__integer

#endif

#ifndef SOAP_TYPE_z1__godzina_DEFINED
#define SOAP_TYPE_z1__godzina_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__godzina(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__godzina(struct soap*, const std::string *);

#define soap_z1__godzina2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__godzina(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2z1__godzina soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_z1__godzina(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_z1__godzina soap_instantiate_std__string


#define soap_new_z1__godzina soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__godzina(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_z1__godzina(struct soap *soap, std::string const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_z1__godzina(soap, p, "z1:godzina", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_z1__godzina(struct soap*, std::string *, const char*, const char*);

inline int soap_read_z1__godzina(struct soap *soap, std::string *p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get_z1__godzina(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__opcja_DEFINED
#define SOAP_TYPE_z1__opcja_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__opcja(struct soap*, const char*, int, const z1__opcja *, const char*);
SOAP_FMAC3 z1__opcja * SOAP_FMAC4 soap_in_z1__opcja(struct soap*, const char*, z1__opcja *, const char*);
SOAP_FMAC1 z1__opcja * SOAP_FMAC2 soap_instantiate_z1__opcja(struct soap*, int, const char*, const char*, size_t*);

inline z1__opcja * soap_new_z1__opcja(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__opcja(soap, n, NULL, NULL, NULL);
}

inline z1__opcja * soap_new_req_z1__opcja(
	struct soap *soap,
	const std::string& nazwa,
	const std::string& wartosc)
{	z1__opcja *_p = soap_new_z1__opcja(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->z1__opcja::nazwa = nazwa;
		_p->z1__opcja::wartosc = wartosc;
	}
	return _p;
}

inline z1__opcja * soap_new_set_z1__opcja(
	struct soap *soap,
	const std::string& nazwa,
	const std::string& wartosc)
{	z1__opcja *_p = soap_new_z1__opcja(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->z1__opcja::nazwa = nazwa;
		_p->z1__opcja::wartosc = wartosc;
	}
	return _p;
}

inline int soap_write_z1__opcja(struct soap *soap, z1__opcja const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "z1:opcja", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 z1__opcja * SOAP_FMAC4 soap_get_z1__opcja(struct soap*, z1__opcja *, const char*, const char*);

inline int soap_read_z1__opcja(struct soap *soap, z1__opcja *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_z1__opcja(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__importowanyPrzedmiot_DEFINED
#define SOAP_TYPE_z1__importowanyPrzedmiot_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__importowanyPrzedmiot(struct soap*, const char*, int, const z1__importowanyPrzedmiot *, const char*);
SOAP_FMAC3 z1__importowanyPrzedmiot * SOAP_FMAC4 soap_in_z1__importowanyPrzedmiot(struct soap*, const char*, z1__importowanyPrzedmiot *, const char*);
SOAP_FMAC1 z1__importowanyPrzedmiot * SOAP_FMAC2 soap_instantiate_z1__importowanyPrzedmiot(struct soap*, int, const char*, const char*, size_t*);

inline z1__importowanyPrzedmiot * soap_new_z1__importowanyPrzedmiot(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__importowanyPrzedmiot(soap, n, NULL, NULL, NULL);
}

inline z1__importowanyPrzedmiot * soap_new_req_z1__importowanyPrzedmiot(
	struct soap *soap,
	const std::string& emailProwadzacego,
	z1__przedmiot *szczegoly)
{	z1__importowanyPrzedmiot *_p = soap_new_z1__importowanyPrzedmiot(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->z1__importowanyPrzedmiot::emailProwadzacego = emailProwadzacego;
		_p->z1__importowanyPrzedmiot::szczegoly = szczegoly;
	}
	return _p;
}

inline z1__importowanyPrzedmiot * soap_new_set_z1__importowanyPrzedmiot(
	struct soap *soap,
	const std::string& emailProwadzacego,
	z1__przedmiot *szczegoly,
	std::string *listaStudentow,
	std::string *terminyLaboratoriow,
	std::string *tematyProjektow)
{	z1__importowanyPrzedmiot *_p = soap_new_z1__importowanyPrzedmiot(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->z1__importowanyPrzedmiot::emailProwadzacego = emailProwadzacego;
		_p->z1__importowanyPrzedmiot::szczegoly = szczegoly;
		_p->z1__importowanyPrzedmiot::listaStudentow = listaStudentow;
		_p->z1__importowanyPrzedmiot::terminyLaboratoriow = terminyLaboratoriow;
		_p->z1__importowanyPrzedmiot::tematyProjektow = tematyProjektow;
	}
	return _p;
}

inline int soap_write_z1__importowanyPrzedmiot(struct soap *soap, z1__importowanyPrzedmiot const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "z1:importowanyPrzedmiot", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 z1__importowanyPrzedmiot * SOAP_FMAC4 soap_get_z1__importowanyPrzedmiot(struct soap*, z1__importowanyPrzedmiot *, const char*, const char*);

inline int soap_read_z1__importowanyPrzedmiot(struct soap *soap, z1__importowanyPrzedmiot *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_z1__importowanyPrzedmiot(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__prowadzacy_DEFINED
#define SOAP_TYPE_z1__prowadzacy_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__prowadzacy(struct soap*, const char*, int, const z1__prowadzacy *, const char*);
SOAP_FMAC3 z1__prowadzacy * SOAP_FMAC4 soap_in_z1__prowadzacy(struct soap*, const char*, z1__prowadzacy *, const char*);
SOAP_FMAC1 z1__prowadzacy * SOAP_FMAC2 soap_instantiate_z1__prowadzacy(struct soap*, int, const char*, const char*, size_t*);

inline z1__prowadzacy * soap_new_z1__prowadzacy(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__prowadzacy(soap, n, NULL, NULL, NULL);
}

inline z1__prowadzacy * soap_new_req_z1__prowadzacy(
	struct soap *soap,
	const std::string& email,
	const std::string& imie,
	const std::string& nazwisko,
	const std::string& haslo,
	bool admin)
{	z1__prowadzacy *_p = soap_new_z1__prowadzacy(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->z1__prowadzacy::email = email;
		_p->z1__prowadzacy::imie = imie;
		_p->z1__prowadzacy::nazwisko = nazwisko;
		_p->z1__prowadzacy::haslo = haslo;
		_p->z1__prowadzacy::admin = admin;
	}
	return _p;
}

inline z1__prowadzacy * soap_new_set_z1__prowadzacy(
	struct soap *soap,
	const std::string& email,
	const std::string& imie,
	const std::string& nazwisko,
	const std::string& haslo,
	bool admin)
{	z1__prowadzacy *_p = soap_new_z1__prowadzacy(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->z1__prowadzacy::email = email;
		_p->z1__prowadzacy::imie = imie;
		_p->z1__prowadzacy::nazwisko = nazwisko;
		_p->z1__prowadzacy::haslo = haslo;
		_p->z1__prowadzacy::admin = admin;
	}
	return _p;
}

inline int soap_write_z1__prowadzacy(struct soap *soap, z1__prowadzacy const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "z1:prowadzacy", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 z1__prowadzacy * SOAP_FMAC4 soap_get_z1__prowadzacy(struct soap*, z1__prowadzacy *, const char*, const char*);

inline int soap_read_z1__prowadzacy(struct soap *soap, z1__prowadzacy *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_z1__prowadzacy(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__typ_DEFINED
#define SOAP_TYPE_z1__typ_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__typ(struct soap*, const char*, int, const z1__typ *, const char*);
SOAP_FMAC3 z1__typ * SOAP_FMAC4 soap_in_z1__typ(struct soap*, const char*, z1__typ *, const char*);
SOAP_FMAC1 z1__typ * SOAP_FMAC2 soap_instantiate_z1__typ(struct soap*, int, const char*, const char*, size_t*);

inline z1__typ * soap_new_z1__typ(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__typ(soap, n, NULL, NULL, NULL);
}

inline z1__typ * soap_new_req_z1__typ(
	struct soap *soap,
	const std::string& id,
	const std::string& opis)
{	z1__typ *_p = soap_new_z1__typ(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->z1__typ::id = id;
		_p->z1__typ::opis = opis;
	}
	return _p;
}

inline z1__typ * soap_new_set_z1__typ(
	struct soap *soap,
	const std::string& id,
	const std::string& opis)
{	z1__typ *_p = soap_new_z1__typ(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->z1__typ::id = id;
		_p->z1__typ::opis = opis;
	}
	return _p;
}

inline int soap_write_z1__typ(struct soap *soap, z1__typ const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "z1:typ", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 z1__typ * SOAP_FMAC4 soap_get_z1__typ(struct soap*, z1__typ *, const char*, const char*);

inline int soap_read_z1__typ(struct soap *soap, z1__typ *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_z1__typ(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__przedmiot_DEFINED
#define SOAP_TYPE_z1__przedmiot_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__przedmiot(struct soap*, const char*, int, const z1__przedmiot *, const char*);
SOAP_FMAC3 z1__przedmiot * SOAP_FMAC4 soap_in_z1__przedmiot(struct soap*, const char*, z1__przedmiot *, const char*);
SOAP_FMAC1 z1__przedmiot * SOAP_FMAC2 soap_instantiate_z1__przedmiot(struct soap*, int, const char*, const char*, size_t*);

inline z1__przedmiot * soap_new_z1__przedmiot(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__przedmiot(soap, n, NULL, NULL, NULL);
}

inline z1__przedmiot * soap_new_req_z1__przedmiot(
	struct soap *soap,
	const std::string& nazwa,
	const std::string& typ)
{	z1__przedmiot *_p = soap_new_z1__przedmiot(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->z1__przedmiot::nazwa = nazwa;
		_p->z1__przedmiot::typ = typ;
	}
	return _p;
}

inline z1__przedmiot * soap_new_set_z1__przedmiot(
	struct soap *soap,
	const std::string& nazwa,
	const std::string& typ)
{	z1__przedmiot *_p = soap_new_z1__przedmiot(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->z1__przedmiot::nazwa = nazwa;
		_p->z1__przedmiot::typ = typ;
	}
	return _p;
}

inline int soap_write_z1__przedmiot(struct soap *soap, z1__przedmiot const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "z1:przedmiot", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 z1__przedmiot * SOAP_FMAC4 soap_get_z1__przedmiot(struct soap*, z1__przedmiot *, const char*, const char*);

inline int soap_read_z1__przedmiot(struct soap *soap, z1__przedmiot *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_z1__przedmiot(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__sala_DEFINED
#define SOAP_TYPE_z1__sala_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__sala(struct soap*, const char*, int, const z1__sala *, const char*);
SOAP_FMAC3 z1__sala * SOAP_FMAC4 soap_in_z1__sala(struct soap*, const char*, z1__sala *, const char*);
SOAP_FMAC1 z1__sala * SOAP_FMAC2 soap_instantiate_z1__sala(struct soap*, int, const char*, const char*, size_t*);

inline z1__sala * soap_new_z1__sala(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__sala(soap, n, NULL, NULL, NULL);
}

inline z1__sala * soap_new_req_z1__sala(
	struct soap *soap,
	const std::string& numer,
	const std::string& maxMiejsc)
{	z1__sala *_p = soap_new_z1__sala(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->z1__sala::numer = numer;
		_p->z1__sala::maxMiejsc = maxMiejsc;
	}
	return _p;
}

inline z1__sala * soap_new_set_z1__sala(
	struct soap *soap,
	const std::string& numer,
	const std::string& maxMiejsc)
{	z1__sala *_p = soap_new_z1__sala(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->z1__sala::numer = numer;
		_p->z1__sala::maxMiejsc = maxMiejsc;
	}
	return _p;
}

inline int soap_write_z1__sala(struct soap *soap, z1__sala const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "z1:sala", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 z1__sala * SOAP_FMAC4 soap_get_z1__sala(struct soap*, z1__sala *, const char*, const char*);

inline int soap_read_z1__sala(struct soap *soap, z1__sala *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_z1__sala(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__termin_DEFINED
#define SOAP_TYPE_z1__termin_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__termin(struct soap*, const char*, int, const z1__termin *, const char*);
SOAP_FMAC3 z1__termin * SOAP_FMAC4 soap_in_z1__termin(struct soap*, const char*, z1__termin *, const char*);
SOAP_FMAC1 z1__termin * SOAP_FMAC2 soap_instantiate_z1__termin(struct soap*, int, const char*, const char*, size_t*);

inline z1__termin * soap_new_z1__termin(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__termin(soap, n, NULL, NULL, NULL);
}

inline z1__termin * soap_new_req_z1__termin(
	struct soap *soap,
	const std::string& dzien,
	const std::string& godzinaOd,
	const std::string& godzinaDo,
	int miejsca,
	const std::string& nrSali)
{	z1__termin *_p = soap_new_z1__termin(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->z1__termin::dzien = dzien;
		_p->z1__termin::godzinaOd = godzinaOd;
		_p->z1__termin::godzinaDo = godzinaDo;
		_p->z1__termin::miejsca = miejsca;
		_p->z1__termin::nrSali = nrSali;
	}
	return _p;
}

inline z1__termin * soap_new_set_z1__termin(
	struct soap *soap,
	const std::string& dzien,
	const std::string& godzinaOd,
	const std::string& godzinaDo,
	int miejsca,
	const std::string& nrSali)
{	z1__termin *_p = soap_new_z1__termin(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->z1__termin::dzien = dzien;
		_p->z1__termin::godzinaOd = godzinaOd;
		_p->z1__termin::godzinaDo = godzinaDo;
		_p->z1__termin::miejsca = miejsca;
		_p->z1__termin::nrSali = nrSali;
	}
	return _p;
}

inline int soap_write_z1__termin(struct soap *soap, z1__termin const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "z1:termin", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 z1__termin * SOAP_FMAC4 soap_get_z1__termin(struct soap*, z1__termin *, const char*, const char*);

inline int soap_read_z1__termin(struct soap *soap, z1__termin *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_z1__termin(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__temat_DEFINED
#define SOAP_TYPE_z1__temat_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__temat(struct soap*, const char*, int, const z1__temat *, const char*);
SOAP_FMAC3 z1__temat * SOAP_FMAC4 soap_in_z1__temat(struct soap*, const char*, z1__temat *, const char*);
SOAP_FMAC1 z1__temat * SOAP_FMAC2 soap_instantiate_z1__temat(struct soap*, int, const char*, const char*, size_t*);

inline z1__temat * soap_new_z1__temat(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__temat(soap, n, NULL, NULL, NULL);
}

inline z1__temat * soap_new_req_z1__temat(
	struct soap *soap,
	const std::string& temat,
	const std::string& opis,
	const std::string& miejsca,
	const std::string& wolneMiejsca)
{	z1__temat *_p = soap_new_z1__temat(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->z1__temat::temat = temat;
		_p->z1__temat::opis = opis;
		_p->z1__temat::miejsca = miejsca;
		_p->z1__temat::wolneMiejsca = wolneMiejsca;
	}
	return _p;
}

inline z1__temat * soap_new_set_z1__temat(
	struct soap *soap,
	const std::string& temat,
	const std::string& opis,
	const std::string& miejsca,
	const std::string& wolneMiejsca)
{	z1__temat *_p = soap_new_z1__temat(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->z1__temat::temat = temat;
		_p->z1__temat::opis = opis;
		_p->z1__temat::miejsca = miejsca;
		_p->z1__temat::wolneMiejsca = wolneMiejsca;
	}
	return _p;
}

inline int soap_write_z1__temat(struct soap *soap, z1__temat const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "z1:temat", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 z1__temat * SOAP_FMAC4 soap_get_z1__temat(struct soap*, z1__temat *, const char*, const char*);

inline int soap_read_z1__temat(struct soap *soap, z1__temat *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_z1__temat(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__student_DEFINED
#define SOAP_TYPE_z1__student_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__student(struct soap*, const char*, int, const z1__student *, const char*);
SOAP_FMAC3 z1__student * SOAP_FMAC4 soap_in_z1__student(struct soap*, const char*, z1__student *, const char*);
SOAP_FMAC1 z1__student * SOAP_FMAC2 soap_instantiate_z1__student(struct soap*, int, const char*, const char*, size_t*);

inline z1__student * soap_new_z1__student(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__student(soap, n, NULL, NULL, NULL);
}

inline z1__student * soap_new_req_z1__student(
	struct soap *soap,
	const std::string& imie,
	const std::string& nazwisko,
	const std::string& index)
{	z1__student *_p = soap_new_z1__student(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->z1__student::imie = imie;
		_p->z1__student::nazwisko = nazwisko;
		_p->z1__student::index = index;
	}
	return _p;
}

inline z1__student * soap_new_set_z1__student(
	struct soap *soap,
	const std::string& imie,
	const std::string& nazwisko,
	const std::string& index)
{	z1__student *_p = soap_new_z1__student(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->z1__student::imie = imie;
		_p->z1__student::nazwisko = nazwisko;
		_p->z1__student::index = index;
	}
	return _p;
}

inline int soap_write_z1__student(struct soap *soap, z1__student const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "z1:student", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 z1__student * SOAP_FMAC4 soap_get_z1__student(struct soap*, z1__student *, const char*, const char*);

inline int soap_read_z1__student(struct soap *soap, z1__student *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_z1__student(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__nonNegativeInteger_DEFINED
#define SOAP_TYPE_xsd__nonNegativeInteger_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__nonNegativeInteger(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__nonNegativeInteger(struct soap*, const std::string *);

#define soap_xsd__nonNegativeInteger2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__nonNegativeInteger(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__nonNegativeInteger soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__nonNegativeInteger(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__nonNegativeInteger soap_instantiate_std__string


#define soap_new_xsd__nonNegativeInteger soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__nonNegativeInteger(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__nonNegativeInteger(struct soap *soap, std::string const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__nonNegativeInteger(soap, p, "xsd:nonNegativeInteger", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__nonNegativeInteger(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__nonNegativeInteger(struct soap *soap, std::string *p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__nonNegativeInteger(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__integer_DEFINED
#define SOAP_TYPE_xsd__integer_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__integer(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__integer(struct soap*, const std::string *);

#define soap_xsd__integer2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__integer(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__integer soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__integer(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__integer soap_instantiate_std__string


#define soap_new_xsd__integer soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__integer(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__integer(struct soap *soap, std::string const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__integer(soap, p, "xsd:integer", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__integer(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__integer(struct soap *soap, std::string *p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__integer(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_std__string(soap, p, "string", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{	if (p)
	{	soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{	if (p)
	{	soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{	if (p)
	{	soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{	if (p)
	{	soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{	if (p)
	{	soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE_z1__zmienOpcje_DEFINED
#define SOAP_TYPE_z1__zmienOpcje_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__zmienOpcje(struct soap*, struct z1__zmienOpcje *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__zmienOpcje(struct soap*, const struct z1__zmienOpcje *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__zmienOpcje(struct soap*, const char*, int, const struct z1__zmienOpcje *, const char*);
SOAP_FMAC3 struct z1__zmienOpcje * SOAP_FMAC4 soap_in_z1__zmienOpcje(struct soap*, const char*, struct z1__zmienOpcje *, const char*);
SOAP_FMAC1 struct z1__zmienOpcje * SOAP_FMAC2 soap_instantiate_z1__zmienOpcje(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__zmienOpcje * soap_new_z1__zmienOpcje(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__zmienOpcje(soap, n, NULL, NULL, NULL);
}

inline struct z1__zmienOpcje * soap_new_req_z1__zmienOpcje(
	struct soap *soap)
{	struct z1__zmienOpcje *_p = soap_new_z1__zmienOpcje(soap);
	if (_p)
	{	soap_default_z1__zmienOpcje(soap, _p);
	}
	return _p;
}

inline struct z1__zmienOpcje * soap_new_set_z1__zmienOpcje(
	struct soap *soap,
	z1__opcja *opcja)
{	struct z1__zmienOpcje *_p = soap_new_z1__zmienOpcje(soap);
	if (_p)
	{	soap_default_z1__zmienOpcje(soap, _p);
		_p->opcja = opcja;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__zmienOpcje(struct soap*, const struct z1__zmienOpcje *, const char*, const char*);

inline int soap_write_z1__zmienOpcje(struct soap *soap, struct z1__zmienOpcje const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__zmienOpcje(soap, p), 0) || soap_put_z1__zmienOpcje(soap, p, "z1:zmienOpcje", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__zmienOpcje * SOAP_FMAC4 soap_get_z1__zmienOpcje(struct soap*, struct z1__zmienOpcje *, const char*, const char*);

inline int soap_read_z1__zmienOpcje(struct soap *soap, struct z1__zmienOpcje *p)
{	if (p)
	{	soap_default_z1__zmienOpcje(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__zmienOpcje(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__zmienOpcjeResponse_DEFINED
#define SOAP_TYPE_z1__zmienOpcjeResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__zmienOpcjeResponse(struct soap*, struct z1__zmienOpcjeResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__zmienOpcjeResponse(struct soap*, const struct z1__zmienOpcjeResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__zmienOpcjeResponse(struct soap*, const char*, int, const struct z1__zmienOpcjeResponse *, const char*);
SOAP_FMAC3 struct z1__zmienOpcjeResponse * SOAP_FMAC4 soap_in_z1__zmienOpcjeResponse(struct soap*, const char*, struct z1__zmienOpcjeResponse *, const char*);
SOAP_FMAC1 struct z1__zmienOpcjeResponse * SOAP_FMAC2 soap_instantiate_z1__zmienOpcjeResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__zmienOpcjeResponse * soap_new_z1__zmienOpcjeResponse(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__zmienOpcjeResponse(soap, n, NULL, NULL, NULL);
}

inline struct z1__zmienOpcjeResponse * soap_new_req_z1__zmienOpcjeResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__zmienOpcjeResponse *_p = soap_new_z1__zmienOpcjeResponse(soap);
	if (_p)
	{	soap_default_z1__zmienOpcjeResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}

inline struct z1__zmienOpcjeResponse * soap_new_set_z1__zmienOpcjeResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__zmienOpcjeResponse *_p = soap_new_z1__zmienOpcjeResponse(soap);
	if (_p)
	{	soap_default_z1__zmienOpcjeResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__zmienOpcjeResponse(struct soap*, const struct z1__zmienOpcjeResponse *, const char*, const char*);

inline int soap_write_z1__zmienOpcjeResponse(struct soap *soap, struct z1__zmienOpcjeResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__zmienOpcjeResponse(soap, p), 0) || soap_put_z1__zmienOpcjeResponse(soap, p, "z1:zmienOpcjeResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__zmienOpcjeResponse * SOAP_FMAC4 soap_get_z1__zmienOpcjeResponse(struct soap*, struct z1__zmienOpcjeResponse *, const char*, const char*);

inline int soap_read_z1__zmienOpcjeResponse(struct soap *soap, struct z1__zmienOpcjeResponse *p)
{	if (p)
	{	soap_default_z1__zmienOpcjeResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__zmienOpcjeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__edytujStudenta_DEFINED
#define SOAP_TYPE_z1__edytujStudenta_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__edytujStudenta(struct soap*, struct z1__edytujStudenta *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__edytujStudenta(struct soap*, const struct z1__edytujStudenta *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__edytujStudenta(struct soap*, const char*, int, const struct z1__edytujStudenta *, const char*);
SOAP_FMAC3 struct z1__edytujStudenta * SOAP_FMAC4 soap_in_z1__edytujStudenta(struct soap*, const char*, struct z1__edytujStudenta *, const char*);
SOAP_FMAC1 struct z1__edytujStudenta * SOAP_FMAC2 soap_instantiate_z1__edytujStudenta(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__edytujStudenta * soap_new_z1__edytujStudenta(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__edytujStudenta(soap, n, NULL, NULL, NULL);
}

inline struct z1__edytujStudenta * soap_new_req_z1__edytujStudenta(
	struct soap *soap,
	const std::string& studentId)
{	struct z1__edytujStudenta *_p = soap_new_z1__edytujStudenta(soap);
	if (_p)
	{	soap_default_z1__edytujStudenta(soap, _p);
		_p->studentId = studentId;
	}
	return _p;
}

inline struct z1__edytujStudenta * soap_new_set_z1__edytujStudenta(
	struct soap *soap,
	const std::string& studentId,
	z1__student *student)
{	struct z1__edytujStudenta *_p = soap_new_z1__edytujStudenta(soap);
	if (_p)
	{	soap_default_z1__edytujStudenta(soap, _p);
		_p->studentId = studentId;
		_p->student = student;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__edytujStudenta(struct soap*, const struct z1__edytujStudenta *, const char*, const char*);

inline int soap_write_z1__edytujStudenta(struct soap *soap, struct z1__edytujStudenta const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__edytujStudenta(soap, p), 0) || soap_put_z1__edytujStudenta(soap, p, "z1:edytujStudenta", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__edytujStudenta * SOAP_FMAC4 soap_get_z1__edytujStudenta(struct soap*, struct z1__edytujStudenta *, const char*, const char*);

inline int soap_read_z1__edytujStudenta(struct soap *soap, struct z1__edytujStudenta *p)
{	if (p)
	{	soap_default_z1__edytujStudenta(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__edytujStudenta(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__edytujStudentaResponse_DEFINED
#define SOAP_TYPE_z1__edytujStudentaResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__edytujStudentaResponse(struct soap*, struct z1__edytujStudentaResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__edytujStudentaResponse(struct soap*, const struct z1__edytujStudentaResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__edytujStudentaResponse(struct soap*, const char*, int, const struct z1__edytujStudentaResponse *, const char*);
SOAP_FMAC3 struct z1__edytujStudentaResponse * SOAP_FMAC4 soap_in_z1__edytujStudentaResponse(struct soap*, const char*, struct z1__edytujStudentaResponse *, const char*);
SOAP_FMAC1 struct z1__edytujStudentaResponse * SOAP_FMAC2 soap_instantiate_z1__edytujStudentaResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__edytujStudentaResponse * soap_new_z1__edytujStudentaResponse(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__edytujStudentaResponse(soap, n, NULL, NULL, NULL);
}

inline struct z1__edytujStudentaResponse * soap_new_req_z1__edytujStudentaResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__edytujStudentaResponse *_p = soap_new_z1__edytujStudentaResponse(soap);
	if (_p)
	{	soap_default_z1__edytujStudentaResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}

inline struct z1__edytujStudentaResponse * soap_new_set_z1__edytujStudentaResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__edytujStudentaResponse *_p = soap_new_z1__edytujStudentaResponse(soap);
	if (_p)
	{	soap_default_z1__edytujStudentaResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__edytujStudentaResponse(struct soap*, const struct z1__edytujStudentaResponse *, const char*, const char*);

inline int soap_write_z1__edytujStudentaResponse(struct soap *soap, struct z1__edytujStudentaResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__edytujStudentaResponse(soap, p), 0) || soap_put_z1__edytujStudentaResponse(soap, p, "z1:edytujStudentaResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__edytujStudentaResponse * SOAP_FMAC4 soap_get_z1__edytujStudentaResponse(struct soap*, struct z1__edytujStudentaResponse *, const char*, const char*);

inline int soap_read_z1__edytujStudentaResponse(struct soap *soap, struct z1__edytujStudentaResponse *p)
{	if (p)
	{	soap_default_z1__edytujStudentaResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__edytujStudentaResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__importujStudentow_DEFINED
#define SOAP_TYPE_z1__importujStudentow_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__importujStudentow(struct soap*, struct z1__importujStudentow *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__importujStudentow(struct soap*, const struct z1__importujStudentow *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__importujStudentow(struct soap*, const char*, int, const struct z1__importujStudentow *, const char*);
SOAP_FMAC3 struct z1__importujStudentow * SOAP_FMAC4 soap_in_z1__importujStudentow(struct soap*, const char*, struct z1__importujStudentow *, const char*);
SOAP_FMAC1 struct z1__importujStudentow * SOAP_FMAC2 soap_instantiate_z1__importujStudentow(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__importujStudentow * soap_new_z1__importujStudentow(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__importujStudentow(soap, n, NULL, NULL, NULL);
}

inline struct z1__importujStudentow * soap_new_req_z1__importujStudentow(
	struct soap *soap,
	const std::string& przedmiotId,
	const std::string& dane)
{	struct z1__importujStudentow *_p = soap_new_z1__importujStudentow(soap);
	if (_p)
	{	soap_default_z1__importujStudentow(soap, _p);
		_p->przedmiotId = przedmiotId;
		_p->dane = dane;
	}
	return _p;
}

inline struct z1__importujStudentow * soap_new_set_z1__importujStudentow(
	struct soap *soap,
	const std::string& przedmiotId,
	const std::string& dane)
{	struct z1__importujStudentow *_p = soap_new_z1__importujStudentow(soap);
	if (_p)
	{	soap_default_z1__importujStudentow(soap, _p);
		_p->przedmiotId = przedmiotId;
		_p->dane = dane;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__importujStudentow(struct soap*, const struct z1__importujStudentow *, const char*, const char*);

inline int soap_write_z1__importujStudentow(struct soap *soap, struct z1__importujStudentow const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__importujStudentow(soap, p), 0) || soap_put_z1__importujStudentow(soap, p, "z1:importujStudentow", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__importujStudentow * SOAP_FMAC4 soap_get_z1__importujStudentow(struct soap*, struct z1__importujStudentow *, const char*, const char*);

inline int soap_read_z1__importujStudentow(struct soap *soap, struct z1__importujStudentow *p)
{	if (p)
	{	soap_default_z1__importujStudentow(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__importujStudentow(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__importujStudentowResponse_DEFINED
#define SOAP_TYPE_z1__importujStudentowResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__importujStudentowResponse(struct soap*, struct z1__importujStudentowResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__importujStudentowResponse(struct soap*, const struct z1__importujStudentowResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__importujStudentowResponse(struct soap*, const char*, int, const struct z1__importujStudentowResponse *, const char*);
SOAP_FMAC3 struct z1__importujStudentowResponse * SOAP_FMAC4 soap_in_z1__importujStudentowResponse(struct soap*, const char*, struct z1__importujStudentowResponse *, const char*);
SOAP_FMAC1 struct z1__importujStudentowResponse * SOAP_FMAC2 soap_instantiate_z1__importujStudentowResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__importujStudentowResponse * soap_new_z1__importujStudentowResponse(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__importujStudentowResponse(soap, n, NULL, NULL, NULL);
}

inline struct z1__importujStudentowResponse * soap_new_req_z1__importujStudentowResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__importujStudentowResponse *_p = soap_new_z1__importujStudentowResponse(soap);
	if (_p)
	{	soap_default_z1__importujStudentowResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}

inline struct z1__importujStudentowResponse * soap_new_set_z1__importujStudentowResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__importujStudentowResponse *_p = soap_new_z1__importujStudentowResponse(soap);
	if (_p)
	{	soap_default_z1__importujStudentowResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__importujStudentowResponse(struct soap*, const struct z1__importujStudentowResponse *, const char*, const char*);

inline int soap_write_z1__importujStudentowResponse(struct soap *soap, struct z1__importujStudentowResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__importujStudentowResponse(soap, p), 0) || soap_put_z1__importujStudentowResponse(soap, p, "z1:importujStudentowResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__importujStudentowResponse * SOAP_FMAC4 soap_get_z1__importujStudentowResponse(struct soap*, struct z1__importujStudentowResponse *, const char*, const char*);

inline int soap_read_z1__importujStudentowResponse(struct soap *soap, struct z1__importujStudentowResponse *p)
{	if (p)
	{	soap_default_z1__importujStudentowResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__importujStudentowResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__importujTerminy_DEFINED
#define SOAP_TYPE_z1__importujTerminy_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__importujTerminy(struct soap*, struct z1__importujTerminy *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__importujTerminy(struct soap*, const struct z1__importujTerminy *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__importujTerminy(struct soap*, const char*, int, const struct z1__importujTerminy *, const char*);
SOAP_FMAC3 struct z1__importujTerminy * SOAP_FMAC4 soap_in_z1__importujTerminy(struct soap*, const char*, struct z1__importujTerminy *, const char*);
SOAP_FMAC1 struct z1__importujTerminy * SOAP_FMAC2 soap_instantiate_z1__importujTerminy(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__importujTerminy * soap_new_z1__importujTerminy(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__importujTerminy(soap, n, NULL, NULL, NULL);
}

inline struct z1__importujTerminy * soap_new_req_z1__importujTerminy(
	struct soap *soap,
	const std::string& przedmiotId,
	const std::string& dane)
{	struct z1__importujTerminy *_p = soap_new_z1__importujTerminy(soap);
	if (_p)
	{	soap_default_z1__importujTerminy(soap, _p);
		_p->przedmiotId = przedmiotId;
		_p->dane = dane;
	}
	return _p;
}

inline struct z1__importujTerminy * soap_new_set_z1__importujTerminy(
	struct soap *soap,
	const std::string& przedmiotId,
	const std::string& dane)
{	struct z1__importujTerminy *_p = soap_new_z1__importujTerminy(soap);
	if (_p)
	{	soap_default_z1__importujTerminy(soap, _p);
		_p->przedmiotId = przedmiotId;
		_p->dane = dane;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__importujTerminy(struct soap*, const struct z1__importujTerminy *, const char*, const char*);

inline int soap_write_z1__importujTerminy(struct soap *soap, struct z1__importujTerminy const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__importujTerminy(soap, p), 0) || soap_put_z1__importujTerminy(soap, p, "z1:importujTerminy", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__importujTerminy * SOAP_FMAC4 soap_get_z1__importujTerminy(struct soap*, struct z1__importujTerminy *, const char*, const char*);

inline int soap_read_z1__importujTerminy(struct soap *soap, struct z1__importujTerminy *p)
{	if (p)
	{	soap_default_z1__importujTerminy(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__importujTerminy(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__importujTerminyResponse_DEFINED
#define SOAP_TYPE_z1__importujTerminyResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__importujTerminyResponse(struct soap*, struct z1__importujTerminyResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__importujTerminyResponse(struct soap*, const struct z1__importujTerminyResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__importujTerminyResponse(struct soap*, const char*, int, const struct z1__importujTerminyResponse *, const char*);
SOAP_FMAC3 struct z1__importujTerminyResponse * SOAP_FMAC4 soap_in_z1__importujTerminyResponse(struct soap*, const char*, struct z1__importujTerminyResponse *, const char*);
SOAP_FMAC1 struct z1__importujTerminyResponse * SOAP_FMAC2 soap_instantiate_z1__importujTerminyResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__importujTerminyResponse * soap_new_z1__importujTerminyResponse(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__importujTerminyResponse(soap, n, NULL, NULL, NULL);
}

inline struct z1__importujTerminyResponse * soap_new_req_z1__importujTerminyResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__importujTerminyResponse *_p = soap_new_z1__importujTerminyResponse(soap);
	if (_p)
	{	soap_default_z1__importujTerminyResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}

inline struct z1__importujTerminyResponse * soap_new_set_z1__importujTerminyResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__importujTerminyResponse *_p = soap_new_z1__importujTerminyResponse(soap);
	if (_p)
	{	soap_default_z1__importujTerminyResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__importujTerminyResponse(struct soap*, const struct z1__importujTerminyResponse *, const char*, const char*);

inline int soap_write_z1__importujTerminyResponse(struct soap *soap, struct z1__importujTerminyResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__importujTerminyResponse(soap, p), 0) || soap_put_z1__importujTerminyResponse(soap, p, "z1:importujTerminyResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__importujTerminyResponse * SOAP_FMAC4 soap_get_z1__importujTerminyResponse(struct soap*, struct z1__importujTerminyResponse *, const char*, const char*);

inline int soap_read_z1__importujTerminyResponse(struct soap *soap, struct z1__importujTerminyResponse *p)
{	if (p)
	{	soap_default_z1__importujTerminyResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__importujTerminyResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__importujProjekty_DEFINED
#define SOAP_TYPE_z1__importujProjekty_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__importujProjekty(struct soap*, struct z1__importujProjekty *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__importujProjekty(struct soap*, const struct z1__importujProjekty *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__importujProjekty(struct soap*, const char*, int, const struct z1__importujProjekty *, const char*);
SOAP_FMAC3 struct z1__importujProjekty * SOAP_FMAC4 soap_in_z1__importujProjekty(struct soap*, const char*, struct z1__importujProjekty *, const char*);
SOAP_FMAC1 struct z1__importujProjekty * SOAP_FMAC2 soap_instantiate_z1__importujProjekty(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__importujProjekty * soap_new_z1__importujProjekty(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__importujProjekty(soap, n, NULL, NULL, NULL);
}

inline struct z1__importujProjekty * soap_new_req_z1__importujProjekty(
	struct soap *soap,
	const std::string& przedmiotId,
	const std::string& dane)
{	struct z1__importujProjekty *_p = soap_new_z1__importujProjekty(soap);
	if (_p)
	{	soap_default_z1__importujProjekty(soap, _p);
		_p->przedmiotId = przedmiotId;
		_p->dane = dane;
	}
	return _p;
}

inline struct z1__importujProjekty * soap_new_set_z1__importujProjekty(
	struct soap *soap,
	const std::string& przedmiotId,
	const std::string& dane)
{	struct z1__importujProjekty *_p = soap_new_z1__importujProjekty(soap);
	if (_p)
	{	soap_default_z1__importujProjekty(soap, _p);
		_p->przedmiotId = przedmiotId;
		_p->dane = dane;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__importujProjekty(struct soap*, const struct z1__importujProjekty *, const char*, const char*);

inline int soap_write_z1__importujProjekty(struct soap *soap, struct z1__importujProjekty const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__importujProjekty(soap, p), 0) || soap_put_z1__importujProjekty(soap, p, "z1:importujProjekty", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__importujProjekty * SOAP_FMAC4 soap_get_z1__importujProjekty(struct soap*, struct z1__importujProjekty *, const char*, const char*);

inline int soap_read_z1__importujProjekty(struct soap *soap, struct z1__importujProjekty *p)
{	if (p)
	{	soap_default_z1__importujProjekty(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__importujProjekty(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__importujProjektyResponse_DEFINED
#define SOAP_TYPE_z1__importujProjektyResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__importujProjektyResponse(struct soap*, struct z1__importujProjektyResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__importujProjektyResponse(struct soap*, const struct z1__importujProjektyResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__importujProjektyResponse(struct soap*, const char*, int, const struct z1__importujProjektyResponse *, const char*);
SOAP_FMAC3 struct z1__importujProjektyResponse * SOAP_FMAC4 soap_in_z1__importujProjektyResponse(struct soap*, const char*, struct z1__importujProjektyResponse *, const char*);
SOAP_FMAC1 struct z1__importujProjektyResponse * SOAP_FMAC2 soap_instantiate_z1__importujProjektyResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__importujProjektyResponse * soap_new_z1__importujProjektyResponse(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__importujProjektyResponse(soap, n, NULL, NULL, NULL);
}

inline struct z1__importujProjektyResponse * soap_new_req_z1__importujProjektyResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__importujProjektyResponse *_p = soap_new_z1__importujProjektyResponse(soap);
	if (_p)
	{	soap_default_z1__importujProjektyResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}

inline struct z1__importujProjektyResponse * soap_new_set_z1__importujProjektyResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__importujProjektyResponse *_p = soap_new_z1__importujProjektyResponse(soap);
	if (_p)
	{	soap_default_z1__importujProjektyResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__importujProjektyResponse(struct soap*, const struct z1__importujProjektyResponse *, const char*, const char*);

inline int soap_write_z1__importujProjektyResponse(struct soap *soap, struct z1__importujProjektyResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__importujProjektyResponse(soap, p), 0) || soap_put_z1__importujProjektyResponse(soap, p, "z1:importujProjektyResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__importujProjektyResponse * SOAP_FMAC4 soap_get_z1__importujProjektyResponse(struct soap*, struct z1__importujProjektyResponse *, const char*, const char*);

inline int soap_read_z1__importujProjektyResponse(struct soap *soap, struct z1__importujProjektyResponse *p)
{	if (p)
	{	soap_default_z1__importujProjektyResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__importujProjektyResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__usunTermin_DEFINED
#define SOAP_TYPE_z1__usunTermin_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__usunTermin(struct soap*, struct z1__usunTermin *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__usunTermin(struct soap*, const struct z1__usunTermin *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__usunTermin(struct soap*, const char*, int, const struct z1__usunTermin *, const char*);
SOAP_FMAC3 struct z1__usunTermin * SOAP_FMAC4 soap_in_z1__usunTermin(struct soap*, const char*, struct z1__usunTermin *, const char*);
SOAP_FMAC1 struct z1__usunTermin * SOAP_FMAC2 soap_instantiate_z1__usunTermin(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__usunTermin * soap_new_z1__usunTermin(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__usunTermin(soap, n, NULL, NULL, NULL);
}

inline struct z1__usunTermin * soap_new_req_z1__usunTermin(
	struct soap *soap,
	const std::string& ID)
{	struct z1__usunTermin *_p = soap_new_z1__usunTermin(soap);
	if (_p)
	{	soap_default_z1__usunTermin(soap, _p);
		_p->ID = ID;
	}
	return _p;
}

inline struct z1__usunTermin * soap_new_set_z1__usunTermin(
	struct soap *soap,
	const std::string& ID)
{	struct z1__usunTermin *_p = soap_new_z1__usunTermin(soap);
	if (_p)
	{	soap_default_z1__usunTermin(soap, _p);
		_p->ID = ID;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__usunTermin(struct soap*, const struct z1__usunTermin *, const char*, const char*);

inline int soap_write_z1__usunTermin(struct soap *soap, struct z1__usunTermin const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__usunTermin(soap, p), 0) || soap_put_z1__usunTermin(soap, p, "z1:usunTermin", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__usunTermin * SOAP_FMAC4 soap_get_z1__usunTermin(struct soap*, struct z1__usunTermin *, const char*, const char*);

inline int soap_read_z1__usunTermin(struct soap *soap, struct z1__usunTermin *p)
{	if (p)
	{	soap_default_z1__usunTermin(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__usunTermin(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__usunTerminResponse_DEFINED
#define SOAP_TYPE_z1__usunTerminResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__usunTerminResponse(struct soap*, struct z1__usunTerminResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__usunTerminResponse(struct soap*, const struct z1__usunTerminResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__usunTerminResponse(struct soap*, const char*, int, const struct z1__usunTerminResponse *, const char*);
SOAP_FMAC3 struct z1__usunTerminResponse * SOAP_FMAC4 soap_in_z1__usunTerminResponse(struct soap*, const char*, struct z1__usunTerminResponse *, const char*);
SOAP_FMAC1 struct z1__usunTerminResponse * SOAP_FMAC2 soap_instantiate_z1__usunTerminResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__usunTerminResponse * soap_new_z1__usunTerminResponse(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__usunTerminResponse(soap, n, NULL, NULL, NULL);
}

inline struct z1__usunTerminResponse * soap_new_req_z1__usunTerminResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__usunTerminResponse *_p = soap_new_z1__usunTerminResponse(soap);
	if (_p)
	{	soap_default_z1__usunTerminResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}

inline struct z1__usunTerminResponse * soap_new_set_z1__usunTerminResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__usunTerminResponse *_p = soap_new_z1__usunTerminResponse(soap);
	if (_p)
	{	soap_default_z1__usunTerminResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__usunTerminResponse(struct soap*, const struct z1__usunTerminResponse *, const char*, const char*);

inline int soap_write_z1__usunTerminResponse(struct soap *soap, struct z1__usunTerminResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__usunTerminResponse(soap, p), 0) || soap_put_z1__usunTerminResponse(soap, p, "z1:usunTerminResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__usunTerminResponse * SOAP_FMAC4 soap_get_z1__usunTerminResponse(struct soap*, struct z1__usunTerminResponse *, const char*, const char*);

inline int soap_read_z1__usunTerminResponse(struct soap *soap, struct z1__usunTerminResponse *p)
{	if (p)
	{	soap_default_z1__usunTerminResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__usunTerminResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__usunTemat_DEFINED
#define SOAP_TYPE_z1__usunTemat_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__usunTemat(struct soap*, struct z1__usunTemat *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__usunTemat(struct soap*, const struct z1__usunTemat *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__usunTemat(struct soap*, const char*, int, const struct z1__usunTemat *, const char*);
SOAP_FMAC3 struct z1__usunTemat * SOAP_FMAC4 soap_in_z1__usunTemat(struct soap*, const char*, struct z1__usunTemat *, const char*);
SOAP_FMAC1 struct z1__usunTemat * SOAP_FMAC2 soap_instantiate_z1__usunTemat(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__usunTemat * soap_new_z1__usunTemat(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__usunTemat(soap, n, NULL, NULL, NULL);
}

inline struct z1__usunTemat * soap_new_req_z1__usunTemat(
	struct soap *soap,
	const std::string& ID)
{	struct z1__usunTemat *_p = soap_new_z1__usunTemat(soap);
	if (_p)
	{	soap_default_z1__usunTemat(soap, _p);
		_p->ID = ID;
	}
	return _p;
}

inline struct z1__usunTemat * soap_new_set_z1__usunTemat(
	struct soap *soap,
	const std::string& ID)
{	struct z1__usunTemat *_p = soap_new_z1__usunTemat(soap);
	if (_p)
	{	soap_default_z1__usunTemat(soap, _p);
		_p->ID = ID;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__usunTemat(struct soap*, const struct z1__usunTemat *, const char*, const char*);

inline int soap_write_z1__usunTemat(struct soap *soap, struct z1__usunTemat const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__usunTemat(soap, p), 0) || soap_put_z1__usunTemat(soap, p, "z1:usunTemat", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__usunTemat * SOAP_FMAC4 soap_get_z1__usunTemat(struct soap*, struct z1__usunTemat *, const char*, const char*);

inline int soap_read_z1__usunTemat(struct soap *soap, struct z1__usunTemat *p)
{	if (p)
	{	soap_default_z1__usunTemat(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__usunTemat(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__usunTematResponse_DEFINED
#define SOAP_TYPE_z1__usunTematResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__usunTematResponse(struct soap*, struct z1__usunTematResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__usunTematResponse(struct soap*, const struct z1__usunTematResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__usunTematResponse(struct soap*, const char*, int, const struct z1__usunTematResponse *, const char*);
SOAP_FMAC3 struct z1__usunTematResponse * SOAP_FMAC4 soap_in_z1__usunTematResponse(struct soap*, const char*, struct z1__usunTematResponse *, const char*);
SOAP_FMAC1 struct z1__usunTematResponse * SOAP_FMAC2 soap_instantiate_z1__usunTematResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__usunTematResponse * soap_new_z1__usunTematResponse(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__usunTematResponse(soap, n, NULL, NULL, NULL);
}

inline struct z1__usunTematResponse * soap_new_req_z1__usunTematResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__usunTematResponse *_p = soap_new_z1__usunTematResponse(soap);
	if (_p)
	{	soap_default_z1__usunTematResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}

inline struct z1__usunTematResponse * soap_new_set_z1__usunTematResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__usunTematResponse *_p = soap_new_z1__usunTematResponse(soap);
	if (_p)
	{	soap_default_z1__usunTematResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__usunTematResponse(struct soap*, const struct z1__usunTematResponse *, const char*, const char*);

inline int soap_write_z1__usunTematResponse(struct soap *soap, struct z1__usunTematResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__usunTematResponse(soap, p), 0) || soap_put_z1__usunTematResponse(soap, p, "z1:usunTematResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__usunTematResponse * SOAP_FMAC4 soap_get_z1__usunTematResponse(struct soap*, struct z1__usunTematResponse *, const char*, const char*);

inline int soap_read_z1__usunTematResponse(struct soap *soap, struct z1__usunTematResponse *p)
{	if (p)
	{	soap_default_z1__usunTematResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__usunTematResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__usunWszystkieTerminy_DEFINED
#define SOAP_TYPE_z1__usunWszystkieTerminy_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__usunWszystkieTerminy(struct soap*, struct z1__usunWszystkieTerminy *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__usunWszystkieTerminy(struct soap*, const struct z1__usunWszystkieTerminy *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__usunWszystkieTerminy(struct soap*, const char*, int, const struct z1__usunWszystkieTerminy *, const char*);
SOAP_FMAC3 struct z1__usunWszystkieTerminy * SOAP_FMAC4 soap_in_z1__usunWszystkieTerminy(struct soap*, const char*, struct z1__usunWszystkieTerminy *, const char*);
SOAP_FMAC1 struct z1__usunWszystkieTerminy * SOAP_FMAC2 soap_instantiate_z1__usunWszystkieTerminy(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__usunWszystkieTerminy * soap_new_z1__usunWszystkieTerminy(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__usunWszystkieTerminy(soap, n, NULL, NULL, NULL);
}

inline struct z1__usunWszystkieTerminy * soap_new_req_z1__usunWszystkieTerminy(
	struct soap *soap,
	const std::string& ID)
{	struct z1__usunWszystkieTerminy *_p = soap_new_z1__usunWszystkieTerminy(soap);
	if (_p)
	{	soap_default_z1__usunWszystkieTerminy(soap, _p);
		_p->ID = ID;
	}
	return _p;
}

inline struct z1__usunWszystkieTerminy * soap_new_set_z1__usunWszystkieTerminy(
	struct soap *soap,
	const std::string& ID)
{	struct z1__usunWszystkieTerminy *_p = soap_new_z1__usunWszystkieTerminy(soap);
	if (_p)
	{	soap_default_z1__usunWszystkieTerminy(soap, _p);
		_p->ID = ID;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__usunWszystkieTerminy(struct soap*, const struct z1__usunWszystkieTerminy *, const char*, const char*);

inline int soap_write_z1__usunWszystkieTerminy(struct soap *soap, struct z1__usunWszystkieTerminy const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__usunWszystkieTerminy(soap, p), 0) || soap_put_z1__usunWszystkieTerminy(soap, p, "z1:usunWszystkieTerminy", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__usunWszystkieTerminy * SOAP_FMAC4 soap_get_z1__usunWszystkieTerminy(struct soap*, struct z1__usunWszystkieTerminy *, const char*, const char*);

inline int soap_read_z1__usunWszystkieTerminy(struct soap *soap, struct z1__usunWszystkieTerminy *p)
{	if (p)
	{	soap_default_z1__usunWszystkieTerminy(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__usunWszystkieTerminy(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__usunWszystkieTerminyResponse_DEFINED
#define SOAP_TYPE_z1__usunWszystkieTerminyResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__usunWszystkieTerminyResponse(struct soap*, struct z1__usunWszystkieTerminyResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__usunWszystkieTerminyResponse(struct soap*, const struct z1__usunWszystkieTerminyResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__usunWszystkieTerminyResponse(struct soap*, const char*, int, const struct z1__usunWszystkieTerminyResponse *, const char*);
SOAP_FMAC3 struct z1__usunWszystkieTerminyResponse * SOAP_FMAC4 soap_in_z1__usunWszystkieTerminyResponse(struct soap*, const char*, struct z1__usunWszystkieTerminyResponse *, const char*);
SOAP_FMAC1 struct z1__usunWszystkieTerminyResponse * SOAP_FMAC2 soap_instantiate_z1__usunWszystkieTerminyResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__usunWszystkieTerminyResponse * soap_new_z1__usunWszystkieTerminyResponse(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__usunWszystkieTerminyResponse(soap, n, NULL, NULL, NULL);
}

inline struct z1__usunWszystkieTerminyResponse * soap_new_req_z1__usunWszystkieTerminyResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__usunWszystkieTerminyResponse *_p = soap_new_z1__usunWszystkieTerminyResponse(soap);
	if (_p)
	{	soap_default_z1__usunWszystkieTerminyResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}

inline struct z1__usunWszystkieTerminyResponse * soap_new_set_z1__usunWszystkieTerminyResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__usunWszystkieTerminyResponse *_p = soap_new_z1__usunWszystkieTerminyResponse(soap);
	if (_p)
	{	soap_default_z1__usunWszystkieTerminyResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__usunWszystkieTerminyResponse(struct soap*, const struct z1__usunWszystkieTerminyResponse *, const char*, const char*);

inline int soap_write_z1__usunWszystkieTerminyResponse(struct soap *soap, struct z1__usunWszystkieTerminyResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__usunWszystkieTerminyResponse(soap, p), 0) || soap_put_z1__usunWszystkieTerminyResponse(soap, p, "z1:usunWszystkieTerminyResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__usunWszystkieTerminyResponse * SOAP_FMAC4 soap_get_z1__usunWszystkieTerminyResponse(struct soap*, struct z1__usunWszystkieTerminyResponse *, const char*, const char*);

inline int soap_read_z1__usunWszystkieTerminyResponse(struct soap *soap, struct z1__usunWszystkieTerminyResponse *p)
{	if (p)
	{	soap_default_z1__usunWszystkieTerminyResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__usunWszystkieTerminyResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__usunWszystkieTematy_DEFINED
#define SOAP_TYPE_z1__usunWszystkieTematy_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__usunWszystkieTematy(struct soap*, struct z1__usunWszystkieTematy *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__usunWszystkieTematy(struct soap*, const struct z1__usunWszystkieTematy *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__usunWszystkieTematy(struct soap*, const char*, int, const struct z1__usunWszystkieTematy *, const char*);
SOAP_FMAC3 struct z1__usunWszystkieTematy * SOAP_FMAC4 soap_in_z1__usunWszystkieTematy(struct soap*, const char*, struct z1__usunWszystkieTematy *, const char*);
SOAP_FMAC1 struct z1__usunWszystkieTematy * SOAP_FMAC2 soap_instantiate_z1__usunWszystkieTematy(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__usunWszystkieTematy * soap_new_z1__usunWszystkieTematy(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__usunWszystkieTematy(soap, n, NULL, NULL, NULL);
}

inline struct z1__usunWszystkieTematy * soap_new_req_z1__usunWszystkieTematy(
	struct soap *soap,
	const std::string& ID)
{	struct z1__usunWszystkieTematy *_p = soap_new_z1__usunWszystkieTematy(soap);
	if (_p)
	{	soap_default_z1__usunWszystkieTematy(soap, _p);
		_p->ID = ID;
	}
	return _p;
}

inline struct z1__usunWszystkieTematy * soap_new_set_z1__usunWszystkieTematy(
	struct soap *soap,
	const std::string& ID)
{	struct z1__usunWszystkieTematy *_p = soap_new_z1__usunWszystkieTematy(soap);
	if (_p)
	{	soap_default_z1__usunWszystkieTematy(soap, _p);
		_p->ID = ID;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__usunWszystkieTematy(struct soap*, const struct z1__usunWszystkieTematy *, const char*, const char*);

inline int soap_write_z1__usunWszystkieTematy(struct soap *soap, struct z1__usunWszystkieTematy const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__usunWszystkieTematy(soap, p), 0) || soap_put_z1__usunWszystkieTematy(soap, p, "z1:usunWszystkieTematy", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__usunWszystkieTematy * SOAP_FMAC4 soap_get_z1__usunWszystkieTematy(struct soap*, struct z1__usunWszystkieTematy *, const char*, const char*);

inline int soap_read_z1__usunWszystkieTematy(struct soap *soap, struct z1__usunWszystkieTematy *p)
{	if (p)
	{	soap_default_z1__usunWszystkieTematy(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__usunWszystkieTematy(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__usunWszystkieTematyResponse_DEFINED
#define SOAP_TYPE_z1__usunWszystkieTematyResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__usunWszystkieTematyResponse(struct soap*, struct z1__usunWszystkieTematyResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__usunWszystkieTematyResponse(struct soap*, const struct z1__usunWszystkieTematyResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__usunWszystkieTematyResponse(struct soap*, const char*, int, const struct z1__usunWszystkieTematyResponse *, const char*);
SOAP_FMAC3 struct z1__usunWszystkieTematyResponse * SOAP_FMAC4 soap_in_z1__usunWszystkieTematyResponse(struct soap*, const char*, struct z1__usunWszystkieTematyResponse *, const char*);
SOAP_FMAC1 struct z1__usunWszystkieTematyResponse * SOAP_FMAC2 soap_instantiate_z1__usunWszystkieTematyResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__usunWszystkieTematyResponse * soap_new_z1__usunWszystkieTematyResponse(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__usunWszystkieTematyResponse(soap, n, NULL, NULL, NULL);
}

inline struct z1__usunWszystkieTematyResponse * soap_new_req_z1__usunWszystkieTematyResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__usunWszystkieTematyResponse *_p = soap_new_z1__usunWszystkieTematyResponse(soap);
	if (_p)
	{	soap_default_z1__usunWszystkieTematyResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}

inline struct z1__usunWszystkieTematyResponse * soap_new_set_z1__usunWszystkieTematyResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__usunWszystkieTematyResponse *_p = soap_new_z1__usunWszystkieTematyResponse(soap);
	if (_p)
	{	soap_default_z1__usunWszystkieTematyResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__usunWszystkieTematyResponse(struct soap*, const struct z1__usunWszystkieTematyResponse *, const char*, const char*);

inline int soap_write_z1__usunWszystkieTematyResponse(struct soap *soap, struct z1__usunWszystkieTematyResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__usunWszystkieTematyResponse(soap, p), 0) || soap_put_z1__usunWszystkieTematyResponse(soap, p, "z1:usunWszystkieTematyResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__usunWszystkieTematyResponse * SOAP_FMAC4 soap_get_z1__usunWszystkieTematyResponse(struct soap*, struct z1__usunWszystkieTematyResponse *, const char*, const char*);

inline int soap_read_z1__usunWszystkieTematyResponse(struct soap *soap, struct z1__usunWszystkieTematyResponse *p)
{	if (p)
	{	soap_default_z1__usunWszystkieTematyResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__usunWszystkieTematyResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__wypiszZTerminu_DEFINED
#define SOAP_TYPE_z1__wypiszZTerminu_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__wypiszZTerminu(struct soap*, struct z1__wypiszZTerminu *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__wypiszZTerminu(struct soap*, const struct z1__wypiszZTerminu *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__wypiszZTerminu(struct soap*, const char*, int, const struct z1__wypiszZTerminu *, const char*);
SOAP_FMAC3 struct z1__wypiszZTerminu * SOAP_FMAC4 soap_in_z1__wypiszZTerminu(struct soap*, const char*, struct z1__wypiszZTerminu *, const char*);
SOAP_FMAC1 struct z1__wypiszZTerminu * SOAP_FMAC2 soap_instantiate_z1__wypiszZTerminu(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__wypiszZTerminu * soap_new_z1__wypiszZTerminu(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__wypiszZTerminu(soap, n, NULL, NULL, NULL);
}

inline struct z1__wypiszZTerminu * soap_new_req_z1__wypiszZTerminu(
	struct soap *soap,
	const std::string& terminID,
	const std::string& zapisywanyID)
{	struct z1__wypiszZTerminu *_p = soap_new_z1__wypiszZTerminu(soap);
	if (_p)
	{	soap_default_z1__wypiszZTerminu(soap, _p);
		_p->terminID = terminID;
		_p->zapisywanyID = zapisywanyID;
	}
	return _p;
}

inline struct z1__wypiszZTerminu * soap_new_set_z1__wypiszZTerminu(
	struct soap *soap,
	const std::string& terminID,
	const std::string& zapisywanyID)
{	struct z1__wypiszZTerminu *_p = soap_new_z1__wypiszZTerminu(soap);
	if (_p)
	{	soap_default_z1__wypiszZTerminu(soap, _p);
		_p->terminID = terminID;
		_p->zapisywanyID = zapisywanyID;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__wypiszZTerminu(struct soap*, const struct z1__wypiszZTerminu *, const char*, const char*);

inline int soap_write_z1__wypiszZTerminu(struct soap *soap, struct z1__wypiszZTerminu const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__wypiszZTerminu(soap, p), 0) || soap_put_z1__wypiszZTerminu(soap, p, "z1:wypiszZTerminu", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__wypiszZTerminu * SOAP_FMAC4 soap_get_z1__wypiszZTerminu(struct soap*, struct z1__wypiszZTerminu *, const char*, const char*);

inline int soap_read_z1__wypiszZTerminu(struct soap *soap, struct z1__wypiszZTerminu *p)
{	if (p)
	{	soap_default_z1__wypiszZTerminu(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__wypiszZTerminu(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__wypiszZTerminuResponse_DEFINED
#define SOAP_TYPE_z1__wypiszZTerminuResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__wypiszZTerminuResponse(struct soap*, struct z1__wypiszZTerminuResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__wypiszZTerminuResponse(struct soap*, const struct z1__wypiszZTerminuResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__wypiszZTerminuResponse(struct soap*, const char*, int, const struct z1__wypiszZTerminuResponse *, const char*);
SOAP_FMAC3 struct z1__wypiszZTerminuResponse * SOAP_FMAC4 soap_in_z1__wypiszZTerminuResponse(struct soap*, const char*, struct z1__wypiszZTerminuResponse *, const char*);
SOAP_FMAC1 struct z1__wypiszZTerminuResponse * SOAP_FMAC2 soap_instantiate_z1__wypiszZTerminuResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__wypiszZTerminuResponse * soap_new_z1__wypiszZTerminuResponse(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__wypiszZTerminuResponse(soap, n, NULL, NULL, NULL);
}

inline struct z1__wypiszZTerminuResponse * soap_new_req_z1__wypiszZTerminuResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__wypiszZTerminuResponse *_p = soap_new_z1__wypiszZTerminuResponse(soap);
	if (_p)
	{	soap_default_z1__wypiszZTerminuResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}

inline struct z1__wypiszZTerminuResponse * soap_new_set_z1__wypiszZTerminuResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__wypiszZTerminuResponse *_p = soap_new_z1__wypiszZTerminuResponse(soap);
	if (_p)
	{	soap_default_z1__wypiszZTerminuResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__wypiszZTerminuResponse(struct soap*, const struct z1__wypiszZTerminuResponse *, const char*, const char*);

inline int soap_write_z1__wypiszZTerminuResponse(struct soap *soap, struct z1__wypiszZTerminuResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__wypiszZTerminuResponse(soap, p), 0) || soap_put_z1__wypiszZTerminuResponse(soap, p, "z1:wypiszZTerminuResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__wypiszZTerminuResponse * SOAP_FMAC4 soap_get_z1__wypiszZTerminuResponse(struct soap*, struct z1__wypiszZTerminuResponse *, const char*, const char*);

inline int soap_read_z1__wypiszZTerminuResponse(struct soap *soap, struct z1__wypiszZTerminuResponse *p)
{	if (p)
	{	soap_default_z1__wypiszZTerminuResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__wypiszZTerminuResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__wypiszZProjektu_DEFINED
#define SOAP_TYPE_z1__wypiszZProjektu_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__wypiszZProjektu(struct soap*, struct z1__wypiszZProjektu *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__wypiszZProjektu(struct soap*, const struct z1__wypiszZProjektu *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__wypiszZProjektu(struct soap*, const char*, int, const struct z1__wypiszZProjektu *, const char*);
SOAP_FMAC3 struct z1__wypiszZProjektu * SOAP_FMAC4 soap_in_z1__wypiszZProjektu(struct soap*, const char*, struct z1__wypiszZProjektu *, const char*);
SOAP_FMAC1 struct z1__wypiszZProjektu * SOAP_FMAC2 soap_instantiate_z1__wypiszZProjektu(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__wypiszZProjektu * soap_new_z1__wypiszZProjektu(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__wypiszZProjektu(soap, n, NULL, NULL, NULL);
}

inline struct z1__wypiszZProjektu * soap_new_req_z1__wypiszZProjektu(
	struct soap *soap,
	const std::string& projektID,
	const std::string& zapisywanyID)
{	struct z1__wypiszZProjektu *_p = soap_new_z1__wypiszZProjektu(soap);
	if (_p)
	{	soap_default_z1__wypiszZProjektu(soap, _p);
		_p->projektID = projektID;
		_p->zapisywanyID = zapisywanyID;
	}
	return _p;
}

inline struct z1__wypiszZProjektu * soap_new_set_z1__wypiszZProjektu(
	struct soap *soap,
	const std::string& projektID,
	const std::string& zapisywanyID)
{	struct z1__wypiszZProjektu *_p = soap_new_z1__wypiszZProjektu(soap);
	if (_p)
	{	soap_default_z1__wypiszZProjektu(soap, _p);
		_p->projektID = projektID;
		_p->zapisywanyID = zapisywanyID;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__wypiszZProjektu(struct soap*, const struct z1__wypiszZProjektu *, const char*, const char*);

inline int soap_write_z1__wypiszZProjektu(struct soap *soap, struct z1__wypiszZProjektu const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__wypiszZProjektu(soap, p), 0) || soap_put_z1__wypiszZProjektu(soap, p, "z1:wypiszZProjektu", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__wypiszZProjektu * SOAP_FMAC4 soap_get_z1__wypiszZProjektu(struct soap*, struct z1__wypiszZProjektu *, const char*, const char*);

inline int soap_read_z1__wypiszZProjektu(struct soap *soap, struct z1__wypiszZProjektu *p)
{	if (p)
	{	soap_default_z1__wypiszZProjektu(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__wypiszZProjektu(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__wypiszZProjektuResponse_DEFINED
#define SOAP_TYPE_z1__wypiszZProjektuResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__wypiszZProjektuResponse(struct soap*, struct z1__wypiszZProjektuResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__wypiszZProjektuResponse(struct soap*, const struct z1__wypiszZProjektuResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__wypiszZProjektuResponse(struct soap*, const char*, int, const struct z1__wypiszZProjektuResponse *, const char*);
SOAP_FMAC3 struct z1__wypiszZProjektuResponse * SOAP_FMAC4 soap_in_z1__wypiszZProjektuResponse(struct soap*, const char*, struct z1__wypiszZProjektuResponse *, const char*);
SOAP_FMAC1 struct z1__wypiszZProjektuResponse * SOAP_FMAC2 soap_instantiate_z1__wypiszZProjektuResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__wypiszZProjektuResponse * soap_new_z1__wypiszZProjektuResponse(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__wypiszZProjektuResponse(soap, n, NULL, NULL, NULL);
}

inline struct z1__wypiszZProjektuResponse * soap_new_req_z1__wypiszZProjektuResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__wypiszZProjektuResponse *_p = soap_new_z1__wypiszZProjektuResponse(soap);
	if (_p)
	{	soap_default_z1__wypiszZProjektuResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}

inline struct z1__wypiszZProjektuResponse * soap_new_set_z1__wypiszZProjektuResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__wypiszZProjektuResponse *_p = soap_new_z1__wypiszZProjektuResponse(soap);
	if (_p)
	{	soap_default_z1__wypiszZProjektuResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__wypiszZProjektuResponse(struct soap*, const struct z1__wypiszZProjektuResponse *, const char*, const char*);

inline int soap_write_z1__wypiszZProjektuResponse(struct soap *soap, struct z1__wypiszZProjektuResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__wypiszZProjektuResponse(soap, p), 0) || soap_put_z1__wypiszZProjektuResponse(soap, p, "z1:wypiszZProjektuResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__wypiszZProjektuResponse * SOAP_FMAC4 soap_get_z1__wypiszZProjektuResponse(struct soap*, struct z1__wypiszZProjektuResponse *, const char*, const char*);

inline int soap_read_z1__wypiszZProjektuResponse(struct soap *soap, struct z1__wypiszZProjektuResponse *p)
{	if (p)
	{	soap_default_z1__wypiszZProjektuResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__wypiszZProjektuResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__edytujTermin_DEFINED
#define SOAP_TYPE_z1__edytujTermin_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__edytujTermin(struct soap*, struct z1__edytujTermin *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__edytujTermin(struct soap*, const struct z1__edytujTermin *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__edytujTermin(struct soap*, const char*, int, const struct z1__edytujTermin *, const char*);
SOAP_FMAC3 struct z1__edytujTermin * SOAP_FMAC4 soap_in_z1__edytujTermin(struct soap*, const char*, struct z1__edytujTermin *, const char*);
SOAP_FMAC1 struct z1__edytujTermin * SOAP_FMAC2 soap_instantiate_z1__edytujTermin(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__edytujTermin * soap_new_z1__edytujTermin(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__edytujTermin(soap, n, NULL, NULL, NULL);
}

inline struct z1__edytujTermin * soap_new_req_z1__edytujTermin(
	struct soap *soap,
	const std::string& przedmiotID,
	const std::string& terminID,
	const std::string& salaID)
{	struct z1__edytujTermin *_p = soap_new_z1__edytujTermin(soap);
	if (_p)
	{	soap_default_z1__edytujTermin(soap, _p);
		_p->przedmiotID = przedmiotID;
		_p->terminID = terminID;
		_p->salaID = salaID;
	}
	return _p;
}

inline struct z1__edytujTermin * soap_new_set_z1__edytujTermin(
	struct soap *soap,
	const std::string& przedmiotID,
	const std::string& terminID,
	const std::string& salaID,
	z1__termin *termin)
{	struct z1__edytujTermin *_p = soap_new_z1__edytujTermin(soap);
	if (_p)
	{	soap_default_z1__edytujTermin(soap, _p);
		_p->przedmiotID = przedmiotID;
		_p->terminID = terminID;
		_p->salaID = salaID;
		_p->termin = termin;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__edytujTermin(struct soap*, const struct z1__edytujTermin *, const char*, const char*);

inline int soap_write_z1__edytujTermin(struct soap *soap, struct z1__edytujTermin const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__edytujTermin(soap, p), 0) || soap_put_z1__edytujTermin(soap, p, "z1:edytujTermin", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__edytujTermin * SOAP_FMAC4 soap_get_z1__edytujTermin(struct soap*, struct z1__edytujTermin *, const char*, const char*);

inline int soap_read_z1__edytujTermin(struct soap *soap, struct z1__edytujTermin *p)
{	if (p)
	{	soap_default_z1__edytujTermin(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__edytujTermin(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__edytujTerminResponse_DEFINED
#define SOAP_TYPE_z1__edytujTerminResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__edytujTerminResponse(struct soap*, struct z1__edytujTerminResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__edytujTerminResponse(struct soap*, const struct z1__edytujTerminResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__edytujTerminResponse(struct soap*, const char*, int, const struct z1__edytujTerminResponse *, const char*);
SOAP_FMAC3 struct z1__edytujTerminResponse * SOAP_FMAC4 soap_in_z1__edytujTerminResponse(struct soap*, const char*, struct z1__edytujTerminResponse *, const char*);
SOAP_FMAC1 struct z1__edytujTerminResponse * SOAP_FMAC2 soap_instantiate_z1__edytujTerminResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__edytujTerminResponse * soap_new_z1__edytujTerminResponse(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__edytujTerminResponse(soap, n, NULL, NULL, NULL);
}

inline struct z1__edytujTerminResponse * soap_new_req_z1__edytujTerminResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__edytujTerminResponse *_p = soap_new_z1__edytujTerminResponse(soap);
	if (_p)
	{	soap_default_z1__edytujTerminResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}

inline struct z1__edytujTerminResponse * soap_new_set_z1__edytujTerminResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__edytujTerminResponse *_p = soap_new_z1__edytujTerminResponse(soap);
	if (_p)
	{	soap_default_z1__edytujTerminResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__edytujTerminResponse(struct soap*, const struct z1__edytujTerminResponse *, const char*, const char*);

inline int soap_write_z1__edytujTerminResponse(struct soap *soap, struct z1__edytujTerminResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__edytujTerminResponse(soap, p), 0) || soap_put_z1__edytujTerminResponse(soap, p, "z1:edytujTerminResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__edytujTerminResponse * SOAP_FMAC4 soap_get_z1__edytujTerminResponse(struct soap*, struct z1__edytujTerminResponse *, const char*, const char*);

inline int soap_read_z1__edytujTerminResponse(struct soap *soap, struct z1__edytujTerminResponse *p)
{	if (p)
	{	soap_default_z1__edytujTerminResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__edytujTerminResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__edytujProjekt_DEFINED
#define SOAP_TYPE_z1__edytujProjekt_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__edytujProjekt(struct soap*, struct z1__edytujProjekt *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__edytujProjekt(struct soap*, const struct z1__edytujProjekt *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__edytujProjekt(struct soap*, const char*, int, const struct z1__edytujProjekt *, const char*);
SOAP_FMAC3 struct z1__edytujProjekt * SOAP_FMAC4 soap_in_z1__edytujProjekt(struct soap*, const char*, struct z1__edytujProjekt *, const char*);
SOAP_FMAC1 struct z1__edytujProjekt * SOAP_FMAC2 soap_instantiate_z1__edytujProjekt(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__edytujProjekt * soap_new_z1__edytujProjekt(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__edytujProjekt(soap, n, NULL, NULL, NULL);
}

inline struct z1__edytujProjekt * soap_new_req_z1__edytujProjekt(
	struct soap *soap,
	const std::string& przedmiotID,
	const std::string& projektID)
{	struct z1__edytujProjekt *_p = soap_new_z1__edytujProjekt(soap);
	if (_p)
	{	soap_default_z1__edytujProjekt(soap, _p);
		_p->przedmiotID = przedmiotID;
		_p->projektID = projektID;
	}
	return _p;
}

inline struct z1__edytujProjekt * soap_new_set_z1__edytujProjekt(
	struct soap *soap,
	const std::string& przedmiotID,
	const std::string& projektID,
	z1__temat *projekt)
{	struct z1__edytujProjekt *_p = soap_new_z1__edytujProjekt(soap);
	if (_p)
	{	soap_default_z1__edytujProjekt(soap, _p);
		_p->przedmiotID = przedmiotID;
		_p->projektID = projektID;
		_p->projekt = projekt;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__edytujProjekt(struct soap*, const struct z1__edytujProjekt *, const char*, const char*);

inline int soap_write_z1__edytujProjekt(struct soap *soap, struct z1__edytujProjekt const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__edytujProjekt(soap, p), 0) || soap_put_z1__edytujProjekt(soap, p, "z1:edytujProjekt", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__edytujProjekt * SOAP_FMAC4 soap_get_z1__edytujProjekt(struct soap*, struct z1__edytujProjekt *, const char*, const char*);

inline int soap_read_z1__edytujProjekt(struct soap *soap, struct z1__edytujProjekt *p)
{	if (p)
	{	soap_default_z1__edytujProjekt(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__edytujProjekt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__edytujProjektResponse_DEFINED
#define SOAP_TYPE_z1__edytujProjektResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__edytujProjektResponse(struct soap*, struct z1__edytujProjektResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__edytujProjektResponse(struct soap*, const struct z1__edytujProjektResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__edytujProjektResponse(struct soap*, const char*, int, const struct z1__edytujProjektResponse *, const char*);
SOAP_FMAC3 struct z1__edytujProjektResponse * SOAP_FMAC4 soap_in_z1__edytujProjektResponse(struct soap*, const char*, struct z1__edytujProjektResponse *, const char*);
SOAP_FMAC1 struct z1__edytujProjektResponse * SOAP_FMAC2 soap_instantiate_z1__edytujProjektResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__edytujProjektResponse * soap_new_z1__edytujProjektResponse(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__edytujProjektResponse(soap, n, NULL, NULL, NULL);
}

inline struct z1__edytujProjektResponse * soap_new_req_z1__edytujProjektResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__edytujProjektResponse *_p = soap_new_z1__edytujProjektResponse(soap);
	if (_p)
	{	soap_default_z1__edytujProjektResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}

inline struct z1__edytujProjektResponse * soap_new_set_z1__edytujProjektResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__edytujProjektResponse *_p = soap_new_z1__edytujProjektResponse(soap);
	if (_p)
	{	soap_default_z1__edytujProjektResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__edytujProjektResponse(struct soap*, const struct z1__edytujProjektResponse *, const char*, const char*);

inline int soap_write_z1__edytujProjektResponse(struct soap *soap, struct z1__edytujProjektResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__edytujProjektResponse(soap, p), 0) || soap_put_z1__edytujProjektResponse(soap, p, "z1:edytujProjektResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__edytujProjektResponse * SOAP_FMAC4 soap_get_z1__edytujProjektResponse(struct soap*, struct z1__edytujProjektResponse *, const char*, const char*);

inline int soap_read_z1__edytujProjektResponse(struct soap *soap, struct z1__edytujProjektResponse *p)
{	if (p)
	{	soap_default_z1__edytujProjektResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__edytujProjektResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__usunPrzedmiot_DEFINED
#define SOAP_TYPE_z1__usunPrzedmiot_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__usunPrzedmiot(struct soap*, struct z1__usunPrzedmiot *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__usunPrzedmiot(struct soap*, const struct z1__usunPrzedmiot *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__usunPrzedmiot(struct soap*, const char*, int, const struct z1__usunPrzedmiot *, const char*);
SOAP_FMAC3 struct z1__usunPrzedmiot * SOAP_FMAC4 soap_in_z1__usunPrzedmiot(struct soap*, const char*, struct z1__usunPrzedmiot *, const char*);
SOAP_FMAC1 struct z1__usunPrzedmiot * SOAP_FMAC2 soap_instantiate_z1__usunPrzedmiot(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__usunPrzedmiot * soap_new_z1__usunPrzedmiot(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__usunPrzedmiot(soap, n, NULL, NULL, NULL);
}

inline struct z1__usunPrzedmiot * soap_new_req_z1__usunPrzedmiot(
	struct soap *soap,
	const std::string& ID)
{	struct z1__usunPrzedmiot *_p = soap_new_z1__usunPrzedmiot(soap);
	if (_p)
	{	soap_default_z1__usunPrzedmiot(soap, _p);
		_p->ID = ID;
	}
	return _p;
}

inline struct z1__usunPrzedmiot * soap_new_set_z1__usunPrzedmiot(
	struct soap *soap,
	const std::string& ID)
{	struct z1__usunPrzedmiot *_p = soap_new_z1__usunPrzedmiot(soap);
	if (_p)
	{	soap_default_z1__usunPrzedmiot(soap, _p);
		_p->ID = ID;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__usunPrzedmiot(struct soap*, const struct z1__usunPrzedmiot *, const char*, const char*);

inline int soap_write_z1__usunPrzedmiot(struct soap *soap, struct z1__usunPrzedmiot const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__usunPrzedmiot(soap, p), 0) || soap_put_z1__usunPrzedmiot(soap, p, "z1:usunPrzedmiot", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__usunPrzedmiot * SOAP_FMAC4 soap_get_z1__usunPrzedmiot(struct soap*, struct z1__usunPrzedmiot *, const char*, const char*);

inline int soap_read_z1__usunPrzedmiot(struct soap *soap, struct z1__usunPrzedmiot *p)
{	if (p)
	{	soap_default_z1__usunPrzedmiot(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__usunPrzedmiot(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__usunPrzedmiotResponse_DEFINED
#define SOAP_TYPE_z1__usunPrzedmiotResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__usunPrzedmiotResponse(struct soap*, struct z1__usunPrzedmiotResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__usunPrzedmiotResponse(struct soap*, const struct z1__usunPrzedmiotResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__usunPrzedmiotResponse(struct soap*, const char*, int, const struct z1__usunPrzedmiotResponse *, const char*);
SOAP_FMAC3 struct z1__usunPrzedmiotResponse * SOAP_FMAC4 soap_in_z1__usunPrzedmiotResponse(struct soap*, const char*, struct z1__usunPrzedmiotResponse *, const char*);
SOAP_FMAC1 struct z1__usunPrzedmiotResponse * SOAP_FMAC2 soap_instantiate_z1__usunPrzedmiotResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__usunPrzedmiotResponse * soap_new_z1__usunPrzedmiotResponse(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__usunPrzedmiotResponse(soap, n, NULL, NULL, NULL);
}

inline struct z1__usunPrzedmiotResponse * soap_new_req_z1__usunPrzedmiotResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__usunPrzedmiotResponse *_p = soap_new_z1__usunPrzedmiotResponse(soap);
	if (_p)
	{	soap_default_z1__usunPrzedmiotResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}

inline struct z1__usunPrzedmiotResponse * soap_new_set_z1__usunPrzedmiotResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__usunPrzedmiotResponse *_p = soap_new_z1__usunPrzedmiotResponse(soap);
	if (_p)
	{	soap_default_z1__usunPrzedmiotResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__usunPrzedmiotResponse(struct soap*, const struct z1__usunPrzedmiotResponse *, const char*, const char*);

inline int soap_write_z1__usunPrzedmiotResponse(struct soap *soap, struct z1__usunPrzedmiotResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__usunPrzedmiotResponse(soap, p), 0) || soap_put_z1__usunPrzedmiotResponse(soap, p, "z1:usunPrzedmiotResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__usunPrzedmiotResponse * SOAP_FMAC4 soap_get_z1__usunPrzedmiotResponse(struct soap*, struct z1__usunPrzedmiotResponse *, const char*, const char*);

inline int soap_read_z1__usunPrzedmiotResponse(struct soap *soap, struct z1__usunPrzedmiotResponse *p)
{	if (p)
	{	soap_default_z1__usunPrzedmiotResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__usunPrzedmiotResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__usunWszystkichZPrzedmiotu_DEFINED
#define SOAP_TYPE_z1__usunWszystkichZPrzedmiotu_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__usunWszystkichZPrzedmiotu(struct soap*, struct z1__usunWszystkichZPrzedmiotu *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__usunWszystkichZPrzedmiotu(struct soap*, const struct z1__usunWszystkichZPrzedmiotu *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__usunWszystkichZPrzedmiotu(struct soap*, const char*, int, const struct z1__usunWszystkichZPrzedmiotu *, const char*);
SOAP_FMAC3 struct z1__usunWszystkichZPrzedmiotu * SOAP_FMAC4 soap_in_z1__usunWszystkichZPrzedmiotu(struct soap*, const char*, struct z1__usunWszystkichZPrzedmiotu *, const char*);
SOAP_FMAC1 struct z1__usunWszystkichZPrzedmiotu * SOAP_FMAC2 soap_instantiate_z1__usunWszystkichZPrzedmiotu(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__usunWszystkichZPrzedmiotu * soap_new_z1__usunWszystkichZPrzedmiotu(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__usunWszystkichZPrzedmiotu(soap, n, NULL, NULL, NULL);
}

inline struct z1__usunWszystkichZPrzedmiotu * soap_new_req_z1__usunWszystkichZPrzedmiotu(
	struct soap *soap,
	const std::string& ID)
{	struct z1__usunWszystkichZPrzedmiotu *_p = soap_new_z1__usunWszystkichZPrzedmiotu(soap);
	if (_p)
	{	soap_default_z1__usunWszystkichZPrzedmiotu(soap, _p);
		_p->ID = ID;
	}
	return _p;
}

inline struct z1__usunWszystkichZPrzedmiotu * soap_new_set_z1__usunWszystkichZPrzedmiotu(
	struct soap *soap,
	const std::string& ID)
{	struct z1__usunWszystkichZPrzedmiotu *_p = soap_new_z1__usunWszystkichZPrzedmiotu(soap);
	if (_p)
	{	soap_default_z1__usunWszystkichZPrzedmiotu(soap, _p);
		_p->ID = ID;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__usunWszystkichZPrzedmiotu(struct soap*, const struct z1__usunWszystkichZPrzedmiotu *, const char*, const char*);

inline int soap_write_z1__usunWszystkichZPrzedmiotu(struct soap *soap, struct z1__usunWszystkichZPrzedmiotu const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__usunWszystkichZPrzedmiotu(soap, p), 0) || soap_put_z1__usunWszystkichZPrzedmiotu(soap, p, "z1:usunWszystkichZPrzedmiotu", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__usunWszystkichZPrzedmiotu * SOAP_FMAC4 soap_get_z1__usunWszystkichZPrzedmiotu(struct soap*, struct z1__usunWszystkichZPrzedmiotu *, const char*, const char*);

inline int soap_read_z1__usunWszystkichZPrzedmiotu(struct soap *soap, struct z1__usunWszystkichZPrzedmiotu *p)
{	if (p)
	{	soap_default_z1__usunWszystkichZPrzedmiotu(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__usunWszystkichZPrzedmiotu(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__usunWszystkichZPrzedmiotuResponse_DEFINED
#define SOAP_TYPE_z1__usunWszystkichZPrzedmiotuResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__usunWszystkichZPrzedmiotuResponse(struct soap*, struct z1__usunWszystkichZPrzedmiotuResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__usunWszystkichZPrzedmiotuResponse(struct soap*, const struct z1__usunWszystkichZPrzedmiotuResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__usunWszystkichZPrzedmiotuResponse(struct soap*, const char*, int, const struct z1__usunWszystkichZPrzedmiotuResponse *, const char*);
SOAP_FMAC3 struct z1__usunWszystkichZPrzedmiotuResponse * SOAP_FMAC4 soap_in_z1__usunWszystkichZPrzedmiotuResponse(struct soap*, const char*, struct z1__usunWszystkichZPrzedmiotuResponse *, const char*);
SOAP_FMAC1 struct z1__usunWszystkichZPrzedmiotuResponse * SOAP_FMAC2 soap_instantiate_z1__usunWszystkichZPrzedmiotuResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__usunWszystkichZPrzedmiotuResponse * soap_new_z1__usunWszystkichZPrzedmiotuResponse(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__usunWszystkichZPrzedmiotuResponse(soap, n, NULL, NULL, NULL);
}

inline struct z1__usunWszystkichZPrzedmiotuResponse * soap_new_req_z1__usunWszystkichZPrzedmiotuResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__usunWszystkichZPrzedmiotuResponse *_p = soap_new_z1__usunWszystkichZPrzedmiotuResponse(soap);
	if (_p)
	{	soap_default_z1__usunWszystkichZPrzedmiotuResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}

inline struct z1__usunWszystkichZPrzedmiotuResponse * soap_new_set_z1__usunWszystkichZPrzedmiotuResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__usunWszystkichZPrzedmiotuResponse *_p = soap_new_z1__usunWszystkichZPrzedmiotuResponse(soap);
	if (_p)
	{	soap_default_z1__usunWszystkichZPrzedmiotuResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__usunWszystkichZPrzedmiotuResponse(struct soap*, const struct z1__usunWszystkichZPrzedmiotuResponse *, const char*, const char*);

inline int soap_write_z1__usunWszystkichZPrzedmiotuResponse(struct soap *soap, struct z1__usunWszystkichZPrzedmiotuResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__usunWszystkichZPrzedmiotuResponse(soap, p), 0) || soap_put_z1__usunWszystkichZPrzedmiotuResponse(soap, p, "z1:usunWszystkichZPrzedmiotuResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__usunWszystkichZPrzedmiotuResponse * SOAP_FMAC4 soap_get_z1__usunWszystkichZPrzedmiotuResponse(struct soap*, struct z1__usunWszystkichZPrzedmiotuResponse *, const char*, const char*);

inline int soap_read_z1__usunWszystkichZPrzedmiotuResponse(struct soap *soap, struct z1__usunWszystkichZPrzedmiotuResponse *p)
{	if (p)
	{	soap_default_z1__usunWszystkichZPrzedmiotuResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__usunWszystkichZPrzedmiotuResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__usunStudentaZPrzedmiotu_DEFINED
#define SOAP_TYPE_z1__usunStudentaZPrzedmiotu_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__usunStudentaZPrzedmiotu(struct soap*, struct z1__usunStudentaZPrzedmiotu *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__usunStudentaZPrzedmiotu(struct soap*, const struct z1__usunStudentaZPrzedmiotu *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__usunStudentaZPrzedmiotu(struct soap*, const char*, int, const struct z1__usunStudentaZPrzedmiotu *, const char*);
SOAP_FMAC3 struct z1__usunStudentaZPrzedmiotu * SOAP_FMAC4 soap_in_z1__usunStudentaZPrzedmiotu(struct soap*, const char*, struct z1__usunStudentaZPrzedmiotu *, const char*);
SOAP_FMAC1 struct z1__usunStudentaZPrzedmiotu * SOAP_FMAC2 soap_instantiate_z1__usunStudentaZPrzedmiotu(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__usunStudentaZPrzedmiotu * soap_new_z1__usunStudentaZPrzedmiotu(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__usunStudentaZPrzedmiotu(soap, n, NULL, NULL, NULL);
}

inline struct z1__usunStudentaZPrzedmiotu * soap_new_req_z1__usunStudentaZPrzedmiotu(
	struct soap *soap,
	const std::string& przedmiotID)
{	struct z1__usunStudentaZPrzedmiotu *_p = soap_new_z1__usunStudentaZPrzedmiotu(soap);
	if (_p)
	{	soap_default_z1__usunStudentaZPrzedmiotu(soap, _p);
		_p->przedmiotID = przedmiotID;
	}
	return _p;
}

inline struct z1__usunStudentaZPrzedmiotu * soap_new_set_z1__usunStudentaZPrzedmiotu(
	struct soap *soap,
	const std::string& przedmiotID,
	z1__student *student)
{	struct z1__usunStudentaZPrzedmiotu *_p = soap_new_z1__usunStudentaZPrzedmiotu(soap);
	if (_p)
	{	soap_default_z1__usunStudentaZPrzedmiotu(soap, _p);
		_p->przedmiotID = przedmiotID;
		_p->student = student;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__usunStudentaZPrzedmiotu(struct soap*, const struct z1__usunStudentaZPrzedmiotu *, const char*, const char*);

inline int soap_write_z1__usunStudentaZPrzedmiotu(struct soap *soap, struct z1__usunStudentaZPrzedmiotu const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__usunStudentaZPrzedmiotu(soap, p), 0) || soap_put_z1__usunStudentaZPrzedmiotu(soap, p, "z1:usunStudentaZPrzedmiotu", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__usunStudentaZPrzedmiotu * SOAP_FMAC4 soap_get_z1__usunStudentaZPrzedmiotu(struct soap*, struct z1__usunStudentaZPrzedmiotu *, const char*, const char*);

inline int soap_read_z1__usunStudentaZPrzedmiotu(struct soap *soap, struct z1__usunStudentaZPrzedmiotu *p)
{	if (p)
	{	soap_default_z1__usunStudentaZPrzedmiotu(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__usunStudentaZPrzedmiotu(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__usunStudentaZPrzedmiotuResponse_DEFINED
#define SOAP_TYPE_z1__usunStudentaZPrzedmiotuResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__usunStudentaZPrzedmiotuResponse(struct soap*, struct z1__usunStudentaZPrzedmiotuResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__usunStudentaZPrzedmiotuResponse(struct soap*, const struct z1__usunStudentaZPrzedmiotuResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__usunStudentaZPrzedmiotuResponse(struct soap*, const char*, int, const struct z1__usunStudentaZPrzedmiotuResponse *, const char*);
SOAP_FMAC3 struct z1__usunStudentaZPrzedmiotuResponse * SOAP_FMAC4 soap_in_z1__usunStudentaZPrzedmiotuResponse(struct soap*, const char*, struct z1__usunStudentaZPrzedmiotuResponse *, const char*);
SOAP_FMAC1 struct z1__usunStudentaZPrzedmiotuResponse * SOAP_FMAC2 soap_instantiate_z1__usunStudentaZPrzedmiotuResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__usunStudentaZPrzedmiotuResponse * soap_new_z1__usunStudentaZPrzedmiotuResponse(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__usunStudentaZPrzedmiotuResponse(soap, n, NULL, NULL, NULL);
}

inline struct z1__usunStudentaZPrzedmiotuResponse * soap_new_req_z1__usunStudentaZPrzedmiotuResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__usunStudentaZPrzedmiotuResponse *_p = soap_new_z1__usunStudentaZPrzedmiotuResponse(soap);
	if (_p)
	{	soap_default_z1__usunStudentaZPrzedmiotuResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}

inline struct z1__usunStudentaZPrzedmiotuResponse * soap_new_set_z1__usunStudentaZPrzedmiotuResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__usunStudentaZPrzedmiotuResponse *_p = soap_new_z1__usunStudentaZPrzedmiotuResponse(soap);
	if (_p)
	{	soap_default_z1__usunStudentaZPrzedmiotuResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__usunStudentaZPrzedmiotuResponse(struct soap*, const struct z1__usunStudentaZPrzedmiotuResponse *, const char*, const char*);

inline int soap_write_z1__usunStudentaZPrzedmiotuResponse(struct soap *soap, struct z1__usunStudentaZPrzedmiotuResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__usunStudentaZPrzedmiotuResponse(soap, p), 0) || soap_put_z1__usunStudentaZPrzedmiotuResponse(soap, p, "z1:usunStudentaZPrzedmiotuResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__usunStudentaZPrzedmiotuResponse * SOAP_FMAC4 soap_get_z1__usunStudentaZPrzedmiotuResponse(struct soap*, struct z1__usunStudentaZPrzedmiotuResponse *, const char*, const char*);

inline int soap_read_z1__usunStudentaZPrzedmiotuResponse(struct soap *soap, struct z1__usunStudentaZPrzedmiotuResponse *p)
{	if (p)
	{	soap_default_z1__usunStudentaZPrzedmiotuResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__usunStudentaZPrzedmiotuResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__dodajStudenta_DEFINED
#define SOAP_TYPE_z1__dodajStudenta_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__dodajStudenta(struct soap*, struct z1__dodajStudenta *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__dodajStudenta(struct soap*, const struct z1__dodajStudenta *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__dodajStudenta(struct soap*, const char*, int, const struct z1__dodajStudenta *, const char*);
SOAP_FMAC3 struct z1__dodajStudenta * SOAP_FMAC4 soap_in_z1__dodajStudenta(struct soap*, const char*, struct z1__dodajStudenta *, const char*);
SOAP_FMAC1 struct z1__dodajStudenta * SOAP_FMAC2 soap_instantiate_z1__dodajStudenta(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__dodajStudenta * soap_new_z1__dodajStudenta(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__dodajStudenta(soap, n, NULL, NULL, NULL);
}

inline struct z1__dodajStudenta * soap_new_req_z1__dodajStudenta(
	struct soap *soap,
	const std::string& przedmiotID)
{	struct z1__dodajStudenta *_p = soap_new_z1__dodajStudenta(soap);
	if (_p)
	{	soap_default_z1__dodajStudenta(soap, _p);
		_p->przedmiotID = przedmiotID;
	}
	return _p;
}

inline struct z1__dodajStudenta * soap_new_set_z1__dodajStudenta(
	struct soap *soap,
	const std::string& przedmiotID,
	z1__student *student)
{	struct z1__dodajStudenta *_p = soap_new_z1__dodajStudenta(soap);
	if (_p)
	{	soap_default_z1__dodajStudenta(soap, _p);
		_p->przedmiotID = przedmiotID;
		_p->student = student;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__dodajStudenta(struct soap*, const struct z1__dodajStudenta *, const char*, const char*);

inline int soap_write_z1__dodajStudenta(struct soap *soap, struct z1__dodajStudenta const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__dodajStudenta(soap, p), 0) || soap_put_z1__dodajStudenta(soap, p, "z1:dodajStudenta", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__dodajStudenta * SOAP_FMAC4 soap_get_z1__dodajStudenta(struct soap*, struct z1__dodajStudenta *, const char*, const char*);

inline int soap_read_z1__dodajStudenta(struct soap *soap, struct z1__dodajStudenta *p)
{	if (p)
	{	soap_default_z1__dodajStudenta(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__dodajStudenta(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__dodajStudentaResponse_DEFINED
#define SOAP_TYPE_z1__dodajStudentaResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__dodajStudentaResponse(struct soap*, struct z1__dodajStudentaResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__dodajStudentaResponse(struct soap*, const struct z1__dodajStudentaResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__dodajStudentaResponse(struct soap*, const char*, int, const struct z1__dodajStudentaResponse *, const char*);
SOAP_FMAC3 struct z1__dodajStudentaResponse * SOAP_FMAC4 soap_in_z1__dodajStudentaResponse(struct soap*, const char*, struct z1__dodajStudentaResponse *, const char*);
SOAP_FMAC1 struct z1__dodajStudentaResponse * SOAP_FMAC2 soap_instantiate_z1__dodajStudentaResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__dodajStudentaResponse * soap_new_z1__dodajStudentaResponse(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__dodajStudentaResponse(soap, n, NULL, NULL, NULL);
}

inline struct z1__dodajStudentaResponse * soap_new_req_z1__dodajStudentaResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__dodajStudentaResponse *_p = soap_new_z1__dodajStudentaResponse(soap);
	if (_p)
	{	soap_default_z1__dodajStudentaResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}

inline struct z1__dodajStudentaResponse * soap_new_set_z1__dodajStudentaResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__dodajStudentaResponse *_p = soap_new_z1__dodajStudentaResponse(soap);
	if (_p)
	{	soap_default_z1__dodajStudentaResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__dodajStudentaResponse(struct soap*, const struct z1__dodajStudentaResponse *, const char*, const char*);

inline int soap_write_z1__dodajStudentaResponse(struct soap *soap, struct z1__dodajStudentaResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__dodajStudentaResponse(soap, p), 0) || soap_put_z1__dodajStudentaResponse(soap, p, "z1:dodajStudentaResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__dodajStudentaResponse * SOAP_FMAC4 soap_get_z1__dodajStudentaResponse(struct soap*, struct z1__dodajStudentaResponse *, const char*, const char*);

inline int soap_read_z1__dodajStudentaResponse(struct soap *soap, struct z1__dodajStudentaResponse *p)
{	if (p)
	{	soap_default_z1__dodajStudentaResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__dodajStudentaResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__usunProwadzacego_DEFINED
#define SOAP_TYPE_z1__usunProwadzacego_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__usunProwadzacego(struct soap*, struct z1__usunProwadzacego *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__usunProwadzacego(struct soap*, const struct z1__usunProwadzacego *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__usunProwadzacego(struct soap*, const char*, int, const struct z1__usunProwadzacego *, const char*);
SOAP_FMAC3 struct z1__usunProwadzacego * SOAP_FMAC4 soap_in_z1__usunProwadzacego(struct soap*, const char*, struct z1__usunProwadzacego *, const char*);
SOAP_FMAC1 struct z1__usunProwadzacego * SOAP_FMAC2 soap_instantiate_z1__usunProwadzacego(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__usunProwadzacego * soap_new_z1__usunProwadzacego(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__usunProwadzacego(soap, n, NULL, NULL, NULL);
}

inline struct z1__usunProwadzacego * soap_new_req_z1__usunProwadzacego(
	struct soap *soap,
	const std::string& ID)
{	struct z1__usunProwadzacego *_p = soap_new_z1__usunProwadzacego(soap);
	if (_p)
	{	soap_default_z1__usunProwadzacego(soap, _p);
		_p->ID = ID;
	}
	return _p;
}

inline struct z1__usunProwadzacego * soap_new_set_z1__usunProwadzacego(
	struct soap *soap,
	const std::string& ID)
{	struct z1__usunProwadzacego *_p = soap_new_z1__usunProwadzacego(soap);
	if (_p)
	{	soap_default_z1__usunProwadzacego(soap, _p);
		_p->ID = ID;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__usunProwadzacego(struct soap*, const struct z1__usunProwadzacego *, const char*, const char*);

inline int soap_write_z1__usunProwadzacego(struct soap *soap, struct z1__usunProwadzacego const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__usunProwadzacego(soap, p), 0) || soap_put_z1__usunProwadzacego(soap, p, "z1:usunProwadzacego", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__usunProwadzacego * SOAP_FMAC4 soap_get_z1__usunProwadzacego(struct soap*, struct z1__usunProwadzacego *, const char*, const char*);

inline int soap_read_z1__usunProwadzacego(struct soap *soap, struct z1__usunProwadzacego *p)
{	if (p)
	{	soap_default_z1__usunProwadzacego(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__usunProwadzacego(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__usunProwadzacegoResponse_DEFINED
#define SOAP_TYPE_z1__usunProwadzacegoResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__usunProwadzacegoResponse(struct soap*, struct z1__usunProwadzacegoResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__usunProwadzacegoResponse(struct soap*, const struct z1__usunProwadzacegoResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__usunProwadzacegoResponse(struct soap*, const char*, int, const struct z1__usunProwadzacegoResponse *, const char*);
SOAP_FMAC3 struct z1__usunProwadzacegoResponse * SOAP_FMAC4 soap_in_z1__usunProwadzacegoResponse(struct soap*, const char*, struct z1__usunProwadzacegoResponse *, const char*);
SOAP_FMAC1 struct z1__usunProwadzacegoResponse * SOAP_FMAC2 soap_instantiate_z1__usunProwadzacegoResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__usunProwadzacegoResponse * soap_new_z1__usunProwadzacegoResponse(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__usunProwadzacegoResponse(soap, n, NULL, NULL, NULL);
}

inline struct z1__usunProwadzacegoResponse * soap_new_req_z1__usunProwadzacegoResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__usunProwadzacegoResponse *_p = soap_new_z1__usunProwadzacegoResponse(soap);
	if (_p)
	{	soap_default_z1__usunProwadzacegoResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}

inline struct z1__usunProwadzacegoResponse * soap_new_set_z1__usunProwadzacegoResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__usunProwadzacegoResponse *_p = soap_new_z1__usunProwadzacegoResponse(soap);
	if (_p)
	{	soap_default_z1__usunProwadzacegoResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__usunProwadzacegoResponse(struct soap*, const struct z1__usunProwadzacegoResponse *, const char*, const char*);

inline int soap_write_z1__usunProwadzacegoResponse(struct soap *soap, struct z1__usunProwadzacegoResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__usunProwadzacegoResponse(soap, p), 0) || soap_put_z1__usunProwadzacegoResponse(soap, p, "z1:usunProwadzacegoResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__usunProwadzacegoResponse * SOAP_FMAC4 soap_get_z1__usunProwadzacegoResponse(struct soap*, struct z1__usunProwadzacegoResponse *, const char*, const char*);

inline int soap_read_z1__usunProwadzacegoResponse(struct soap *soap, struct z1__usunProwadzacegoResponse *p)
{	if (p)
	{	soap_default_z1__usunProwadzacegoResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__usunProwadzacegoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__zmienDaneProwadzacego_DEFINED
#define SOAP_TYPE_z1__zmienDaneProwadzacego_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__zmienDaneProwadzacego(struct soap*, struct z1__zmienDaneProwadzacego *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__zmienDaneProwadzacego(struct soap*, const struct z1__zmienDaneProwadzacego *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__zmienDaneProwadzacego(struct soap*, const char*, int, const struct z1__zmienDaneProwadzacego *, const char*);
SOAP_FMAC3 struct z1__zmienDaneProwadzacego * SOAP_FMAC4 soap_in_z1__zmienDaneProwadzacego(struct soap*, const char*, struct z1__zmienDaneProwadzacego *, const char*);
SOAP_FMAC1 struct z1__zmienDaneProwadzacego * SOAP_FMAC2 soap_instantiate_z1__zmienDaneProwadzacego(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__zmienDaneProwadzacego * soap_new_z1__zmienDaneProwadzacego(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__zmienDaneProwadzacego(soap, n, NULL, NULL, NULL);
}

inline struct z1__zmienDaneProwadzacego * soap_new_req_z1__zmienDaneProwadzacego(
	struct soap *soap,
	const std::string& idProwadzacego)
{	struct z1__zmienDaneProwadzacego *_p = soap_new_z1__zmienDaneProwadzacego(soap);
	if (_p)
	{	soap_default_z1__zmienDaneProwadzacego(soap, _p);
		_p->idProwadzacego = idProwadzacego;
	}
	return _p;
}

inline struct z1__zmienDaneProwadzacego * soap_new_set_z1__zmienDaneProwadzacego(
	struct soap *soap,
	const std::string& idProwadzacego,
	z1__prowadzacy *daneProwadzacego)
{	struct z1__zmienDaneProwadzacego *_p = soap_new_z1__zmienDaneProwadzacego(soap);
	if (_p)
	{	soap_default_z1__zmienDaneProwadzacego(soap, _p);
		_p->idProwadzacego = idProwadzacego;
		_p->daneProwadzacego = daneProwadzacego;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__zmienDaneProwadzacego(struct soap*, const struct z1__zmienDaneProwadzacego *, const char*, const char*);

inline int soap_write_z1__zmienDaneProwadzacego(struct soap *soap, struct z1__zmienDaneProwadzacego const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__zmienDaneProwadzacego(soap, p), 0) || soap_put_z1__zmienDaneProwadzacego(soap, p, "z1:zmienDaneProwadzacego", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__zmienDaneProwadzacego * SOAP_FMAC4 soap_get_z1__zmienDaneProwadzacego(struct soap*, struct z1__zmienDaneProwadzacego *, const char*, const char*);

inline int soap_read_z1__zmienDaneProwadzacego(struct soap *soap, struct z1__zmienDaneProwadzacego *p)
{	if (p)
	{	soap_default_z1__zmienDaneProwadzacego(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__zmienDaneProwadzacego(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__zmienDaneProwadzacegoResponse_DEFINED
#define SOAP_TYPE_z1__zmienDaneProwadzacegoResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__zmienDaneProwadzacegoResponse(struct soap*, struct z1__zmienDaneProwadzacegoResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__zmienDaneProwadzacegoResponse(struct soap*, const struct z1__zmienDaneProwadzacegoResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__zmienDaneProwadzacegoResponse(struct soap*, const char*, int, const struct z1__zmienDaneProwadzacegoResponse *, const char*);
SOAP_FMAC3 struct z1__zmienDaneProwadzacegoResponse * SOAP_FMAC4 soap_in_z1__zmienDaneProwadzacegoResponse(struct soap*, const char*, struct z1__zmienDaneProwadzacegoResponse *, const char*);
SOAP_FMAC1 struct z1__zmienDaneProwadzacegoResponse * SOAP_FMAC2 soap_instantiate_z1__zmienDaneProwadzacegoResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__zmienDaneProwadzacegoResponse * soap_new_z1__zmienDaneProwadzacegoResponse(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__zmienDaneProwadzacegoResponse(soap, n, NULL, NULL, NULL);
}

inline struct z1__zmienDaneProwadzacegoResponse * soap_new_req_z1__zmienDaneProwadzacegoResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__zmienDaneProwadzacegoResponse *_p = soap_new_z1__zmienDaneProwadzacegoResponse(soap);
	if (_p)
	{	soap_default_z1__zmienDaneProwadzacegoResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}

inline struct z1__zmienDaneProwadzacegoResponse * soap_new_set_z1__zmienDaneProwadzacegoResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__zmienDaneProwadzacegoResponse *_p = soap_new_z1__zmienDaneProwadzacegoResponse(soap);
	if (_p)
	{	soap_default_z1__zmienDaneProwadzacegoResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__zmienDaneProwadzacegoResponse(struct soap*, const struct z1__zmienDaneProwadzacegoResponse *, const char*, const char*);

inline int soap_write_z1__zmienDaneProwadzacegoResponse(struct soap *soap, struct z1__zmienDaneProwadzacegoResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__zmienDaneProwadzacegoResponse(soap, p), 0) || soap_put_z1__zmienDaneProwadzacegoResponse(soap, p, "z1:zmienDaneProwadzacegoResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__zmienDaneProwadzacegoResponse * SOAP_FMAC4 soap_get_z1__zmienDaneProwadzacegoResponse(struct soap*, struct z1__zmienDaneProwadzacegoResponse *, const char*, const char*);

inline int soap_read_z1__zmienDaneProwadzacegoResponse(struct soap *soap, struct z1__zmienDaneProwadzacegoResponse *p)
{	if (p)
	{	soap_default_z1__zmienDaneProwadzacegoResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__zmienDaneProwadzacegoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__dodajProwadzacego_DEFINED
#define SOAP_TYPE_z1__dodajProwadzacego_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__dodajProwadzacego(struct soap*, struct z1__dodajProwadzacego *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__dodajProwadzacego(struct soap*, const struct z1__dodajProwadzacego *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__dodajProwadzacego(struct soap*, const char*, int, const struct z1__dodajProwadzacego *, const char*);
SOAP_FMAC3 struct z1__dodajProwadzacego * SOAP_FMAC4 soap_in_z1__dodajProwadzacego(struct soap*, const char*, struct z1__dodajProwadzacego *, const char*);
SOAP_FMAC1 struct z1__dodajProwadzacego * SOAP_FMAC2 soap_instantiate_z1__dodajProwadzacego(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__dodajProwadzacego * soap_new_z1__dodajProwadzacego(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__dodajProwadzacego(soap, n, NULL, NULL, NULL);
}

inline struct z1__dodajProwadzacego * soap_new_req_z1__dodajProwadzacego(
	struct soap *soap)
{	struct z1__dodajProwadzacego *_p = soap_new_z1__dodajProwadzacego(soap);
	if (_p)
	{	soap_default_z1__dodajProwadzacego(soap, _p);
	}
	return _p;
}

inline struct z1__dodajProwadzacego * soap_new_set_z1__dodajProwadzacego(
	struct soap *soap,
	z1__prowadzacy *daneProwadzacego)
{	struct z1__dodajProwadzacego *_p = soap_new_z1__dodajProwadzacego(soap);
	if (_p)
	{	soap_default_z1__dodajProwadzacego(soap, _p);
		_p->daneProwadzacego = daneProwadzacego;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__dodajProwadzacego(struct soap*, const struct z1__dodajProwadzacego *, const char*, const char*);

inline int soap_write_z1__dodajProwadzacego(struct soap *soap, struct z1__dodajProwadzacego const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__dodajProwadzacego(soap, p), 0) || soap_put_z1__dodajProwadzacego(soap, p, "z1:dodajProwadzacego", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__dodajProwadzacego * SOAP_FMAC4 soap_get_z1__dodajProwadzacego(struct soap*, struct z1__dodajProwadzacego *, const char*, const char*);

inline int soap_read_z1__dodajProwadzacego(struct soap *soap, struct z1__dodajProwadzacego *p)
{	if (p)
	{	soap_default_z1__dodajProwadzacego(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__dodajProwadzacego(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__dodajProwadzacegoResponse_DEFINED
#define SOAP_TYPE_z1__dodajProwadzacegoResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__dodajProwadzacegoResponse(struct soap*, struct z1__dodajProwadzacegoResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__dodajProwadzacegoResponse(struct soap*, const struct z1__dodajProwadzacegoResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__dodajProwadzacegoResponse(struct soap*, const char*, int, const struct z1__dodajProwadzacegoResponse *, const char*);
SOAP_FMAC3 struct z1__dodajProwadzacegoResponse * SOAP_FMAC4 soap_in_z1__dodajProwadzacegoResponse(struct soap*, const char*, struct z1__dodajProwadzacegoResponse *, const char*);
SOAP_FMAC1 struct z1__dodajProwadzacegoResponse * SOAP_FMAC2 soap_instantiate_z1__dodajProwadzacegoResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__dodajProwadzacegoResponse * soap_new_z1__dodajProwadzacegoResponse(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__dodajProwadzacegoResponse(soap, n, NULL, NULL, NULL);
}

inline struct z1__dodajProwadzacegoResponse * soap_new_req_z1__dodajProwadzacegoResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__dodajProwadzacegoResponse *_p = soap_new_z1__dodajProwadzacegoResponse(soap);
	if (_p)
	{	soap_default_z1__dodajProwadzacegoResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}

inline struct z1__dodajProwadzacegoResponse * soap_new_set_z1__dodajProwadzacegoResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__dodajProwadzacegoResponse *_p = soap_new_z1__dodajProwadzacegoResponse(soap);
	if (_p)
	{	soap_default_z1__dodajProwadzacegoResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__dodajProwadzacegoResponse(struct soap*, const struct z1__dodajProwadzacegoResponse *, const char*, const char*);

inline int soap_write_z1__dodajProwadzacegoResponse(struct soap *soap, struct z1__dodajProwadzacegoResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__dodajProwadzacegoResponse(soap, p), 0) || soap_put_z1__dodajProwadzacegoResponse(soap, p, "z1:dodajProwadzacegoResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__dodajProwadzacegoResponse * SOAP_FMAC4 soap_get_z1__dodajProwadzacegoResponse(struct soap*, struct z1__dodajProwadzacegoResponse *, const char*, const char*);

inline int soap_read_z1__dodajProwadzacegoResponse(struct soap *soap, struct z1__dodajProwadzacegoResponse *p)
{	if (p)
	{	soap_default_z1__dodajProwadzacegoResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__dodajProwadzacegoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__dodajPrzedmiot_DEFINED
#define SOAP_TYPE_z1__dodajPrzedmiot_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__dodajPrzedmiot(struct soap*, struct z1__dodajPrzedmiot *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__dodajPrzedmiot(struct soap*, const struct z1__dodajPrzedmiot *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__dodajPrzedmiot(struct soap*, const char*, int, const struct z1__dodajPrzedmiot *, const char*);
SOAP_FMAC3 struct z1__dodajPrzedmiot * SOAP_FMAC4 soap_in_z1__dodajPrzedmiot(struct soap*, const char*, struct z1__dodajPrzedmiot *, const char*);
SOAP_FMAC1 struct z1__dodajPrzedmiot * SOAP_FMAC2 soap_instantiate_z1__dodajPrzedmiot(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__dodajPrzedmiot * soap_new_z1__dodajPrzedmiot(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__dodajPrzedmiot(soap, n, NULL, NULL, NULL);
}

inline struct z1__dodajPrzedmiot * soap_new_req_z1__dodajPrzedmiot(
	struct soap *soap)
{	struct z1__dodajPrzedmiot *_p = soap_new_z1__dodajPrzedmiot(soap);
	if (_p)
	{	soap_default_z1__dodajPrzedmiot(soap, _p);
	}
	return _p;
}

inline struct z1__dodajPrzedmiot * soap_new_set_z1__dodajPrzedmiot(
	struct soap *soap,
	z1__importowanyPrzedmiot *przedmiot)
{	struct z1__dodajPrzedmiot *_p = soap_new_z1__dodajPrzedmiot(soap);
	if (_p)
	{	soap_default_z1__dodajPrzedmiot(soap, _p);
		_p->przedmiot = przedmiot;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__dodajPrzedmiot(struct soap*, const struct z1__dodajPrzedmiot *, const char*, const char*);

inline int soap_write_z1__dodajPrzedmiot(struct soap *soap, struct z1__dodajPrzedmiot const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__dodajPrzedmiot(soap, p), 0) || soap_put_z1__dodajPrzedmiot(soap, p, "z1:dodajPrzedmiot", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__dodajPrzedmiot * SOAP_FMAC4 soap_get_z1__dodajPrzedmiot(struct soap*, struct z1__dodajPrzedmiot *, const char*, const char*);

inline int soap_read_z1__dodajPrzedmiot(struct soap *soap, struct z1__dodajPrzedmiot *p)
{	if (p)
	{	soap_default_z1__dodajPrzedmiot(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__dodajPrzedmiot(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__dodajPrzedmiotResponse_DEFINED
#define SOAP_TYPE_z1__dodajPrzedmiotResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__dodajPrzedmiotResponse(struct soap*, struct z1__dodajPrzedmiotResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__dodajPrzedmiotResponse(struct soap*, const struct z1__dodajPrzedmiotResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__dodajPrzedmiotResponse(struct soap*, const char*, int, const struct z1__dodajPrzedmiotResponse *, const char*);
SOAP_FMAC3 struct z1__dodajPrzedmiotResponse * SOAP_FMAC4 soap_in_z1__dodajPrzedmiotResponse(struct soap*, const char*, struct z1__dodajPrzedmiotResponse *, const char*);
SOAP_FMAC1 struct z1__dodajPrzedmiotResponse * SOAP_FMAC2 soap_instantiate_z1__dodajPrzedmiotResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__dodajPrzedmiotResponse * soap_new_z1__dodajPrzedmiotResponse(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__dodajPrzedmiotResponse(soap, n, NULL, NULL, NULL);
}

inline struct z1__dodajPrzedmiotResponse * soap_new_req_z1__dodajPrzedmiotResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__dodajPrzedmiotResponse *_p = soap_new_z1__dodajPrzedmiotResponse(soap);
	if (_p)
	{	soap_default_z1__dodajPrzedmiotResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}

inline struct z1__dodajPrzedmiotResponse * soap_new_set_z1__dodajPrzedmiotResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__dodajPrzedmiotResponse *_p = soap_new_z1__dodajPrzedmiotResponse(soap);
	if (_p)
	{	soap_default_z1__dodajPrzedmiotResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__dodajPrzedmiotResponse(struct soap*, const struct z1__dodajPrzedmiotResponse *, const char*, const char*);

inline int soap_write_z1__dodajPrzedmiotResponse(struct soap *soap, struct z1__dodajPrzedmiotResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__dodajPrzedmiotResponse(soap, p), 0) || soap_put_z1__dodajPrzedmiotResponse(soap, p, "z1:dodajPrzedmiotResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__dodajPrzedmiotResponse * SOAP_FMAC4 soap_get_z1__dodajPrzedmiotResponse(struct soap*, struct z1__dodajPrzedmiotResponse *, const char*, const char*);

inline int soap_read_z1__dodajPrzedmiotResponse(struct soap *soap, struct z1__dodajPrzedmiotResponse *p)
{	if (p)
	{	soap_default_z1__dodajPrzedmiotResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__dodajPrzedmiotResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__eksportujPrzedmiot_DEFINED
#define SOAP_TYPE_z1__eksportujPrzedmiot_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__eksportujPrzedmiot(struct soap*, struct z1__eksportujPrzedmiot *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__eksportujPrzedmiot(struct soap*, const struct z1__eksportujPrzedmiot *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__eksportujPrzedmiot(struct soap*, const char*, int, const struct z1__eksportujPrzedmiot *, const char*);
SOAP_FMAC3 struct z1__eksportujPrzedmiot * SOAP_FMAC4 soap_in_z1__eksportujPrzedmiot(struct soap*, const char*, struct z1__eksportujPrzedmiot *, const char*);
SOAP_FMAC1 struct z1__eksportujPrzedmiot * SOAP_FMAC2 soap_instantiate_z1__eksportujPrzedmiot(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__eksportujPrzedmiot * soap_new_z1__eksportujPrzedmiot(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__eksportujPrzedmiot(soap, n, NULL, NULL, NULL);
}

inline struct z1__eksportujPrzedmiot * soap_new_req_z1__eksportujPrzedmiot(
	struct soap *soap,
	const std::string& ID)
{	struct z1__eksportujPrzedmiot *_p = soap_new_z1__eksportujPrzedmiot(soap);
	if (_p)
	{	soap_default_z1__eksportujPrzedmiot(soap, _p);
		_p->ID = ID;
	}
	return _p;
}

inline struct z1__eksportujPrzedmiot * soap_new_set_z1__eksportujPrzedmiot(
	struct soap *soap,
	const std::string& ID)
{	struct z1__eksportujPrzedmiot *_p = soap_new_z1__eksportujPrzedmiot(soap);
	if (_p)
	{	soap_default_z1__eksportujPrzedmiot(soap, _p);
		_p->ID = ID;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__eksportujPrzedmiot(struct soap*, const struct z1__eksportujPrzedmiot *, const char*, const char*);

inline int soap_write_z1__eksportujPrzedmiot(struct soap *soap, struct z1__eksportujPrzedmiot const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__eksportujPrzedmiot(soap, p), 0) || soap_put_z1__eksportujPrzedmiot(soap, p, "z1:eksportujPrzedmiot", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__eksportujPrzedmiot * SOAP_FMAC4 soap_get_z1__eksportujPrzedmiot(struct soap*, struct z1__eksportujPrzedmiot *, const char*, const char*);

inline int soap_read_z1__eksportujPrzedmiot(struct soap *soap, struct z1__eksportujPrzedmiot *p)
{	if (p)
	{	soap_default_z1__eksportujPrzedmiot(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__eksportujPrzedmiot(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__eksportujPrzedmiotResponse_DEFINED
#define SOAP_TYPE_z1__eksportujPrzedmiotResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__eksportujPrzedmiotResponse(struct soap*, struct z1__eksportujPrzedmiotResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__eksportujPrzedmiotResponse(struct soap*, const struct z1__eksportujPrzedmiotResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__eksportujPrzedmiotResponse(struct soap*, const char*, int, const struct z1__eksportujPrzedmiotResponse *, const char*);
SOAP_FMAC3 struct z1__eksportujPrzedmiotResponse * SOAP_FMAC4 soap_in_z1__eksportujPrzedmiotResponse(struct soap*, const char*, struct z1__eksportujPrzedmiotResponse *, const char*);
SOAP_FMAC1 struct z1__eksportujPrzedmiotResponse * SOAP_FMAC2 soap_instantiate_z1__eksportujPrzedmiotResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__eksportujPrzedmiotResponse * soap_new_z1__eksportujPrzedmiotResponse(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__eksportujPrzedmiotResponse(soap, n, NULL, NULL, NULL);
}

inline struct z1__eksportujPrzedmiotResponse * soap_new_req_z1__eksportujPrzedmiotResponse(
	struct soap *soap,
	const std::string& nazwa,
	const std::string& plik)
{	struct z1__eksportujPrzedmiotResponse *_p = soap_new_z1__eksportujPrzedmiotResponse(soap);
	if (_p)
	{	soap_default_z1__eksportujPrzedmiotResponse(soap, _p);
		_p->nazwa = nazwa;
		_p->plik = plik;
	}
	return _p;
}

inline struct z1__eksportujPrzedmiotResponse * soap_new_set_z1__eksportujPrzedmiotResponse(
	struct soap *soap,
	const std::string& nazwa,
	const std::string& plik)
{	struct z1__eksportujPrzedmiotResponse *_p = soap_new_z1__eksportujPrzedmiotResponse(soap);
	if (_p)
	{	soap_default_z1__eksportujPrzedmiotResponse(soap, _p);
		_p->nazwa = nazwa;
		_p->plik = plik;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__eksportujPrzedmiotResponse(struct soap*, const struct z1__eksportujPrzedmiotResponse *, const char*, const char*);

inline int soap_write_z1__eksportujPrzedmiotResponse(struct soap *soap, struct z1__eksportujPrzedmiotResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__eksportujPrzedmiotResponse(soap, p), 0) || soap_put_z1__eksportujPrzedmiotResponse(soap, p, "z1:eksportujPrzedmiotResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__eksportujPrzedmiotResponse * SOAP_FMAC4 soap_get_z1__eksportujPrzedmiotResponse(struct soap*, struct z1__eksportujPrzedmiotResponse *, const char*, const char*);

inline int soap_read_z1__eksportujPrzedmiotResponse(struct soap *soap, struct z1__eksportujPrzedmiotResponse *p)
{	if (p)
	{	soap_default_z1__eksportujPrzedmiotResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__eksportujPrzedmiotResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__eksportujTermin_DEFINED
#define SOAP_TYPE_z1__eksportujTermin_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__eksportujTermin(struct soap*, struct z1__eksportujTermin *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__eksportujTermin(struct soap*, const struct z1__eksportujTermin *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__eksportujTermin(struct soap*, const char*, int, const struct z1__eksportujTermin *, const char*);
SOAP_FMAC3 struct z1__eksportujTermin * SOAP_FMAC4 soap_in_z1__eksportujTermin(struct soap*, const char*, struct z1__eksportujTermin *, const char*);
SOAP_FMAC1 struct z1__eksportujTermin * SOAP_FMAC2 soap_instantiate_z1__eksportujTermin(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__eksportujTermin * soap_new_z1__eksportujTermin(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__eksportujTermin(soap, n, NULL, NULL, NULL);
}

inline struct z1__eksportujTermin * soap_new_req_z1__eksportujTermin(
	struct soap *soap,
	const std::string& ID)
{	struct z1__eksportujTermin *_p = soap_new_z1__eksportujTermin(soap);
	if (_p)
	{	soap_default_z1__eksportujTermin(soap, _p);
		_p->ID = ID;
	}
	return _p;
}

inline struct z1__eksportujTermin * soap_new_set_z1__eksportujTermin(
	struct soap *soap,
	const std::string& ID)
{	struct z1__eksportujTermin *_p = soap_new_z1__eksportujTermin(soap);
	if (_p)
	{	soap_default_z1__eksportujTermin(soap, _p);
		_p->ID = ID;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__eksportujTermin(struct soap*, const struct z1__eksportujTermin *, const char*, const char*);

inline int soap_write_z1__eksportujTermin(struct soap *soap, struct z1__eksportujTermin const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__eksportujTermin(soap, p), 0) || soap_put_z1__eksportujTermin(soap, p, "z1:eksportujTermin", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__eksportujTermin * SOAP_FMAC4 soap_get_z1__eksportujTermin(struct soap*, struct z1__eksportujTermin *, const char*, const char*);

inline int soap_read_z1__eksportujTermin(struct soap *soap, struct z1__eksportujTermin *p)
{	if (p)
	{	soap_default_z1__eksportujTermin(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__eksportujTermin(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__eksportujTerminResponse_DEFINED
#define SOAP_TYPE_z1__eksportujTerminResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__eksportujTerminResponse(struct soap*, struct z1__eksportujTerminResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__eksportujTerminResponse(struct soap*, const struct z1__eksportujTerminResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__eksportujTerminResponse(struct soap*, const char*, int, const struct z1__eksportujTerminResponse *, const char*);
SOAP_FMAC3 struct z1__eksportujTerminResponse * SOAP_FMAC4 soap_in_z1__eksportujTerminResponse(struct soap*, const char*, struct z1__eksportujTerminResponse *, const char*);
SOAP_FMAC1 struct z1__eksportujTerminResponse * SOAP_FMAC2 soap_instantiate_z1__eksportujTerminResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__eksportujTerminResponse * soap_new_z1__eksportujTerminResponse(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__eksportujTerminResponse(soap, n, NULL, NULL, NULL);
}

inline struct z1__eksportujTerminResponse * soap_new_req_z1__eksportujTerminResponse(
	struct soap *soap,
	const std::string& nazwa,
	const std::string& plik)
{	struct z1__eksportujTerminResponse *_p = soap_new_z1__eksportujTerminResponse(soap);
	if (_p)
	{	soap_default_z1__eksportujTerminResponse(soap, _p);
		_p->nazwa = nazwa;
		_p->plik = plik;
	}
	return _p;
}

inline struct z1__eksportujTerminResponse * soap_new_set_z1__eksportujTerminResponse(
	struct soap *soap,
	const std::string& nazwa,
	const std::string& plik)
{	struct z1__eksportujTerminResponse *_p = soap_new_z1__eksportujTerminResponse(soap);
	if (_p)
	{	soap_default_z1__eksportujTerminResponse(soap, _p);
		_p->nazwa = nazwa;
		_p->plik = plik;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__eksportujTerminResponse(struct soap*, const struct z1__eksportujTerminResponse *, const char*, const char*);

inline int soap_write_z1__eksportujTerminResponse(struct soap *soap, struct z1__eksportujTerminResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__eksportujTerminResponse(soap, p), 0) || soap_put_z1__eksportujTerminResponse(soap, p, "z1:eksportujTerminResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__eksportujTerminResponse * SOAP_FMAC4 soap_get_z1__eksportujTerminResponse(struct soap*, struct z1__eksportujTerminResponse *, const char*, const char*);

inline int soap_read_z1__eksportujTerminResponse(struct soap *soap, struct z1__eksportujTerminResponse *p)
{	if (p)
	{	soap_default_z1__eksportujTerminResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__eksportujTerminResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__eksportujProjekt_DEFINED
#define SOAP_TYPE_z1__eksportujProjekt_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__eksportujProjekt(struct soap*, struct z1__eksportujProjekt *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__eksportujProjekt(struct soap*, const struct z1__eksportujProjekt *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__eksportujProjekt(struct soap*, const char*, int, const struct z1__eksportujProjekt *, const char*);
SOAP_FMAC3 struct z1__eksportujProjekt * SOAP_FMAC4 soap_in_z1__eksportujProjekt(struct soap*, const char*, struct z1__eksportujProjekt *, const char*);
SOAP_FMAC1 struct z1__eksportujProjekt * SOAP_FMAC2 soap_instantiate_z1__eksportujProjekt(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__eksportujProjekt * soap_new_z1__eksportujProjekt(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__eksportujProjekt(soap, n, NULL, NULL, NULL);
}

inline struct z1__eksportujProjekt * soap_new_req_z1__eksportujProjekt(
	struct soap *soap,
	const std::string& ID)
{	struct z1__eksportujProjekt *_p = soap_new_z1__eksportujProjekt(soap);
	if (_p)
	{	soap_default_z1__eksportujProjekt(soap, _p);
		_p->ID = ID;
	}
	return _p;
}

inline struct z1__eksportujProjekt * soap_new_set_z1__eksportujProjekt(
	struct soap *soap,
	const std::string& ID)
{	struct z1__eksportujProjekt *_p = soap_new_z1__eksportujProjekt(soap);
	if (_p)
	{	soap_default_z1__eksportujProjekt(soap, _p);
		_p->ID = ID;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__eksportujProjekt(struct soap*, const struct z1__eksportujProjekt *, const char*, const char*);

inline int soap_write_z1__eksportujProjekt(struct soap *soap, struct z1__eksportujProjekt const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__eksportujProjekt(soap, p), 0) || soap_put_z1__eksportujProjekt(soap, p, "z1:eksportujProjekt", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__eksportujProjekt * SOAP_FMAC4 soap_get_z1__eksportujProjekt(struct soap*, struct z1__eksportujProjekt *, const char*, const char*);

inline int soap_read_z1__eksportujProjekt(struct soap *soap, struct z1__eksportujProjekt *p)
{	if (p)
	{	soap_default_z1__eksportujProjekt(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__eksportujProjekt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__eksportujProjektResponse_DEFINED
#define SOAP_TYPE_z1__eksportujProjektResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__eksportujProjektResponse(struct soap*, struct z1__eksportujProjektResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__eksportujProjektResponse(struct soap*, const struct z1__eksportujProjektResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__eksportujProjektResponse(struct soap*, const char*, int, const struct z1__eksportujProjektResponse *, const char*);
SOAP_FMAC3 struct z1__eksportujProjektResponse * SOAP_FMAC4 soap_in_z1__eksportujProjektResponse(struct soap*, const char*, struct z1__eksportujProjektResponse *, const char*);
SOAP_FMAC1 struct z1__eksportujProjektResponse * SOAP_FMAC2 soap_instantiate_z1__eksportujProjektResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__eksportujProjektResponse * soap_new_z1__eksportujProjektResponse(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__eksportujProjektResponse(soap, n, NULL, NULL, NULL);
}

inline struct z1__eksportujProjektResponse * soap_new_req_z1__eksportujProjektResponse(
	struct soap *soap,
	const std::string& nazwa,
	const std::string& plik)
{	struct z1__eksportujProjektResponse *_p = soap_new_z1__eksportujProjektResponse(soap);
	if (_p)
	{	soap_default_z1__eksportujProjektResponse(soap, _p);
		_p->nazwa = nazwa;
		_p->plik = plik;
	}
	return _p;
}

inline struct z1__eksportujProjektResponse * soap_new_set_z1__eksportujProjektResponse(
	struct soap *soap,
	const std::string& nazwa,
	const std::string& plik)
{	struct z1__eksportujProjektResponse *_p = soap_new_z1__eksportujProjektResponse(soap);
	if (_p)
	{	soap_default_z1__eksportujProjektResponse(soap, _p);
		_p->nazwa = nazwa;
		_p->plik = plik;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__eksportujProjektResponse(struct soap*, const struct z1__eksportujProjektResponse *, const char*, const char*);

inline int soap_write_z1__eksportujProjektResponse(struct soap *soap, struct z1__eksportujProjektResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__eksportujProjektResponse(soap, p), 0) || soap_put_z1__eksportujProjektResponse(soap, p, "z1:eksportujProjektResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__eksportujProjektResponse * SOAP_FMAC4 soap_get_z1__eksportujProjektResponse(struct soap*, struct z1__eksportujProjektResponse *, const char*, const char*);

inline int soap_read_z1__eksportujProjektResponse(struct soap *soap, struct z1__eksportujProjektResponse *p)
{	if (p)
	{	soap_default_z1__eksportujProjektResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__eksportujProjektResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__dodajTermin_DEFINED
#define SOAP_TYPE_z1__dodajTermin_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__dodajTermin(struct soap*, struct z1__dodajTermin *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__dodajTermin(struct soap*, const struct z1__dodajTermin *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__dodajTermin(struct soap*, const char*, int, const struct z1__dodajTermin *, const char*);
SOAP_FMAC3 struct z1__dodajTermin * SOAP_FMAC4 soap_in_z1__dodajTermin(struct soap*, const char*, struct z1__dodajTermin *, const char*);
SOAP_FMAC1 struct z1__dodajTermin * SOAP_FMAC2 soap_instantiate_z1__dodajTermin(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__dodajTermin * soap_new_z1__dodajTermin(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__dodajTermin(soap, n, NULL, NULL, NULL);
}

inline struct z1__dodajTermin * soap_new_req_z1__dodajTermin(
	struct soap *soap,
	const std::string& przedmiotID,
	const std::string& salaID)
{	struct z1__dodajTermin *_p = soap_new_z1__dodajTermin(soap);
	if (_p)
	{	soap_default_z1__dodajTermin(soap, _p);
		_p->przedmiotID = przedmiotID;
		_p->salaID = salaID;
	}
	return _p;
}

inline struct z1__dodajTermin * soap_new_set_z1__dodajTermin(
	struct soap *soap,
	const std::string& przedmiotID,
	const std::string& salaID,
	z1__termin *termin)
{	struct z1__dodajTermin *_p = soap_new_z1__dodajTermin(soap);
	if (_p)
	{	soap_default_z1__dodajTermin(soap, _p);
		_p->przedmiotID = przedmiotID;
		_p->salaID = salaID;
		_p->termin = termin;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__dodajTermin(struct soap*, const struct z1__dodajTermin *, const char*, const char*);

inline int soap_write_z1__dodajTermin(struct soap *soap, struct z1__dodajTermin const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__dodajTermin(soap, p), 0) || soap_put_z1__dodajTermin(soap, p, "z1:dodajTermin", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__dodajTermin * SOAP_FMAC4 soap_get_z1__dodajTermin(struct soap*, struct z1__dodajTermin *, const char*, const char*);

inline int soap_read_z1__dodajTermin(struct soap *soap, struct z1__dodajTermin *p)
{	if (p)
	{	soap_default_z1__dodajTermin(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__dodajTermin(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__dodajTerminResponse_DEFINED
#define SOAP_TYPE_z1__dodajTerminResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__dodajTerminResponse(struct soap*, struct z1__dodajTerminResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__dodajTerminResponse(struct soap*, const struct z1__dodajTerminResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__dodajTerminResponse(struct soap*, const char*, int, const struct z1__dodajTerminResponse *, const char*);
SOAP_FMAC3 struct z1__dodajTerminResponse * SOAP_FMAC4 soap_in_z1__dodajTerminResponse(struct soap*, const char*, struct z1__dodajTerminResponse *, const char*);
SOAP_FMAC1 struct z1__dodajTerminResponse * SOAP_FMAC2 soap_instantiate_z1__dodajTerminResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__dodajTerminResponse * soap_new_z1__dodajTerminResponse(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__dodajTerminResponse(soap, n, NULL, NULL, NULL);
}

inline struct z1__dodajTerminResponse * soap_new_req_z1__dodajTerminResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__dodajTerminResponse *_p = soap_new_z1__dodajTerminResponse(soap);
	if (_p)
	{	soap_default_z1__dodajTerminResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}

inline struct z1__dodajTerminResponse * soap_new_set_z1__dodajTerminResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__dodajTerminResponse *_p = soap_new_z1__dodajTerminResponse(soap);
	if (_p)
	{	soap_default_z1__dodajTerminResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__dodajTerminResponse(struct soap*, const struct z1__dodajTerminResponse *, const char*, const char*);

inline int soap_write_z1__dodajTerminResponse(struct soap *soap, struct z1__dodajTerminResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__dodajTerminResponse(soap, p), 0) || soap_put_z1__dodajTerminResponse(soap, p, "z1:dodajTerminResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__dodajTerminResponse * SOAP_FMAC4 soap_get_z1__dodajTerminResponse(struct soap*, struct z1__dodajTerminResponse *, const char*, const char*);

inline int soap_read_z1__dodajTerminResponse(struct soap *soap, struct z1__dodajTerminResponse *p)
{	if (p)
	{	soap_default_z1__dodajTerminResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__dodajTerminResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__zapiszTermin_DEFINED
#define SOAP_TYPE_z1__zapiszTermin_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__zapiszTermin(struct soap*, struct z1__zapiszTermin *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__zapiszTermin(struct soap*, const struct z1__zapiszTermin *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__zapiszTermin(struct soap*, const char*, int, const struct z1__zapiszTermin *, const char*);
SOAP_FMAC3 struct z1__zapiszTermin * SOAP_FMAC4 soap_in_z1__zapiszTermin(struct soap*, const char*, struct z1__zapiszTermin *, const char*);
SOAP_FMAC1 struct z1__zapiszTermin * SOAP_FMAC2 soap_instantiate_z1__zapiszTermin(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__zapiszTermin * soap_new_z1__zapiszTermin(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__zapiszTermin(soap, n, NULL, NULL, NULL);
}

inline struct z1__zapiszTermin * soap_new_req_z1__zapiszTermin(
	struct soap *soap,
	const std::string& projektID,
	const std::string& zapisywanyID)
{	struct z1__zapiszTermin *_p = soap_new_z1__zapiszTermin(soap);
	if (_p)
	{	soap_default_z1__zapiszTermin(soap, _p);
		_p->projektID = projektID;
		_p->zapisywanyID = zapisywanyID;
	}
	return _p;
}

inline struct z1__zapiszTermin * soap_new_set_z1__zapiszTermin(
	struct soap *soap,
	const std::string& projektID,
	const std::string& zapisywanyID)
{	struct z1__zapiszTermin *_p = soap_new_z1__zapiszTermin(soap);
	if (_p)
	{	soap_default_z1__zapiszTermin(soap, _p);
		_p->projektID = projektID;
		_p->zapisywanyID = zapisywanyID;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__zapiszTermin(struct soap*, const struct z1__zapiszTermin *, const char*, const char*);

inline int soap_write_z1__zapiszTermin(struct soap *soap, struct z1__zapiszTermin const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__zapiszTermin(soap, p), 0) || soap_put_z1__zapiszTermin(soap, p, "z1:zapiszTermin", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__zapiszTermin * SOAP_FMAC4 soap_get_z1__zapiszTermin(struct soap*, struct z1__zapiszTermin *, const char*, const char*);

inline int soap_read_z1__zapiszTermin(struct soap *soap, struct z1__zapiszTermin *p)
{	if (p)
	{	soap_default_z1__zapiszTermin(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__zapiszTermin(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__zapiszTerminResponse_DEFINED
#define SOAP_TYPE_z1__zapiszTerminResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__zapiszTerminResponse(struct soap*, struct z1__zapiszTerminResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__zapiszTerminResponse(struct soap*, const struct z1__zapiszTerminResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__zapiszTerminResponse(struct soap*, const char*, int, const struct z1__zapiszTerminResponse *, const char*);
SOAP_FMAC3 struct z1__zapiszTerminResponse * SOAP_FMAC4 soap_in_z1__zapiszTerminResponse(struct soap*, const char*, struct z1__zapiszTerminResponse *, const char*);
SOAP_FMAC1 struct z1__zapiszTerminResponse * SOAP_FMAC2 soap_instantiate_z1__zapiszTerminResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__zapiszTerminResponse * soap_new_z1__zapiszTerminResponse(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__zapiszTerminResponse(soap, n, NULL, NULL, NULL);
}

inline struct z1__zapiszTerminResponse * soap_new_req_z1__zapiszTerminResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__zapiszTerminResponse *_p = soap_new_z1__zapiszTerminResponse(soap);
	if (_p)
	{	soap_default_z1__zapiszTerminResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}

inline struct z1__zapiszTerminResponse * soap_new_set_z1__zapiszTerminResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__zapiszTerminResponse *_p = soap_new_z1__zapiszTerminResponse(soap);
	if (_p)
	{	soap_default_z1__zapiszTerminResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__zapiszTerminResponse(struct soap*, const struct z1__zapiszTerminResponse *, const char*, const char*);

inline int soap_write_z1__zapiszTerminResponse(struct soap *soap, struct z1__zapiszTerminResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__zapiszTerminResponse(soap, p), 0) || soap_put_z1__zapiszTerminResponse(soap, p, "z1:zapiszTerminResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__zapiszTerminResponse * SOAP_FMAC4 soap_get_z1__zapiszTerminResponse(struct soap*, struct z1__zapiszTerminResponse *, const char*, const char*);

inline int soap_read_z1__zapiszTerminResponse(struct soap *soap, struct z1__zapiszTerminResponse *p)
{	if (p)
	{	soap_default_z1__zapiszTerminResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__zapiszTerminResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__dodajProjekt_DEFINED
#define SOAP_TYPE_z1__dodajProjekt_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__dodajProjekt(struct soap*, struct z1__dodajProjekt *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__dodajProjekt(struct soap*, const struct z1__dodajProjekt *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__dodajProjekt(struct soap*, const char*, int, const struct z1__dodajProjekt *, const char*);
SOAP_FMAC3 struct z1__dodajProjekt * SOAP_FMAC4 soap_in_z1__dodajProjekt(struct soap*, const char*, struct z1__dodajProjekt *, const char*);
SOAP_FMAC1 struct z1__dodajProjekt * SOAP_FMAC2 soap_instantiate_z1__dodajProjekt(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__dodajProjekt * soap_new_z1__dodajProjekt(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__dodajProjekt(soap, n, NULL, NULL, NULL);
}

inline struct z1__dodajProjekt * soap_new_req_z1__dodajProjekt(
	struct soap *soap,
	const std::string& przedmiotID)
{	struct z1__dodajProjekt *_p = soap_new_z1__dodajProjekt(soap);
	if (_p)
	{	soap_default_z1__dodajProjekt(soap, _p);
		_p->przedmiotID = przedmiotID;
	}
	return _p;
}

inline struct z1__dodajProjekt * soap_new_set_z1__dodajProjekt(
	struct soap *soap,
	const std::string& przedmiotID,
	z1__temat *projekt)
{	struct z1__dodajProjekt *_p = soap_new_z1__dodajProjekt(soap);
	if (_p)
	{	soap_default_z1__dodajProjekt(soap, _p);
		_p->przedmiotID = przedmiotID;
		_p->projekt = projekt;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__dodajProjekt(struct soap*, const struct z1__dodajProjekt *, const char*, const char*);

inline int soap_write_z1__dodajProjekt(struct soap *soap, struct z1__dodajProjekt const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__dodajProjekt(soap, p), 0) || soap_put_z1__dodajProjekt(soap, p, "z1:dodajProjekt", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__dodajProjekt * SOAP_FMAC4 soap_get_z1__dodajProjekt(struct soap*, struct z1__dodajProjekt *, const char*, const char*);

inline int soap_read_z1__dodajProjekt(struct soap *soap, struct z1__dodajProjekt *p)
{	if (p)
	{	soap_default_z1__dodajProjekt(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__dodajProjekt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__dodajProjektResponse_DEFINED
#define SOAP_TYPE_z1__dodajProjektResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__dodajProjektResponse(struct soap*, struct z1__dodajProjektResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__dodajProjektResponse(struct soap*, const struct z1__dodajProjektResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__dodajProjektResponse(struct soap*, const char*, int, const struct z1__dodajProjektResponse *, const char*);
SOAP_FMAC3 struct z1__dodajProjektResponse * SOAP_FMAC4 soap_in_z1__dodajProjektResponse(struct soap*, const char*, struct z1__dodajProjektResponse *, const char*);
SOAP_FMAC1 struct z1__dodajProjektResponse * SOAP_FMAC2 soap_instantiate_z1__dodajProjektResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__dodajProjektResponse * soap_new_z1__dodajProjektResponse(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__dodajProjektResponse(soap, n, NULL, NULL, NULL);
}

inline struct z1__dodajProjektResponse * soap_new_req_z1__dodajProjektResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__dodajProjektResponse *_p = soap_new_z1__dodajProjektResponse(soap);
	if (_p)
	{	soap_default_z1__dodajProjektResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}

inline struct z1__dodajProjektResponse * soap_new_set_z1__dodajProjektResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__dodajProjektResponse *_p = soap_new_z1__dodajProjektResponse(soap);
	if (_p)
	{	soap_default_z1__dodajProjektResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__dodajProjektResponse(struct soap*, const struct z1__dodajProjektResponse *, const char*, const char*);

inline int soap_write_z1__dodajProjektResponse(struct soap *soap, struct z1__dodajProjektResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__dodajProjektResponse(soap, p), 0) || soap_put_z1__dodajProjektResponse(soap, p, "z1:dodajProjektResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__dodajProjektResponse * SOAP_FMAC4 soap_get_z1__dodajProjektResponse(struct soap*, struct z1__dodajProjektResponse *, const char*, const char*);

inline int soap_read_z1__dodajProjektResponse(struct soap *soap, struct z1__dodajProjektResponse *p)
{	if (p)
	{	soap_default_z1__dodajProjektResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__dodajProjektResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__zapiszProjekt_DEFINED
#define SOAP_TYPE_z1__zapiszProjekt_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__zapiszProjekt(struct soap*, struct z1__zapiszProjekt *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__zapiszProjekt(struct soap*, const struct z1__zapiszProjekt *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__zapiszProjekt(struct soap*, const char*, int, const struct z1__zapiszProjekt *, const char*);
SOAP_FMAC3 struct z1__zapiszProjekt * SOAP_FMAC4 soap_in_z1__zapiszProjekt(struct soap*, const char*, struct z1__zapiszProjekt *, const char*);
SOAP_FMAC1 struct z1__zapiszProjekt * SOAP_FMAC2 soap_instantiate_z1__zapiszProjekt(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__zapiszProjekt * soap_new_z1__zapiszProjekt(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__zapiszProjekt(soap, n, NULL, NULL, NULL);
}

inline struct z1__zapiszProjekt * soap_new_req_z1__zapiszProjekt(
	struct soap *soap,
	const std::string& projektID,
	const std::string& zapisywanyID)
{	struct z1__zapiszProjekt *_p = soap_new_z1__zapiszProjekt(soap);
	if (_p)
	{	soap_default_z1__zapiszProjekt(soap, _p);
		_p->projektID = projektID;
		_p->zapisywanyID = zapisywanyID;
	}
	return _p;
}

inline struct z1__zapiszProjekt * soap_new_set_z1__zapiszProjekt(
	struct soap *soap,
	const std::string& projektID,
	const std::string& zapisywanyID)
{	struct z1__zapiszProjekt *_p = soap_new_z1__zapiszProjekt(soap);
	if (_p)
	{	soap_default_z1__zapiszProjekt(soap, _p);
		_p->projektID = projektID;
		_p->zapisywanyID = zapisywanyID;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__zapiszProjekt(struct soap*, const struct z1__zapiszProjekt *, const char*, const char*);

inline int soap_write_z1__zapiszProjekt(struct soap *soap, struct z1__zapiszProjekt const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__zapiszProjekt(soap, p), 0) || soap_put_z1__zapiszProjekt(soap, p, "z1:zapiszProjekt", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__zapiszProjekt * SOAP_FMAC4 soap_get_z1__zapiszProjekt(struct soap*, struct z1__zapiszProjekt *, const char*, const char*);

inline int soap_read_z1__zapiszProjekt(struct soap *soap, struct z1__zapiszProjekt *p)
{	if (p)
	{	soap_default_z1__zapiszProjekt(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__zapiszProjekt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_z1__zapiszProjektResponse_DEFINED
#define SOAP_TYPE_z1__zapiszProjektResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_z1__zapiszProjektResponse(struct soap*, struct z1__zapiszProjektResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_z1__zapiszProjektResponse(struct soap*, const struct z1__zapiszProjektResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_z1__zapiszProjektResponse(struct soap*, const char*, int, const struct z1__zapiszProjektResponse *, const char*);
SOAP_FMAC3 struct z1__zapiszProjektResponse * SOAP_FMAC4 soap_in_z1__zapiszProjektResponse(struct soap*, const char*, struct z1__zapiszProjektResponse *, const char*);
SOAP_FMAC1 struct z1__zapiszProjektResponse * SOAP_FMAC2 soap_instantiate_z1__zapiszProjektResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct z1__zapiszProjektResponse * soap_new_z1__zapiszProjektResponse(struct soap *soap, int n = -1)
{	return soap_instantiate_z1__zapiszProjektResponse(soap, n, NULL, NULL, NULL);
}

inline struct z1__zapiszProjektResponse * soap_new_req_z1__zapiszProjektResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__zapiszProjektResponse *_p = soap_new_z1__zapiszProjektResponse(soap);
	if (_p)
	{	soap_default_z1__zapiszProjektResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}

inline struct z1__zapiszProjektResponse * soap_new_set_z1__zapiszProjektResponse(
	struct soap *soap,
	const std::string& rezultat)
{	struct z1__zapiszProjektResponse *_p = soap_new_z1__zapiszProjektResponse(soap);
	if (_p)
	{	soap_default_z1__zapiszProjektResponse(soap, _p);
		_p->rezultat = rezultat;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_z1__zapiszProjektResponse(struct soap*, const struct z1__zapiszProjektResponse *, const char*, const char*);

inline int soap_write_z1__zapiszProjektResponse(struct soap *soap, struct z1__zapiszProjektResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_z1__zapiszProjektResponse(soap, p), 0) || soap_put_z1__zapiszProjektResponse(soap, p, "z1:zapiszProjektResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct z1__zapiszProjektResponse * SOAP_FMAC4 soap_get_z1__zapiszProjektResponse(struct soap*, struct z1__zapiszProjektResponse *, const char*, const char*);

inline int soap_read_z1__zapiszProjektResponse(struct soap *soap, struct z1__zapiszProjektResponse *p)
{	if (p)
	{	soap_default_z1__zapiszProjektResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_z1__zapiszProjektResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerToz1__opcja_DEFINED
#define SOAP_TYPE_PointerToz1__opcja_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToz1__opcja(struct soap*, z1__opcja *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToz1__opcja(struct soap*, const char *, int, z1__opcja *const*, const char *);
SOAP_FMAC3 z1__opcja ** SOAP_FMAC4 soap_in_PointerToz1__opcja(struct soap*, const char*, z1__opcja **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToz1__opcja(struct soap*, z1__opcja *const*, const char*, const char*);
SOAP_FMAC3 z1__opcja ** SOAP_FMAC4 soap_get_PointerToz1__opcja(struct soap*, z1__opcja **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToz1__student_DEFINED
#define SOAP_TYPE_PointerToz1__student_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToz1__student(struct soap*, z1__student *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToz1__student(struct soap*, const char *, int, z1__student *const*, const char *);
SOAP_FMAC3 z1__student ** SOAP_FMAC4 soap_in_PointerToz1__student(struct soap*, const char*, z1__student **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToz1__student(struct soap*, z1__student *const*, const char*, const char*);
SOAP_FMAC3 z1__student ** SOAP_FMAC4 soap_get_PointerToz1__student(struct soap*, z1__student **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToz1__prowadzacy_DEFINED
#define SOAP_TYPE_PointerToz1__prowadzacy_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToz1__prowadzacy(struct soap*, z1__prowadzacy *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToz1__prowadzacy(struct soap*, const char *, int, z1__prowadzacy *const*, const char *);
SOAP_FMAC3 z1__prowadzacy ** SOAP_FMAC4 soap_in_PointerToz1__prowadzacy(struct soap*, const char*, z1__prowadzacy **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToz1__prowadzacy(struct soap*, z1__prowadzacy *const*, const char*, const char*);
SOAP_FMAC3 z1__prowadzacy ** SOAP_FMAC4 soap_get_PointerToz1__prowadzacy(struct soap*, z1__prowadzacy **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToz1__importowanyPrzedmiot_DEFINED
#define SOAP_TYPE_PointerToz1__importowanyPrzedmiot_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToz1__importowanyPrzedmiot(struct soap*, z1__importowanyPrzedmiot *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToz1__importowanyPrzedmiot(struct soap*, const char *, int, z1__importowanyPrzedmiot *const*, const char *);
SOAP_FMAC3 z1__importowanyPrzedmiot ** SOAP_FMAC4 soap_in_PointerToz1__importowanyPrzedmiot(struct soap*, const char*, z1__importowanyPrzedmiot **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToz1__importowanyPrzedmiot(struct soap*, z1__importowanyPrzedmiot *const*, const char*, const char*);
SOAP_FMAC3 z1__importowanyPrzedmiot ** SOAP_FMAC4 soap_get_PointerToz1__importowanyPrzedmiot(struct soap*, z1__importowanyPrzedmiot **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToz1__termin_DEFINED
#define SOAP_TYPE_PointerToz1__termin_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToz1__termin(struct soap*, z1__termin *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToz1__termin(struct soap*, const char *, int, z1__termin *const*, const char *);
SOAP_FMAC3 z1__termin ** SOAP_FMAC4 soap_in_PointerToz1__termin(struct soap*, const char*, z1__termin **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToz1__termin(struct soap*, z1__termin *const*, const char*, const char*);
SOAP_FMAC3 z1__termin ** SOAP_FMAC4 soap_get_PointerToz1__termin(struct soap*, z1__termin **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToz1__temat_DEFINED
#define SOAP_TYPE_PointerToz1__temat_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToz1__temat(struct soap*, z1__temat *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToz1__temat(struct soap*, const char *, int, z1__temat *const*, const char *);
SOAP_FMAC3 z1__temat ** SOAP_FMAC4 soap_in_PointerToz1__temat(struct soap*, const char*, z1__temat **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToz1__temat(struct soap*, z1__temat *const*, const char*, const char*);
SOAP_FMAC3 z1__temat ** SOAP_FMAC4 soap_get_PointerToz1__temat(struct soap*, z1__temat **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToz1__csv_DEFINED
#define SOAP_TYPE_PointerToz1__csv_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToz1__csv(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToz1__csv(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToz1__csv(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToz1__csv(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToz1__csv(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToz1__przedmiot_DEFINED
#define SOAP_TYPE_PointerToz1__przedmiot_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToz1__przedmiot(struct soap*, z1__przedmiot *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToz1__przedmiot(struct soap*, const char *, int, z1__przedmiot *const*, const char *);
SOAP_FMAC3 z1__przedmiot ** SOAP_FMAC4 soap_in_PointerToz1__przedmiot(struct soap*, const char*, z1__przedmiot **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToz1__przedmiot(struct soap*, z1__przedmiot *const*, const char*, const char*);
SOAP_FMAC3 z1__przedmiot ** SOAP_FMAC4 soap_get_PointerToz1__przedmiot(struct soap*, z1__przedmiot **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put__QName(soap, p, "QName", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_string(soap, p, "string", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

/* End of soapH.h */
